<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2018.05.29</cwn_date>
    <cwn_prev>2018.05.22</cwn_prev>
    <cwn_next>2018.06.05</cwn_next>
    <cwn_date_text>May 22 to 29, 2018</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>opam 2.0.0 Release Candidate 2 is out!</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2018-05/msg00035.html</cwn_url>
      <cwn_who>Raja Boujbel announced</cwn_who>
      <cwn_what>
We are pleased to announce the second Release Candidate for opam 2.0.0.

This new RC fixes many small issues with the previous one, is much faster in
many areas, and brings sandboxing of package commands (enabled by default) on
macOS and Linux.

See details at https://opam.ocaml.org/blog/opam-2-0-0-rc2/

We'd like to thanks all testers, and welcome all interested to report any issues
with this last release candidate.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Dune and all Jane Street projects are now using MIT+DCO</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/dune-and-all-jane-street-projects-are-now-using-mit-dco/2042/1</cwn_url>
      <cwn_who>Jérémie Dimino announced</cwn_who>
      <cwn_what>
I'm happy to announce that effective from today,
[Dune](&lt;https://github.com/ocaml/dune&gt;),
[ppxlib](&lt;https://github.com/ocaml-ppx/ppxlib&gt;) and all projects under the
[janestreet github organisation](&lt;https://github.com/janestreet/&gt;) are now
distributed under the MIT license!

Additionally, contributions to these projects are no longer governed by a CLA
but instead by the [Linux Foundation's DCO](&lt;https://developercertificate.org/&gt;).
This should simplify the contribution process. If you are not familiar with the
DCO, the various projects mentioned above contain a [CONTRIBUTING.md
file](&lt;https://github.com/ocaml/dune/blob/master/CONTRIBUTING.md&gt;) explaining how
to proceed when submitting pull requests.

This move was motivated by the desire to use a simpler license and to simplify
the contribution process. The previous license was Apache 2.0 and prevented use
of our projects by others on a few occasions.

A big thanks to the Jane Street Legal and Compliance team who did all research
work to find out whether the combination MIT+DCO was a suitable replacement
which made this change possible.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Emacs package for automatic type display</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/emacs-package-for-automatic-type-display/1897/14</cwn_url>
      <cwn_who>Louis Roché announced</cwn_who>
      <cwn_what>
The package has a new name `merlin-eldoc`. Available here:
https://github.com/Khady/merlin-eldoc

Also it has been released on [melpa](&lt;https://melpa.org/#/merlin-eldoc&gt;) so it is
now easy to install: `M-x package-install RET merlin-eldoc` :tada: .

Since the first version:

- from 50 to 500 lines of elisp
- display type and/or doc of value at point
- highlight occurrences of value at point
- display a hint with type and/or labels expected while calling a function
- integrate with eldoc, so it is not a minor mode and it respects eldoc
configuration options
- support reason syntax
- many configuration options to choose the shape and the verbosity of the output

The exact list of changes is at
https://github.com/Khady/merlin-eldoc/blob/master/CHANGES.org

Latest demo (without all the fixes, but with all the features):

https://discourse-cdn-sjc2.com/standard11/uploads/ocaml/original/2X/e/e4af697f148852c2a9eec49f575d28797e86939f.gif

I have been asked how it compares to what is provided by lsp-mode and lsp-ocaml.
I find that merlin-eldoc is way more polished. For example it keeps the
documentation as ocamldoc rather than markdown, it highlights the types, it can
reformat type and doc to fit one line, .... It also offers more configuration
options. But they are not exclusive, it is possible to use lsp-ocaml +
merlin-eldoc (+ merlin too if you miss commands like `merlin-destruct`).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Ocaml Github Pull Requests</cwn_title>
      <cwn_who>Gabriel Scherer and the editor compiled this list</cwn_who>
      <cwn_what>
Here is a sneak peek at some potential future features of the Ocaml
compiler, discussed by their implementers in these Github Pull Requests.

- Make the character set for OCaml source code officially UTF-8
  https://github.com/ocaml/ocaml/pull/1802
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at OCaml Planet,
&lt;http://ocaml.org/community/planet/&gt;.

opam 2.0.0 Release Candidate 2 is out!
 &lt;http://www.ocamlpro.com/2018/05/22/opam-2-0-0-release-candidate-2-is-out/&gt;

simpl is less annoying than you think
 &lt;http://gallium.inria.fr/blog/simpl-is-less-annoying-than-you-think&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
