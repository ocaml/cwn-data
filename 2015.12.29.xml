<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2015.12.29</cwn_date>
    <cwn_prev>2015.12.22</cwn_prev>
    <cwn_next>2016.01.05</cwn_next>
    <cwn_date_text>December 22 to 29, 2015</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Downloadable list archives?</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-12/msg00121.html</cwn_url>
      <cwn_who>Spiros Eliopoulos asked and Daniel Bünzli replied</cwn_who>
      <cwn_what>
&gt; I recently started doing some spelunking into the annals of this mailing list
&gt; and was wondering the archives can be downloaded in a format that a mail
&gt; reader could open (e.g., mbox). Does any such archive exists? Thanks!

See https://github.com/ocaml/ocaml.org/issues/704
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Ptime 0.8.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-12/msg00123.html</cwn_url>
      <cwn_who>Daniel Bünzli announced</cwn_who>
      <cwn_what>
It's my pleasure to announce the first release of Ptime, described by:

 Ptime has platform independent POSIX time support in pure OCaml.  
 It provides a type to represent a well-defined range of POSIX timestamps
 with picosecond precision, conversion with date-time values, conversion  
 with RFC 3339 timestamps and pretty printing to a human-readable,  
 locale-independent representation.

 The additional Ptime_clock library provides access to a system POSIX  
 clock and to the system's current time zone offset.  

 Ptime is not a calendar library.

 Ptime depends on the `result` compatibility package. Ptime_clock depends  
 on your system library. Ptime_clock's optional JavaScript support depends  
 on js_of_ocaml. Ptime and its libraries are distributed under the BSD3 license.


Homepage: http://erratique.ch/software/ptime
API docs: http://erratique.ch/software/ptime/doc/


As usual feedback on the API is welcome and could still slightly change before
stabilizing on a 1.0.0 release.

Thanks to Matt Gray for a suggestion about the system time zone offset API
that led to better handling of unknown timezone offsets in the library (RFC
3339 has a convention to represent them).

Finally my thanks to Raphaël Proust who provided lodging while this was being
worked on this summer.

Happy 1451606400,

Daniel

P.S. The package has been tested on Darwin, Linux 32-bit and 64-bit, it
hopefully works on other posix compliant unices out of the box, report if not.
Ptime_clock is not yet supported on Windows. It will be at some point;
contributions to make that a smaller timestamp are welcome.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>amqp-client 0.9.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-12/msg00127.html</cwn_url>
      <cwn_who>Anders Fugmann announced</cwn_who>
      <cwn_what>
It is my pleasure to announce amqp-client version 0.9.0.

Amqp-client is client library for Amqp. The library has been renamed from
ocaml-amqp. Amqp-client is written in pure OCaml and supports both Async and
Lwt concurrency models. The library implements AMQP protocol spec 0-9-1 as
well as RabbitMQ specific extensions. The library is tested against RabbitMQ,
but should work with other Amqp server implementations as well.

Notable changes:
* Added support for Lwt in addition to Async
* Remove dependency on Core
* Split into amqp-client.async and amqp-client.lwt findlib packages
  and auto-detect which libraries are installed and install appropriate
  versions of the library
* Library renamed to amqp-client
* Fix bug when heartbeats are disabled server side.

amqp-client is available through opam and github[1]

/Anders

[1] https://github.com/andersfugmann/amqp-client
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Ocaml Github Pull Requests</cwn_title>
      <cwn_who>Gabriel Scherer compiled this list</cwn_who>
      <cwn_what>
Here is a sneak peek at some potential future features of the Ocaml
compiler, discussed by their implementers in these Github Pull Requests.

Specify in unix.mli which functions are implemented on Windows
https://github.com/ocaml/ocaml/pull/349

make ocamlnat build again (the return)
https://github.com/ocaml/ocaml/pull/355

Manual: new purely syntactic forms
https://github.com/ocaml/ocaml/pull/364

Warning for possibly misspelled built-in attributes
https://github.com/ocaml/ocaml/pull/372

Linear scan register allocator
https://github.com/ocaml/ocaml/pull/375
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the OCaml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocaml.org/&gt;.

Daniel Bünzli: Astring, Fmt, Logs, Ptime, Mtime, Rresult
  &lt;http://erratique.ch/software&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
