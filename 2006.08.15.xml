<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2006.08.15</cwn_date>
    <cwn_prev>2006.08.08</cwn_prev>
    <cwn_next>2006.08.22</cwn_next>
    <cwn_date_text>August 08 to 15, 2006</cwn_date_text>
  </cwn_head>
  <cwn_body>
	<cwn_entry>
		<cwn_title>format polymorphism</cwn_title>
		<cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/68d0a4862275d87e/960eb6badd61d187#960eb6badd61d187</cwn_url>
		<cwn_who>Christophe TROESTLER asked and Jacques Garrigue answered</cwn_who>
		<cwn_what>
&gt; Could someone tell me why, say "%s", is of type 
&gt;   'a. (string -&gt; 'b, 'a, 'b) format 

&gt; instead of 

&gt;   'a 'b. (string -&gt; 'b, 'a, 'b) format 


It clearly has the second type! 
&gt; I am asking this because if one wants to use the same format string 
&gt; both for reading and printing in a given function, one needs the 
&gt; latter type: 
&gt;   type 'a fmt = { fmt: 'b 'c. ('a,'b,'c) format } 
&gt;   fun  (s: _ fmt) -&gt; Printf.printf s.fmt, Scanf.sscanf "string" s.fm 


With your definition of fmt, you are requiring 'c to be independent 
from 'a. But If you look at the type of "%s", you see that 
'a = string -&gt; 'c, so that {fmt="%s"} is not well-typed. 
A solution is to define it as 
  type 'a fmt = {fmt: 'b 'c. ('a -&gt; 'b, 'c, 'b) format} 

The drawback is that only allows formats taking one argument. 
One could add definitions for any defined number of arguments, but I 
don't see any generic solution.
		</cwn_what>
	</cwn_entry>
	<cwn_entry>
		<cwn_title>Lexing, parsing, symbolic manipulation and interpreting</cwn_title>
		<cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/bf780ce80eb44eed/afe250dc59c5e02e#afe250dc59c5e02e</cwn_url>
		<cwn_who>Jon Harrop announced</cwn_who>
		<cwn_what>
Following some interesting queries from a customer, I have expanded 
the "Benefits of OCaml" pages to include a more thorough discussing of lexing 
and parsing (both with camlp4's stream-based recusive descent parsers and 
ocamllex+ocamlyacc), evaluation (calculator example and a complete "TinyML" 
interpreter) and symbolic manipulation (differentiation, simplification and 
pretty printing). 

Check out "parsing" and "examples": 

  http://www.ffconsultancy.com/free/ocaml/ 

I'd like to know what people think. :-)
		</cwn_what>
	</cwn_entry>
	<cwn_entry>
		<cwn_title>Streams</cwn_title>
		<cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/541dedf6ec56e9f4/fc544821e266278d#fc544821e266278d</cwn_url>
		<cwn_who>Error404 asked</cwn_who>
		<cwn_what>
I'm looking for some streams related tutorial or any other info. 
By stream i mean something like this (I don't know exact definition): 

open Lazy;; 
type 'a stream = Nil | Cons of 'a Lazy.t * 'a stream Lazy.t;; 

(* For example stream of 'integers from x' would look like this: *) 

let rec intsfrom x = 
  Cons(lazy x,lazy (intsfrom (x+1)));;
		</cwn_what>
		<cwn_who>Jonathan Roewen answered</cwn_who>
		<cwn_what>
The Stream module provides exactly this functionality. 
With camlp4o, you can use the old parser syntax too. 

#load "camlp4o.cma"; 

let rec enum_from n = [&lt; 'n; enum_from (n + 1) &gt;];; 

let first_10 = Stream.npeek 10 (enum_from 1);; 

Streams are also lazily evaluated. More complex examples can be had 
too, and there is the parser keyword to deconstruct streams as well. 
You should be able to find more info in the camlp4 manual at the caml 
site.
		</cwn_what>
		<cwn_who>Martin Jambon also answered</cwn_who>
		<cwn_what>
I call this a lazy list. Anyway, I use the following definition: 
   type 'a l = Empty | Cons of 'a * 'a t 
   and 'a t = 'a l lazy_t   (* only one lazy object per cell *) 

See attachment for the full implementation. (At the archive link)

You can manipulate such lists like real lists, only the syntax is less 
comfortable. They are different from streams in the sense of the standard 
Stream module, which are mutable.
		</cwn_what>
		<cwn_who>Chris King said</cwn_who>
		<cwn_what>
&gt; The Stream module provides exactly this functionality. 

Don't forget about Fstream 
(http://caml.inria.fr/pub/docs/manual-camlp4/manual008.html#toc30); it 
does the same thing as Stream but in a functional manner (and with a 
similar syntax, pa_fstream.cmo).
		</cwn_what>
		<cwn_who>Jon Harrop also answered</cwn_who>
		<cwn_what>
I just posted a link to some stuff on streams in the context of parsing but 
you can write intsfrom as: 
# #load "camlp4o.cma";; 
        Camlp4 Parsing version 3.09.2 

# let rec intsfrom n = [&lt; 'n; intsfrom(n+1) &gt;];; 

-- 
Dr Jon D Harrop, Flying Frog Consultancy Ltd. 
Objective CAML for Scientists 
http://www.ffconsultancy.com/products/ocaml_for_scientists
		</cwn_what>
	</cwn_entry>
	<cwn_entry>
	  <cwn_title>can ocamldep order .cmo files?</cwn_title>
	  <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/a5a5e625bee0bbdc/3ab33c8aa7824fff#3ab33c8aa7824fff</cwn_url>
	  <cwn_who>Nathan Mishra Linger asked</cwn_who>
	  <cwn_what>
I'm a new OCaml user and quite a fan so far (most of my functional 
programming experience has been in Haskell up to this point). 
I know that .cmo arguments to ocamlc must be in order of dependency. 
I also know that ocamldep can detect such dependencies and spit them 
out in a format that makefiles can include. 

But can ocamldep spit out the dependency ordering of a list of .cmo 
files in such a way that these can be input to ocamlc?  If not, it 
seems like it would be a useful thing for ocamldep to be able to do 
this.  Or do people have other solutions to this problem.
	  </cwn_what>
	<cwn_who>Till Varoquaux suggested</cwn_who>
	<cwn_what>
Try having a look at ocamldsort: 
http://dimitri.mutu.net/ocaml.html
	</cwn_what>
	<cwn_who>Nathaniel Gray also suggested</cwn_who>
	<cwn_what>
You might look at the OMake build system[1].  It's a concise and 
declarative like make, but with far superior dependency tracking and 
support for large projects.  Support for OCaml is particularly strong, 
since it's the primary language used for OMake itself and most of the 
other projects in our lab.  In particular, it takes care of keeping 
the .cmo files in proper order. 
Cheers, 
-n8 

[1] &lt;http://omake.metaprl.org/&gt;
	</cwn_what>
	</cwn_entry>
	<cwn_entry>
	  <cwn_title>question about how to bind c++ classes to ocaml</cwn_title>
	  <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/47d15899aca1c538/09a5fecb1d85dc64#09a5fecb1d85dc64</cwn_url>
	  <cwn_who>Michael asked and Jacques Garrigue answered</cwn_who>
	  <cwn_what>
&gt; when binding an ocaml class  to a c++ class, what's the preferred 
&gt; way to access member variables of the c++ class? 
&gt; One is just to implement the get and set function in ocaml to call 
&gt; the native get/set functions of the c++ class. That way you allways have 
&gt; some calls from ocaml to c only to get a value of a c++ object. 
&gt; Another way would be to add similar member variables to the ocaml class 
&gt; and everytime the c++ side changes a member it updates the ocaml side 
&gt; too (through direct access). This way you have an additional binding 
&gt; (the c++ object knows it's ocaml object), but you can access the member 
&gt; variables in ocaml through normal ocaml methods. 

I suppose this very much depends on how you intend to use this 
binding, but trying to synchronize members between C++ and ocaml seems 
a lot of work. The only advantage is faster read access, so this 
should only be done if you have to read this member often, and the 
cost is significant. There is also the induced cost of calling back 
ocaml every time the member is updated. 
Calls from ocaml to C are very cheap. If your access function doesn't 
do any allocation (i.e. never calls the GC), you can even make it 
faster by marking it as "noalloc". Beware many functions do 
allocate, including copy_double or copy_string.
	  </cwn_what>
	<cwn_who>Michael Wohlwend then asked and Jacques Garrigue answered</cwn_who>
	<cwn_what>
&gt; &gt; Calls from ocaml to C are very cheap. If your access function doesn't 
&gt; &gt; do any allocation (i.e. never calls the GC), you can even make it 
&gt; &gt; faster by marking it as "noalloc". Beware many functions do 
&gt; &gt; allocate, including copy_double or copy_string. 
&gt; thanks for pointing this out. The "noalloc"-thing isn't really 
&gt; described in the docu? :-) 


I suppose this is because it is a bit tricky. You have to look at all 
the dependencies to be sure that the function will never trigger the 
GC, and you might easily get it wrong. 
&gt; Another question which came up was: you can only declare normal 
&gt; functions (not methods) as "external", so you have to write a c 
&gt; function for every c++ member function. Do you rebuild the 
&gt; inheritance hierachy somehow through the type system (maybe with 
&gt; those mysterious phantom types?) or just put an ocaml class system 
&gt; on top of it? 

My approach in lablgtk was to first use phantom types, ie use 
parameters in abstract types to simulate subtyping. Then there is a 
second layer using ocaml objects, but I'm not sure you need it in 
general. It isonly needed because GTK+ has so many classes that it is 
difficult to track which function comes from which class. 
In Labltk for instance, there are only phantom types, and without 
subtyping (it uses a coercion function "coe" instead). This works well 
if you have a hierarchy with few layers (only two in labltk)
	</cwn_what>
	</cwn_entry>
	<cwn_entry>
	  <cwn_title>Camomile-0.7.0</cwn_title>
	  <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/3258713caf00fec9/9a4026701fad836f#9a4026701fad836f</cwn_url>
	  <cwn_who>Yoriyuki Yamagata announced</cwn_who>
	  <cwn_what>
I'm pleased to announce Camomile-0.7.0, new version of a comprehensive 
Unicode Library for OCaml. 
http://prdownloads.sourceforge.net/camomile/camomile-0.7.0.tar.bz2 

This release is a major change of module structures.  Now the whole 
library becomes a functor over "configuration" module, which specifies 
the location of data files necessary to run Camomile.  This enables to 
distribute binary with compiled Camomile library, which may run on 
machines with different directory structures.  If you just want to use 
default configuration, use CamomileLibrary.Main.Camomile module in the 
place of Camomile module of previous versions.
	  </cwn_what>
	</cwn_entry>
  </cwn_body>
</cwn>