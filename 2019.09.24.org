#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[http://alan.petitepomme.net/cwn/2019.09.17.html][Previous Week]] [[http://alan.petitepomme.net/cwn/index.html][Up]] [[http://alan.petitepomme.net/cwn/2019.10.01.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of September 17 to 24, 2019.

#+TOC: headlines 1


* Interesting OCaml Articles
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/interesting-ocaml-articles/1867/54

** Ryan Slade announced


I thought this might be of interest since AFAIK the backend is implemented in OCaml:
https://darklang.com/
      



* How does one print any type?
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/how-does-one-print-any-type/4362/7

** Continuing this thread, rixed said


As an additional piece of information, Batteries has to be mentioned.
Batteries is a superset of the standard library which, amongst other things, offers composable printers for every types, so that it is often not necessary to devise custom printers for your own types.

For instance, if you had this type:

#+begin_src ocaml
type t = (string, (float * int) list) Hashtbl.t
#+end_src

then a printer for this would be:

#+begin_src ocaml
let print output_chan value =
  Hashtbl.print String.print (List.print (Tuple2 Float.print Int.print)) output_chan value
#+end_src

Basically the kind of code that the ppx_deriving extension would generate, with the advantage that you can more easily substitute part of it with some custom printers of your own.
      

** Marek Kubica also said


If you just want composable printers, there is the ~Fmt~ library by @dbuenzli.
      



* OCamlPro cheat-sheets updates
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://sympa.inria.fr/sympa/arc/caml-list/2019-09/msg00014.html

** Thomas Blanc announced


It is our pleasure to announce the release of our up-to-date
cheat-sheets for the OCaml language and standard library. Our original
cheat-sheets were published in 2011, and as you know there has been
quite a few changes in the language, library and ecosystem overall. See
http://www.ocamlpro.com/2019/09/13/updated-cheat-sheets-ocaml-language-and-ocaml-standard-library/
for details.


Links:
- OCaml language (pdf, 1 page): http://www.ocamlpro.com/wp-content/uploads/2019/09/ocaml-lang.pdf
- OCaml stdlib (pdf, 2 pages): http://www.ocamlpro.com/wp-content/uploads/2019/09/ocaml-stdlib.pdf
- Sources: https://github.com/OCamlPro/ocaml-cheat-sheets


Comments and contributions on Github are welcome. Special thanks to
Hannes Mehnert for his lightning fast bug-reporting and Fourchaux for
his keen spelling eye.


As you can see, our Github repository contains not-yet-updated
cheat-sheets. Stay tuned for coming updates! Obviously, our opam
cheat-sheet is already in writing by the greatest opam experts you can
find. We also wish to make sheets for Lwt, Core, Dune, ppx - any
suggestions are welcome.


Happy hacking!

Thomas Blanc \\
OCamlPRO SAS \\
PS: if you're curious about what we've been doing lately, check out our blogpotst: \\
http://www.ocamlpro.com/2019/08/30/ocamlpros-compiler-team-work-update/ \\
http://www.ocamlpro.com/2019/07/11/opam-2-0-5-release/ \\
http://www.ocamlpro.com/2019/07/09/alt-ergo-participation-to-the-smt-comp-2019/
      



* OCaml 4.09.0 released
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/ocaml-4-09-0-released/4384/1

** octachron announced


The OCaml team have the pleasure of celebrating the birth of James Waddell Alexander II
by announcing the release of OCaml version 4.09.0 .

Some of the highlights of this new 4.09 release are:

- New optimisations, in particular for affine functions in matches, for instance
  #+begin_src ocaml
      type t = A | B | C
      let affine = function
        | A -> 4
        | B -> 3
        | C -> 2
  #+end_src
- The ~graphics~ library was moved out of the compiler distribution.
- The ~vmthread~ library was removed.
- Support for compiler plugins was removed.
- Many bug fixes.

The full list of change can be found in the changelog below.


It is  available as a set of OPAM switches, and as a source download here:

  https://caml.inria.fr/pub/distrib/ocaml-4.09/

Happy hacking.

*** Changes

This is the [[http://caml.inria.fr/pub/distrib/ocaml-4.09/notes/Changes][changelog]].


**** Runtime system:

- (*breaking change*) [[https://github.com/ocaml/ocaml/issues/1725][#1725]], [[https://github.com/ocaml/ocaml/issues/2279][#2279]]: Deprecate Obj.set_tag and Obj.truncate
  (Stephen Dolan, review by Gabriel Scherer, Damien Doligez and Xavier Leroy)

- (*breaking change*) [[https://github.com/ocaml/ocaml/issues/2240][#2240]]: Constify "identifier" in struct custom_operations
  (Cedric Cellier, review by Xavier Leroy)

- (*breaking change*) [[https://github.com/ocaml/ocaml/issues/2293][#2293]]: Constify "caml_named_value"
  (Stephen Dolan, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8787][#8787]], [[https://github.com/ocaml/ocaml/issues/8788][#8788]]: avoid integer overflow in caml_output_value_to_bytes
  (Jeremy Yallop, report by Marcello Seri)

- [[https://github.com/ocaml/ocaml/issues/2075][#2075]], [[https://github.com/ocaml/ocaml/issues/7729][#7729]]: rename _T macro used to support Unicode in the (Windows) runtime
  in order to avoid compiler warning
  (Nicolás Ojeda Bär, review by Gabriel Scherer and David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/2250][#2250]]: Remove extra integer sign-extension in compare functions
  (Stefan Muenzel, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8607][#8607]]: Remove obsolete macros for pre-2002 MSVC support
  (Stephen Dolan, review by Nicolás Ojeda Bär and David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/8656][#8656]]: Fix a bug in [caml_modify_generational_global_root]
  (Jacques-Henri Jourdan, review by Gabriel Scherer)

**** Standard library:

- [[https://github.com/ocaml/ocaml/issues/2262][#2262]]: take precision (.<n>) and flags ('+' and ' ') into account
  in printf %F
  (Pierre Roux, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/6148][#6148]], [[https://github.com/ocaml/ocaml/issues/8596][#8596]]: optimize some buffer operations
  (Damien Doligez, reports by John Whitington and Alain Frisch,
   review by Jeremy Yallop and Gabriel Scherer)

**** Other libraries:

- (*breaking change*) [[https://github.com/ocaml/ocaml/issues/2318][#2318]]: Delete the graphics library. This library is now available
  as a separate "graphics" package in opam. Its new home is:
  https://github.com/ocaml/graphics
  (Jérémie Dimino, review by Nicolas Ojeda Bar, Xavier Leroy and
   Sébastien Hinderer)

- (*breaking change*) [[https://github.com/ocaml/ocaml/issues/2289][#2289]]: Delete the vmthreads library. This library was deprecated in 4.08.0.
  (Jérémie Dimino)

- [[https://github.com/ocaml/ocaml/issues/2112][#2112]]: Fix Thread.yield unfairness with busy threads yielding to each
  other.
  (Andrew Hunter, review by Jacques-Henri Jourdan, Spiros Eliopoulos, Stephen
  Weeks, & Mark Shinwell)

- [[https://github.com/ocaml/ocaml/issues/7903][#7903]], [[https://github.com/ocaml/ocaml/issues/2306][#2306]]: Make Thread.delay interruptible by signals again
  (Xavier Leroy, review by Jacques-Henri Jourdan and Edwin Török)

- [[https://github.com/ocaml/ocaml/issues/2248][#2248]]: Unix alloc_sockaddr: Fix read of uninitialized memory for an
  unbound Unix socket. Add support for receiving abstract (Linux) socket paths.
  (Tim Cuthbertson, review by Sébastien Hinderer and Jérémie Dimino)

**** Compiler user-interface and warnings:

- (*breaking change*) [[https://github.com/ocaml/ocaml/issues/2276][#2276]]: Remove support for compiler plugins and hooks (also adds
  [Dynlink.unsafe_get_global_value])
  (Mark Shinwell, Xavier Clerc, review by Nicolás Ojeda Bär,
  Florian Angeletti, David Allsopp and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/2301][#2301]]: Hint on type error on int literal
  (Jules Aguillon, review by Nicolás Ojeda Bär , Florian Angeletti,
  Gabriel Scherer and Armaël Guéneau)

- (*breaking change*) [[https://github.com/ocaml/ocaml/issues/2314][#2314]]: Remove support for gprof profiling.
  (Mark Shinwell, review by Xavier Clerc and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/2190][#2190]]: fix pretty printing (using Pprintast) of "lazy ..." patterns and
  "fun (type t) -> ..." expressions.
  (Nicolás Ojeda Bär, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/2277][#2277]]: Use newtype names as type variable names
  The inferred type of (fun (type t) (x : t) -> x)
  is now printed as ('t -> 't) rather than ('a -> 'a).
  (Matthew Ryan)

- [[https://github.com/ocaml/ocaml/issues/2309][#2309]]: New options -with-runtime and -without-runtime in ocamlopt/ocamlc
  that control the inclusion of the runtime system in the generated program.
  (Lucas Pluvinage, review by Daniel Bünzli, Damien Doligez, David Allsopp
   and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/3819][#3819]], [[https://github.com/ocaml/ocaml/issues/8546][#8546]] more explanations and tests for illegal permutation
  (Florian Angeletti, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/8537][#8537]]: fix the -runtime-variant option for bytecode
  (Damien Doligez, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/8541][#8541]]: Correctly print multi-lines locations
  (Louis Roché, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/8579][#8579]]: Better error message for private constructors
  of an extensible variant type
  (Guillaume Bury, review by many fine eyes)

**** Code generation and optimizations:

- [[https://github.com/ocaml/ocaml/issues/2278][#2278]]: Remove native code generation support for 32-bit Intel macOS,
  iOS and other Darwin targets.
  (Mark Shinwell, review by Nicolas Ojeda Bar and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8547][#8547]]: Optimize matches that are an affine function of the input.
  (Stefan Muenzel, review by Alain Frisch, Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/1904][#1904]], [[https://github.com/ocaml/ocaml/issues/7931][#7931]]: Add FreeBSD/aarch64 support
  (Greg V, review by Sébastien Hinderer, Stephen Dolan, Damien Doligez
   and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8507][#8507]]: Shorten symbol names of anonymous functions in Flambda mode
  (the directory portions are now hidden)
  (Mark Shinwell, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/8681][#8681]], [[https://github.com/ocaml/ocaml/issues/8699][#8699]], [[https://github.com/ocaml/ocaml/issues/8712][#8712]]: Fix code generation with nested let rec of functions.
  (Stephen Dolan, Leo White, Gabriel Scherer and Pierre Chambart,
   review by Gabriel Scherer, reports by Alexey Solovyev and Jonathan French)

**** Manual and documentation:

- [[https://github.com/ocaml/ocaml/issues/7584][#7584]], [[https://github.com/ocaml/ocaml/issues/8538][#8538]]: Document .cmt* files in the "overview" of ocaml{c,opt}
  (Oxana Kostikova, rewiew by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/8757][#8757]]: Rename Pervasives to Stdlib in core library documentation.
  (Ian Zimmerman, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/8515][#8515]]: manual, precise constraints on reexported types
  (Florian Angeletti, review by Gabriel Scherer)

**** Tools:

- [[https://github.com/ocaml/ocaml/issues/2221][#2221]]: ocamldep will now correctly allow a .ml file in an include directory
  that appears first in the search order to shadow a .mli appearing in a later
  include directory.
  (Nicolás Ojeda Bär, review by Florian Angeletti)

**** Internal/compiler-libs changes:

- [[https://github.com/ocaml/ocaml/issues/1579][#1579]]: Add a separate types for clambda primitives
  (Pierre Chambart, review by Vincent Laviron and Mark Shinwell)

- [[https://github.com/ocaml/ocaml/issues/1965][#1965]]: remove loop constructors in Cmm and Mach
  (Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/1973][#1973]]: fix compilation of catches with multiple handlers
  (Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/2228][#2228]], [[https://github.com/ocaml/ocaml/issues/8545][#8545]]: refactoring the handling of .cmi files
  by moving the logic from Env to a new module Persistent_env
  (Gabriel Scherer, review by Jérémie Dimino and Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/2229][#2229]]: Env: remove prefix_idents cache
  (Thomas Refis, review by Frédéric Bour and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/2237][#2237]], [[https://github.com/ocaml/ocaml/issues/8582][#8582]]: Reorder linearisation of Trywith to avoid a call instruction
  (Vincent Laviron and Greta Yorsh, additional review by Mark Shinwell;
  fix in [[https://github.com/ocaml/ocaml/issues/8582][#8582]] by Mark Shinwell, Xavier Leroy and Anil Madhavapeddy)

- [[https://github.com/ocaml/ocaml/issues/2265][#2265]]: Add bytecomp/opcodes.mli
  (Mark Shinwell, review by Nicolas Ojeda Bar)

- [[https://github.com/ocaml/ocaml/issues/2268][#2268]]: Improve packing mechanism used for building compilerlibs modules
  into the Dynlink libraries
  (Mark Shinwell, Stephen Dolan, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/2280][#2280]]: Don't make more Clambda constants after starting Cmmgen
  (Mark Shinwell, review by Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/2281][#2281]]: Move some middle-end files around
  (Mark Shinwell, review by Pierre Chambart and Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/2283][#2283]]: Add [is_prefix] and [find_and_chop_longest_common_prefix] to
  [Misc.Stdlib.List]
  (Mark Shinwell, review by Alain Frisch and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/2284][#2284]]: Add various utility functions to [Misc] and remove functions
  from [Misc.Stdlib.Option] that are now in [Stdlib.Option]
  (Mark Shinwell, review by Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/2286][#2286]]: Functorise [Consistbl]
  (Mark Shinwell, review by Gabriel Radanne)

- [[https://github.com/ocaml/ocaml/issues/2291][#2291]]: Add [Compute_ranges] pass
  (Mark Shinwell, review by Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/2292][#2292]]: Add [Proc.frame_required] and [Proc.prologue_required].
  Move tail recursion label creation to [Linearize].  Correctly position
  [Lprologue] relative to [Iname_for_debugger] operations.
  (Mark Shinwell, review by Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/2308][#2308]]: More debugging information on [Cmm] terms
  (Mark Shinwell, review by Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/7878][#7878]], [[https://github.com/ocaml/ocaml/issues/8542][#8542]]: Replaced TypedtreeIter with tast_iterator
  (Isaac "Izzy" Avram, review by Gabriel Scherer and Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/8598][#8598]]: Replace "not is_nonexpansive" by "maybe_expansive".
  (Thomas Refis, review by David Allsopp, Florian Angeletti, Gabriel Radanne,
   Gabriel Scherer and Xavier Leroy)

**** Compiler distribution build system:

- [[https://github.com/ocaml/ocaml/issues/2267][#2267]]: merge generation of header programs, also fixing parallel build on
  Cygwin.
  (David Allsopp, review by Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/8514][#8514]]: Use boot/ocamlc.opt for building, if available.
  (Stephen Dolan, review by Gabriel Scherer)

**** Bug fixes:

- [[https://github.com/ocaml/ocaml/issues/8864][#8864]], [[https://github.com/ocaml/ocaml/issues/8865][#8865]]: Fix native compilation of left shift by (word_size - 1)
  (Vincent Laviron, report by Murilo Giacometti Rocha, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/2296][#2296]]: Fix parsing of hexadecimal floats with underscores in the exponent.
  (Hugo Heuzard and Xavier Leroy, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/8800][#8800]]: Fix soundness bug in extension constructor inclusion
  (Leo White, review by Jacques Garrigue)

- [[https://github.com/ocaml/ocaml/issues/8848][#8848]]: Fix x86 stack probe CFI information in caml_c_call and
  caml_call_gc
  (Tom Kelly, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/7156][#7156]], [[https://github.com/ocaml/ocaml/issues/8594][#8594]]: make top level use custom printers if they are available
  (Andrew Litteken, report by Martin Jambon, review by Nicolás Ojeda Bär,
   Thomas Refis, Armaël Guéneau, Gabriel Scherer, David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/3249][#3249]]: ocamlmklib should reject .cmxa files
  (Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/7937][#7937]], [[https://github.com/ocaml/ocaml/issues/2287][#2287]]: fix uncaught Unify exception when looking for type
  declaration
  (Florian Angeletti, review by Jacques Garrigue)

- [[https://github.com/ocaml/ocaml/issues/8610][#8610]], [[https://github.com/ocaml/ocaml/issues/8613][#8613]]: toplevel printing, consistent deduplicated name for types
  (Florian Angeletti, review by Thomas Refis and Gabriel Scherer,
   reported by Xavier Clerc)

- [[https://github.com/ocaml/ocaml/issues/8635][#8635]], [[https://github.com/ocaml/ocaml/issues/8636][#8636]]: Fix a bad side-effect of the -allow-approx option of
  ocamldep. It used to turn some errors into successes
  (Jérémie Dimino)

- [[https://github.com/ocaml/ocaml/issues/8701][#8701]], [[https://github.com/ocaml/ocaml/issues/8725][#8725]]: Variance of constrained parameters causes principality issues
  (Jacques Garrigue, report by Leo White, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/8777][#8777]](partial): fix position information in some polymorphic variant
  error messages about missing tags
  (Florian Angeletti, review by Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/8779][#8779]], more cautious variance computation to avoid missing cmis
  (Florian Angeletti, report by Antonio Nuno Monteiro, review by Leo White)

- [[https://github.com/ocaml/ocaml/issues/8810][#8810]]: Env.lookup_module: don't allow creating loops
  (Thomas Refis, report by Leo White, review by Jacques Garrigue)

- [[https://github.com/ocaml/ocaml/issues/8862][#8862]], [[https://github.com/ocaml/ocaml/issues/8871][#8871]]: subst: preserve scopes
  (Thomas Refis, report by Leo White, review by Jacques Garrigue)

- [[https://github.com/ocaml/ocaml/issues/8921][#8921]], [[https://github.com/ocaml/ocaml/issues/8924][#8924]]: Fix stack overflow with Flambda
  (Vincent Laviron, review by Pierre Chambart and Leo White,
   report by Aleksandr Kuzmenko)

- [[https://github.com/ocaml/ocaml/issues/8944][#8944]]: Fix "open struct .. end" on clambda backend
  (Thomas Refis, review by Leo White, report by Damon Wang and Mark Shinwell)
      



* OCaml Training 5-6 and 7-8 November 2019 at OCamlPro
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://sympa.inria.fr/sympa/arc/caml-list/2019-09/msg00020.html

** Muriel SHAN SEI FAN announced


In our endeavour to encourage professional programmers to understand and
use OCaml, OCamlPro will be giving 2 training sessions, in French, in
our Paris offices:
1) OCaml Beginner course for professional programmers (5-6 Nov)
2) OCaml Expertise (7-8 Nov).

The "Expert" OCaml course is for already experienced OCaml programmers
to better understand advanced type system possibilities (objects,
GADTs), discover GC internals, write "compiler-optimizable" code.
These sessions are also an opportunity to come discuss with our OPAM &
Flambda lead developers and core contributors in Paris.
Training in English can also be organized, on-demand.
Do not hesitate pass the word.

Links:
- http://www.ocamlpro.com/training-ocamlpro/
- http://www.ocamlpro.com/course-ocaml-development/
- http://www.ocamlpro.com/course-ocaml-expert/
- Register link: http://www.ocamlpro.com/forms/preinscriptions-formation-ocaml/

Cheers,
Muriel\\
PS: Note that this complements the excellent OCaml MOOC from Université
Paris-Diderot and the learn-OCaml platform of the OCaml Software Foundation.
      



* Arch Linux installer written in OCaml
:PROPERTIES:
:CUSTOM_ID: 6
:END:
Archive: https://discuss.ocaml.org/t/arch-linux-installer-written-in-ocaml/4388/1

** Darren announced


I'm sharing the WIP [[https://github.com/darrenldl/linux-laptop-salt-hard][project]] on the off chance it's interesting/useful to someone.

*** What
This installer written in OCaml allows installing Arch Linux with optional disk encryption (where all key files placements, boot parameters adjustment etc are adjusted for you). The installer aims to be somewhat smart and hassle free to use.

Right now
- It recognises whehter your Arch Linux live CD is running in BIOS or EFI mode, and adjusts prompts/partitioning accordingly (not technically difficult at all, but just so you know it does that)
- Handles optional disk encryption, with encrypted boot (haven't added code for toggling boot partition encryption yet)
- Allows two disk layout schemes atm
  1. use a single disk, installer does partitioning for you
  2. you tell installer partitions for ~/~, ~/boot~ and ~/efi~ if in EFO mode, and installer use those info instead

WIP
- Installation of SaltStack files (for package management) and other helper scripts
  - Section below gives more context on these things

TODO
- Resumable installation (add logging etc)
- Static config file support (so installation is fully automated)
- Add disk layout scheme where it's system partition + USB key
- Whatever is missing from the original script

*** Context
This installer is essentially a rewrite of the install script I've been using for a while.

I especially needed an semi-automated solution to installing Arch Linux as I was using a encrypted USB key + encrypted system partition setup, where manual installation is error prone and time consuming.

The install script was thus born, written in bash, accompanied by salt files for package management, and various helper scripts for easier handling of the USB key in day-to-day operations.

This is all fine and dandy until I wanted to have different disk layout, and pick whether I want encryption or not. Bash script is not terribly good for these somewhat decision/logic heavy tasks for obvious reasons.

And so rewrite in OCaml began, and stuck with OCaml even after considering various other choices (e.g. elvish, xonsh, fish, python, racket).

*** Intention
The code aims to facilitate customisation (make a copy and adjust things your way) by providing a sane starting point, but does not aim to provide a proper "library" type of code base due to the somewhat volatile nature of Arch, and assumptions made may not be directly portable to other distros.

*** Navigation
- ~scripts/~
  - [[https://raw.githubusercontent.com/darrenldl/linux-laptop-salt-hard/master/scripts/setup.sh][~setup.sh~]] is the original bash installer script, which this installer is based on
  - remaining files are helpers, and misc scripts
- ~saltstack/~
  - SaltStack files for package management
- ~installer_ml/~ contains the OCaml installer code
  - ~src/~
    - [[https://raw.githubusercontent.com/darrenldl/linux-laptop-salt-hard/master/installer_ml/src/installer.ml][~installer.ml~]] somewhat show cases the intended high level use, the install workflow is specified here
    - [[https://raw.githubusercontent.com/darrenldl/linux-laptop-salt-hard/master/installer_ml/src/disk_layout.ml][~disk_layout.ml~]] handles formatting, LUKS setup, mounting, unmounting of partitions etc
    - [[https://raw.githubusercontent.com/darrenldl/linux-laptop-salt-hard/master/installer_ml/src/task_book.ml][~task_book.ml~]] facilitates high level task registration, used in ~installer.ml~
    - remainders are helper code largely

*** TL;DR
I wrote a Arch installer in OCaml, thought it's pretty neat.
      

** gasche asked and Darren replied


> Sounds very cool!

Thanks!

> Do you think there is potential for adoption within the Arch community?

Yes, but definitely not widespread, there are two main reasons.

*** For people who like to build their system programmatically
The language choice is very niche to begin with -  OCaml is definitely not a popular choice (if is one to begin with) for system administration.

For initial bootstrapping, most other langs are better choices: rich stdlib is desirable for the initial phase, good handling of interprocess communication, easy access to regex (maybe not as efficient efficient), easy text file manipulation (a lot of formats supported in stdlib or ecosystem etc).

So overall Python, Ruby, Racket are better for this phase. Especially since there are system administration frameworks in Python (e.g. [[https://www.fabfile.org/][Fabric]]) and in Ruby (the name escaped me). I stuck with OCaml since my brain can't process more than a hundred lines of code in dynamically typed languages.

So the targeted audience is quite limited - one that knows OCaml, the distro's native installer doesn't work well enough and thus interested in building their own installer, and does not already have their favourite installer.

*** Arch overall promotes customisation
So most people have their own installers. This is especially true when Arch deprecated the official installer some years ago.

So sticking to mine as is probably doesn't make too much sense to most people. The intention was definitely allowing other people to use it as a template for making their own OCaml installer to begin with anyway.

> What are other people using, and could you convince them to migrate to your installer (and help maintain it)?

Some of the reasons mentioned in above section carry over.

Due to Arch's philosophy on customisation, actively convincing others to use my installer would be close to convincing someone to use your favourite editor and abandon theirs.

In any case, I am the primary beneficiary I had in mind, so lack of adoption would not prevent me from maintaining it. Being able to reinstall your Linux willy-nilly with full disk encryption, and giving you a fresh but essentially identical copy of your current install (via package management + dotfiles management), that's gold.

*EDIT*: One extra reason is maybe just to demonstrate writing one in OCaml is feasible, as it wasn't quite obvious what the scope of work was when I first started writing.
      

** Anton Kochkov said


You might want to check also the [[https://0install.net/][0install]] which is also was ported to OCaml from Python, see [[https://github.com/0install/0install][their GitHub repository]]. Though judging by their repositories activity, they seem abandoned OCaml version and thrown all resources to the C#/.NET version in [[https://github.com/0install/0install-dotnet][0install-dotnet]].
      

** Thomas Leonard replied


> Though judging by their repositories activity, they seem abandoned OCaml version and thrown all resources to the C#/.NET version

Well, this is the problem with OCaml. When 0install was written in Python, I did frequent bug-fix releases. Now it's in OCaml, there's no need to do that. e.g. there were 8 Python releases in 2012 vs 1 OCaml release last year. I prefer it that way, but it's bad for the project's metrics.

There is no directing of resources. Bastian Eicher did the C# version before and is still doing it now (though more of it is now hosted in the main github org and we just merged the two sets of documentation to make http://docs.0install.net/).
      



* Online programming playground
:PROPERTIES:
:CUSTOM_ID: 7
:END:
Archive: https://discuss.ocaml.org/t/online-programming-playground/4391/1

** Vishal Rana announced


I wanted to shared [[https://code.labstack.com/ocaml][https://code.labstack.com/ocaml]], an online OCaml programming playground. I hope you will find it useful.
      



* A look back on OCaml 4.*
:PROPERTIES:
:CUSTOM_ID: 8
:END:
Archive: https://discuss.ocaml.org/t/a-look-back-on-ocaml-4/4397/1

** Thomas Blanc announced


To celebrate the 0th anniversary of the 4.09.0 release, OCamlPro decided to look back at how far the language and standard library got since 3.12.

If you want to feel old and nostalgic, or if you want see what your elders had to put up with before, feel free to check out [[http://www.ocamlpro.com/2019/09/20/a-look-back-on-ocaml/][our blog]].
      



* Multicore prerequisite patches appearing in released OCaml compilers now
:PROPERTIES:
:CUSTOM_ID: 9
:END:
Archive: https://discuss.ocaml.org/t/multicore-prerequisite-patches-appearing-in-released-ocaml-compilers-now/4408/1

** Anil Madhavapeddy announced


The release of OCaml 4.09.0 is particularly significant for us at OCaml Labs, as it represents a phase shift in our development efforts towards integrating multicore parallelism into the language.  For the past few years, we have been [[https://github.com/ocaml-multicore/ocaml-multicore/wiki][implementing multicore as a branch]] based off released versions of the compiler.  We finished rebasing it to [[https://twitter.com/kc_srk/status/982165248206491648][OCaml 4.06.1]] in April and since then have been working on upstreaming a series of incremental changes to OCaml itself.

OCaml 4.09.0 is the first such release in which multicore patches are appearing in released versions of the compiler.  This is _not_ the full multicore feature set, but rather the prerequisites to introducing changes required towards introducing parallelism into the runtime. You can now expect to see a regular set of incremental changes towards multicore in every release of OCaml as we ramp up our upstreaming efforts.

One decision we have taken recently is to spend our time on upstreaming changes in favour of further rebases to more recently versions of the compiler.  If someone does have a pressing need for a rebase to OCaml 4.08 or 4.09, then please get in touch with me -- but bear in mind that it's a significant amount of work and so will need to be justified with a usecase.

In the meanwhile, here's a summary of what some of those patches are, and what to expect in future releases:

*** 4.09.0

- In the upcoming multicore GC, object headers (tags and lengths) are immutable due to multiple threads scanning the heap simultaneously; any mutations could violate heap invariants in another thread and cause corruption.  Therefore, ~Obj.truncate~ ([[https://github.com/ocaml/ocaml/pull/2279][#2279]]) and ~Obj.set_tag~ ([[https://github.com/ocaml/ocaml/pull/1725][#1725]]) have now been deprecated, and all uses removed from the standard library.

- Values can be passed from OCaml to C by registering them under a known name using the ~Callback.register~ function.  They can later be retrieved from C using ~caml_named_value~, which returns a ~value*~ that can then later be dereferenced.  OCaml 4.09.0 modifies the C return type to ~const value*~ to indicate that the C code cannot use the pointer that is returned to mutate the value that is registered ([[https://github.com/ocaml/ocaml/pull/2293][#2293]]).  The ability to mutate a value using the raw pointer returned by ~caml_named_value~ is incompatible with the upcoming multicore GC, and rarely (never?) used in existing single-core OCaml code.


*** Ongoing for 4.10.0~dev

This is the subsequent release that is branching imminently now that OCaml [[https://discuss.ocaml.org/t/ocaml-4-09-0-released/4384][4.09.0 has been released]].

- Variables that are global in the OCaml runtime need to be duplicated per-domain in multicore, since each parallel thread of execution maintains its own table of domain local variables. OCaml 4.09.0 moves all such global C variables into a "domain state" table ([[https://github.com/ocaml/ocaml/pull/8713][#8713]]).  While the change does not introduce any API changes, it significantly alters code generation by reserving a register that was previously used as the exception pointer in every CPU backend for quickly accessing the domain state table.  It is therefore a syntactically heavy change, but shouldn't modify the semantics of your code.  If you do notice any oddnesses when testing OCaml 4.10~dev when it is released as a beta, please do report a reproduction case upstream.

- (bonus change) While emerging from deep in a rabbit hole from fixing thread stack overflow detection and reentrant marshalling by ensuring that allocation functions do not trigger OCaml callbacks when invoked from C, it was discovered that major GC hooks could also interact with the GC heap.  This is now forbidden ([[https://github.com/ocaml/ocaml/pull/8711][#8711]]) in OCaml 4.09.0.  There was no code found in the wild that did not already conform to this restriction, and it is generally safer this way for the multicore GC as well.

*** Ongoing for 4.11.0~dev

As 4.10 is about to be branched, we are working away on the following next set of features to push upstream into OCaml 4.11:

- Better safe points ([[https://github.com/ocaml-multicore/ocaml-multicore/issues/187][#187]])
- Tracing and deprecating the instrumented runtime
- Converging on the representation of closures in bytecode and native code.
- Modifying GC colors to suit multicore.

As always, these chunks of ongoing work are subject to change as the technical design process is quite iterative and dependent on benchmarking results, but are hopefully useful for you to know!
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[http://alan.petitepomme.net/cwn/][the archive]] or the [[http://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].

#+BEGIN_authorname
[[http://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
