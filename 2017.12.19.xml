<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2017.12.19</cwn_date>
    <cwn_prev>2017.12.12</cwn_prev>
    <cwn_next>2017.12.26</cwn_next>
    <cwn_date_text>December 12 to 19, 2017</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>ppx 4.06 editions: ppx_import, ppx_deriving, ppx_deriving_{protobuf,yojson}</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-ppx-4-06-editions-ppx-import-ppx-deriving-ppx-deriving-protobuf-yojson/1264/1</cwn_url>
      <cwn_who>gasche announced</cwn_who>
      <cwn_what>
Over the last few months, we have released 4.06-compatibility versions of
[ppx_deriving](&lt;https://github.com/ocaml-ppx/ppx_deriving&gt;) and its plugins
[ppx_deriving_protobuf](&lt;https://github.com/ocaml-ppx/ppx_deriving_protobuf&gt;) and
[ppx_deriving_yojson](&lt;https://github.com/ocaml-ppx/ppx_deriving&gt;), and the
related project [ppx_import](&lt;https://github.com/ocaml-ppx/ppx_import&gt;):

- ppx_import [1.3](&lt;https://github.com/ocaml-ppx/ppx_import/releases/tag/v1.3&gt;)
and [1.4](&lt;https://github.com/ocaml-ppx/ppx_import/releases/tag/v1.4&gt;)
- ppx_deriving
[4.1.5](&lt;https://github.com/ocaml-ppx/ppx_deriving/releases/tag/v4.1.5&gt;) and
[4.2.1](&lt;https://github.com/ocaml-ppx/ppx_deriving/releases/tag/v4.2.1&gt;)
- ppx_deriving_protobuf
[2.6](&lt;https://github.com/ocaml-ppx/ppx_deriving_protobuf/releases/tag/v2.6&gt;)
- ppx_deriving_yojson
[3.1](&lt;https://github.com/ocaml-ppx/ppx_deriving_yojson/releases/tag/v3.1&gt;)

Some users may remember that it took a long time for support for OCaml 4.05 to
come to these projects, and know that there have been some lingering issues
related to interaction between ppx_deriving and driverized ppxes -- some of
which have been fixed by @diml's work on these issues, see [the separate
announce](&lt;https://discuss.ocaml.org/t/ppx-deriving-ppx-type-conv-and-jbuilder-things-should-be-better-now/1212&gt;)
on the interaction between ppx_deriving, ppx_type_conv and jbuilder.

The main reason for these delays and trouble is that, while the author and
maintainer of ppx_deriving and plugins, @whitequark, let me know several months
ago that she would be less active maintaining these libraries in the future, I
have been too slow to fill in this maintenance gap. Now that I understand the
release process and the amount of work required to adapt to a new OCaml release
(which is not much), I expect that support releases for newer OCaml versions,
starting with 4.07, will be much smoother -- the hope is to release them before
the OCaml version itself.

If you have been using these projects (especially if you have already
contributed some code, but that is no requirement), now is an excellent time to
get more involved in the development. I will take care of compatibility with
future OCaml releases, and simple bugfixes, but there are interesting changes to
be discussed for these libraries (partial or complete migration to
ocaml-migrate-parsetree, driverization, convergence with ppx_type_conv, and in
general participation in the rapidly-evolving ppx ecosystem) on which your help
would be very welcome, and more active contributors, more voices to discuss
decisions, can only improve the project.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Ocaml-gist 0.0.1</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ocaml-gist-0-0-1/1278/1</cwn_url>
      <cwn_who>Sander announced</cwn_who>
      <cwn_what>
It's my pleasure to announce the initial version of ocaml-gist. It's still a bit
rough, but I believe it shows great potential already:
&lt;https://sanderspies.github.io/ocaml-gist/&gt;. Do note that for now it only supports
OCaml 4.04.2.

ocaml-gist allows you to execute OCaml code on any webpage with no server
needed. It also provides autocomplete and type info hover with the help of a
modified version of Merlin that runs on the web.

I wrote an article that describes the technology used by ocaml-gist in more
detail: &lt;https://sanderspies.github.io/ocaml-gist/blog.html&gt;.

As always, feedback is very welcome.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>New release: ProVerif 1.98</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/new-release-proverif-1-98/1294/1</cwn_url>
      <cwn_who>Bruno Blanchet announced</cwn_who>
      <cwn_what>
I am pleased to announce a new release of ProVerif, version 1.98.
ProVerif is a automatic security protocol verifier that relies on the symbolic
model of cryptography.

ProVerif is available at
http://proverif.inria.fr
It is also available via opam (see installation instructions
in Section 1.4 of the manual http://proverif.inria.fr/manual.pdf )

The main novelty is an interactive simulator by Marc Sylvestre and I,
which allows you to run your protocol step by step interactively
(see Section 3.4 of the manual).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Logarion - static website generation</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/logarion-static-website-generation/1297/1</cwn_url>
      <cwn_who>Orbifx announced</cwn_who>
      <cwn_what>
Logarion v0.3 release candidate adds static website generation from archive.

https://gitlab.com/orbifx/logarion/tags/v0.3rc

Far from polished, it should be usable now. I'll go through a phase of
documentation, hoping to get some feedback meanwhile.

Generate static website from a Logarion archive:

    logarion_cli convert "html"

Where `html` is the folder to save the HTML files and static directory.

Important changes:

- Templates should not contain HTML code in preparation for more conversion formats
- Started relativizing links for portability of static pages
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Release of Mesh 0.9.1</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-release-of-mesh-0-9-1/1305/1</cwn_url>
      <cwn_who>Christophe announced</cwn_who>
      <cwn_what>
It is my pleasure to announce the release of _mesh_, _mesh-triangle_ (binding to
[Triangle](&lt;https://www.cs.cmu.edu/~quake/triangle.html&gt;)), _mesh-graphics_ and
_mesh-easymesh_ version 0.9.1. These packages provide functions to create and
represent 2D triangular meshes, useful for example for the _finite element
method_.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>wcs-ocaml: chatbots in OCaml</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2017-12/msg00064.html</cwn_url>
      <cwn_who>Louis Mandel announced</cwn_who>
      <cwn_what>
We are happy to announce the new release of WCS-OCaml
(&lt;https://ibm.github.io/wcs-ocaml/&gt;) a library to write chatbots in OCaml using
Watson Conversation Service (&lt;https://www.ibm.com/watson/services/conversation/&gt;).

The library can be installed using opam:
  opam install wcs
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Nanocaml - Compiler-writing framework for nanopasses</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-nanocaml-compiler-writing-framework-for-nanopasses/1311/1</cwn_url>
      <cwn_who>Ohad Rau announced</cwn_who>
      <cwn_what>
I am very excited to announce the release of
[Nanocaml](&lt;https://github.com/nanocaml/nanocaml&gt;)! Nanocaml is a port/clone of
the Nanopass framework for Scheme and Racket (can't put a link here, but it will
be the first result if you search for "Nanopass framework") and provides a
PPX-powered toolkit for writing compilers. It emphasizes the use of many tiny
passes, similar to the UNIX philosophy but for compilers. Although the version
is 0.1.0, it is already very close to the Scheme and Racket versions in terms of
features and has a number of advantages (such as static typechecking, the OCaml
syntax, and less "magic"). We are almost at our 1.0 target, but we wanted to
release this version earlier to get feedback and hopefully more test code.

The README has a basic explanation of how to use the library, and in addition to
our examples we have ported [the compiler from the Racket
docs](&lt;https://github.com/nanocaml/nanocaml&gt;).

Our 2 main limitations at this moment are the following:

* `module%language` declarations don't carry over between files, which makes it
tedious to work with in `utop`. Our expected solution is to generate a SQLite
database file storing language declarations from a project, but we are open to
other ideas.

* Aliases don't always work in patterns. This is a known issue and will likely
be solved in the next commit as it doesn't seem like it will be a difficult fix.

If you have any questions about using the library please feel free to ask! We
would love to get new users and more feedback on this!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at OCaml Planet,
&lt;http://ocaml.org/community/planet/&gt;.

Coq 8.7.1 is out
 &lt;https://coq.inria.fr/news/141.html&gt;

testing ocaml-migrate-parsetree with `ppx_deriving_crowbar`
 &lt;https://ocamllabs.github.io//general/2017/12/14/DerivingCrowbar.html&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
