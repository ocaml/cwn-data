<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2012.10.30</cwn_date>
    <cwn_prev>2012.10.23</cwn_prev>
    <cwn_next>2012.11.06</cwn_next>
    <cwn_date_text>October 23 to 30, 2012</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>OCaml-bitcoin 1.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-10/msg00151.html</cwn_url>
      <cwn_who>Dario Teixeira announced</cwn_who>
      <cwn_what>
OCaml-bitcoin is a library offering an OCaml interface to the official
Bitcoin client API. It works by making JSON-RPC calls over the network
to a running Bitcoin daemon offering the client API. The project's
homepage can be found here:

http://ocaml-bitcoin.forge.ocamlcore.org/

Bitcoin has been a controversial subject, to say the least. With this
in mind, I've written a blog post that hopefully clarifies my view on
the subject. It also contains some technical information concerning
the implementation of OCaml-bitcoin:

http://nleyten.com/post/2012/10/24/Announcing-OCaml-bitcoin-1.0

To summarise: the release of this library should not be construed as
an unconditional support of Bitcoin in its current form. There is
enough potential in the idea, however, to warrant some guarded
support.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Bolt 1.4 release</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-10/msg00189.html</cwn_url>
      <cwn_who>Xavier Clerc announced</cwn_who>
      <cwn_what>
This post announces the 1.4 release of the Bolt project, whose goal is
to provide a comprehensive yet flexible logging framework for the
OCaml language.

Home page: http://bolt.x9c.fr

Main changes since 1.3:
- API change: introduction of modes, allowing to choose when data is written
- API change: updated support for Paj√© format (version 1.2.3)
- support for '&amp;&amp;' and '||' in filters (new configuration format only)
- new 'minimal' layout using only message
- new 'bell' output writing the bell character on the standard output
- new 'say' output using MacOS X text-to-speech
- support for Growl under Windows
- bug#86: '-ocaml-prefix' doesn't really work
- bug#87: install shouldn't build anything
- bug#89: do not activate warnings by default
- bug#105: crashes with 'Not_found' when both BOLT_FILE and BOLT_CONFIG are not set
- bug#107: when using syntax extension with level NONE, preprocessed code
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>opam and versions</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-10/msg00198.html</cwn_url>
      <cwn_who>Jon Ludlam asked and Thomas Gazagnaire replied</cwn_who>
      <cwn_what>
&gt; For our purposes, we need to be able to ensure that our builds are
&gt; reproducible, and hence need to know exactly which versions are installed.
&gt; We had hoped to achieve this by removing or disabling packages whose
&gt; sources were got directly from a master branch in github. However, it turns
&gt; out that some packages that are 'stable' are dependent upon these packages,
&gt; which seems brittle. The question is how to fix it? Should the opam
&gt; repository maintainers require that 'stable' packages aren't dependent on
&gt; 'unstable' ones? Should opam itself be aware of the difference and enforce
&gt; this policy? If someone really wants to release a stable version of their
&gt; thing and it's dependent upon an upstream project with only a github repo,
&gt; should the developer engage the upstream devs and request at least a tag,
&gt; or should they make their own tarball/github fork?

Before the 1.0 release my plan is:
* to remove the unstable packages in the main opam-repository (ie. every
packages should have a stable tarball with a fixed checksum) [1]
* add a way to specify commits/branches for unstable packages if needed. [2]

The current workaround is, as Anil pointed out, to clone opam-repository, use
'opam-mk-repo' at its root to generate a local mirror of opam.ocamlpro.com,
and tell opam to add the local repository as a remote: 'opam remote -add
local /path/to/your/local/repository'

Then 'opam remote -list' should display the list of repositories and their
respective priority (higher is better). You can also tweak ~/.opam/repo/index
manually to tell opam to use your local repository only for some packages,
for instance the unstable ones (don't forget to run 'opam update' after
changing the index file).

For [1], I'm gladly accepting external contributions (for [2] as well
actually if someone really wants to hack into opam).

--
Thomas

[1] https://github.com/OCamlPro/opam-repository/issues/171
[2] https://github.com/OCamlPro/opam/issues/267 
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

Bolt: 1.4:
  &lt;https://forge.ocamlcore.org/forum/forum.php?forum_id=865&gt;

How to Write a Simple Web Application Using Ocamlnet:
  &lt;http://alaska-kamtchatka.blogspot.com/2012/10/how-to-write-simple-web-application.html&gt;

Caulking your distributed algorithm implementation:
  &lt;http://blog.incubaid.com/2012/10/25/caulking-your-distributed-algorithm-implementation/&gt;

Ocsigen HOWTO: call JS functions from OCaml:
  &lt;http://ocsigen.org/&gt;

Verifying a parser for a C compiler:
  &lt;http://gallium.inria.fr/~scherer/gagallium/verifying-a-parser-for-a-c-compiler/index.html&gt;

OCaml-bitcoin:
  &lt;https://forge.ocamlcore.org/projects/ocaml-bitcoin/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
