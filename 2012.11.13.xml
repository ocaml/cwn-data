<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2012.11.13</cwn_date>
    <cwn_prev>2012.11.06</cwn_prev>
    <cwn_next>2012.11.20</cwn_next>
    <cwn_date_text>November 06 to 13, 2012</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Google+ page</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-11/msg00064.html</cwn_url>
      <cwn_who>Deep in this thread, Paolo Donadeo announced</cwn_who>
      <cwn_what>
For what it's worth, Christophe's logo has been stolen (by me) and has
become the icon of the (official?) Google+ page of the language :-)

&lt;ad type="shameless"&gt;
https://plus.google.com/u/0/113075529629418110825
&lt;/ad&gt;
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OASIS, package managers and misc. poll</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-11/msg00071.html</cwn_url>
      <cwn_who>gildor478 announced</cwn_who>
      <cwn_what>
If you have trouble viewing or submitting this form, you can fill it out online:
https://docs.google.com/spreadsheet/viewform?fromEmail=true&amp;formkey=dE1jM1JSTGdHVV8wTWZxenV4cEkwVlE6MQ

One day, OASIS-DB will be able to automatically create package and
repositories. We need to know what OASIS user wish to focus our effort
on a few package manager.

Preferred package manager Choose the package manager oasis-db should
support

    GODI
    odb.ml
    OPAM
    native Debian packages
    native RPM packages (Fedora, Centos)
    non, OASIS should provide a package manager itself

Preferred build system OASIS support by design ocamlbuild, but there
are some other build system around. Which one do you think are worth
to be supported by OASIS.

    ocamlbuild
    OCamlMakefile
    OMake
    ocp-build
    custom scripts
    native Makefile
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>parameterized classes, modules &amp; polymorphic variants</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-11/msg00070.html</cwn_url>
      <cwn_who>Didier Cassirame asked and Jacques Garrigue replied</cwn_who>
      <cwn_what>
&gt; I have been trying recently to combine classes, modules and variants
&gt; in the following fashion:
&gt;
&gt; module A1 = struct
&gt;
&gt; class ['a] t = object
&gt; constraint 'a = [&gt;`a]
&gt; method m : 'a -&gt; string = function `a -&gt; "a" | `a1 -&gt; "a1" | _ -&gt; "_"
&gt; end
&gt;
&gt; end;;
&gt;
&gt; [â€¦]
&gt;
&gt; module type A = sig
&gt;
&gt; class ['a] t : object
&gt; constraint 'a = [&gt;`a]
&gt; method m : 'a -&gt; string
&gt; end
&gt;
&gt; end;;
&gt;
&gt; type m = (module A);;
&gt;
&gt; let l: m list = [ (module A1); (module A2); (module A3)];;
&gt;
&gt; --------------------------------
&gt;
&gt; Unfortunately the list typecheck fails. However, making a list of
&gt; class instances from A1.t, A2.t, A3.t succeed, with the type:
&gt;
&gt; [&gt; `a | `a1 | `a2 | `a3 ] ct list
&gt;
&gt; ct being defined as equal to A.t.
&gt;
&gt; I thought that perhaps I should parameterize the type m from the type
&gt; parameter 'a of A.t to solve my problem, but I am not sure of the
&gt; syntax, or if it's the problem. Does anyone have an idea?

Actually the parameterization would not help here, since you want to put them
all in the same list.
The idea of using first-class modules is to be explicit about types, so using
an explicit type definition for a solves the problem.

Jacques Garrigue

module A1 = struct
type a = private [&gt; `a | `a1]

class t = object
method m : a -&gt; string = function `a -&gt; "a" | `a1 -&gt; "a1" | _ -&gt; "_"
end
end;;

module A2 = struct
type a = private [&gt; `a | `a2]

class t = object
method m : a -&gt; string = function `a -&gt; "a" | `a2 -&gt; "a2" | _ -&gt; "_"
end
end;;

module A3 = struct
type a = private [&gt; `a | `a3]

class t = object
method m : a -&gt; string = function `a -&gt; "a" | `a3 -&gt; "a3" | _ -&gt; "_"
end
end;;

module type A = sig
type a = private [&gt; `a]
class t : object
method m : a -&gt; string
end
end;;

type m = (module A);;

let l: m list = [ (module A1); (module A2); (module A3)];;
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>RTT: Run-time types for OCaml</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-11/msg00076.html</cwn_url>
      <cwn_who>Tiphaine Turpin announced</cwn_who>
      <cwn_what>
I would like to announce the first release of RTT: an implementation of
run-time types for OCaml.

http://rtt.forge.ocamlcore.org/

Run-time types make it possible to write generic printers such as
to_string: 'a -&gt; string (for all 'a) which is useful e.g., for
debugging. The present solution is implemented as a fully automatic
program transformation which supports polymorphism naturally, and is
rather orthogonal to other existing work regarding advanced "typed"
representation of types using GADTs (the representation used here is
untyped).

Using RTT amounts to calling Rtt.to_string, Rtt.pprint... with a
modification of the compilation command to invoke the rtt preprocessor.

This tool is experimental, does not support all OCaml features (GADTs,
objects...), and is unlikely to handle any real-world program readily,
but it can at least bootstrap itself or process most of the standard
library, and it shows the feasibility of this program-transformation
approach.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Cyclic data structures: internal representation</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-11/msg00079.html</cwn_url>
      <cwn_who>Jean-Baptiste Jeannin asked and Dmitry Grebeniuk replied</cwn_who>
      <cwn_what>
&gt; - is there any easy way to check if a list is cyclic or not? The only way I
&gt; see is to go down the list, checking at every step if this particular
&gt; sublist has already been seen. But it's rather heavy.

&gt; - the documentation on the = sign
&gt; (&lt;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html&gt;)
&gt; mentions that "Equality between cyclic data structures may not terminate."
&gt; It seems to terminate if one or the other of the data structures is not
&gt; cyclic. Does it ever terminate when both data sstructures are cyclic, or
&gt; does it always loop?

Both these questions are solved with my library ocaml-cyclist:
https://forge.ocamlcore.org/projects/ocaml-cyclist/
I don't remember exact details, but generally I use
"tortoise and hare" algorithm.

Also note that lists with a cycle can also contain some prefix
that doesn't appear in the cycle (it happens when list with cycle
is appended to "linear" list). That's also covered by ocaml-cyclist:

value length : list 'a -&gt; (int * int);
(** Returns [(prefix_len, cycle_len)] of the argument.
(0, 0) for empty list, (n, 0) for linear list,
(0, n) for circular list, (n, m) for generic-shaped
cyclic list. (n, m &gt; 0)
*)

As for equality, you can use

value for_all2 : ?strict:bool -&gt;
('a -&gt; 'b -&gt; bool) -&gt; list 'a -&gt; list 'b -&gt; bool;

to write the code like

let list_eq a b = Cyclist.for_all2 ~strict:true ( = ) a b

which will run correctly. However, the following lists will be
considered equal: [{1; 2; 3}] and [1; 2; {3; 1; 2; 3; 1; 2}] (curly braces
denote the cycle of list; it's for illustration purposes only).
Using other library functions you can strenghten your equality
relation.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

Maps, sets, and hashtables in core:
  &lt;https://ocaml.janestreet.com/?q=node/112&gt;

How to implement dependent type theory II:
  &lt;http://math.andrej.com/2012/11/11/how-to-implement-dependent-type-theory-ii/&gt;

Master and Footballer:
  &lt;https://forge.ocamlcore.org/projects/mnf/&gt;

Resolution of label and constructor names: the devil in the details:
  &lt;http://gallium.inria.fr/~scherer/gagallium/resolving-field-names-2/index.html&gt;

How to implement dependent type theory I:
  &lt;http://math.andrej.com/2012/11/08/how-to-implement-dependent-type-theory-i/&gt;

Bisect 1.3:
  &lt;http://caml.inria.fr/cgi-bin/hump.cgi?contrib=650&gt;

Bolt 1.4:
  &lt;http://caml.inria.fr/cgi-bin/hump.cgi?contrib=699&gt;

Using well-disciplined type-propagation to disambiguate label and constructor names:
  &lt;http://gallium.inria.fr/~scherer/gagallium/resolving-field-names/index.html&gt;

RTT:
  &lt;https://forge.ocamlcore.org/projects/rtt/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
