<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2004.04.13</cwn_date>
  <cwn_prev>2004.04.06</cwn_prev>
  <cwn_next>2004.04.20</cwn_next>
  <cwn_date_text>06 to 13 April, 2004</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>Release of the NAB network simulator</cwn_title>
    <cwn_who>Henri Dubois-Ferriere announced</cwn_who>
    <cwn_what>
It&apos;s a pleasure to announce the first public release of NAB (Network in a
Box). NAB is a network simulator targeted at wireless ad hoc and sensor
networks. It is developped within the MICS project at EPFL.

Downloads and documentation are available at http://nab.epfl.ch

NAB is written in ocaml, a high-level yet highly efficient programming
language which supports both object-oriented and functional programming
styles.

NAB places a particular emphasisis on scalability and visualization.

Routing protocols currently implemented are AODV, EASE, and FRESH.
Various MAC layers are available including a null MAC and a CSMA MAC.
A 802.11b MAC is under development.

As always, questions, comments, and feedback are most welcome.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Dynamically evaluating OCaml code</cwn_title>
    <cwn_who>John Goerzen asked and Basile Starynkevitch answered</cwn_who>
    <cwn_what>
&gt; I am moving from Python to OCaml and one of the things I miss is
&gt; Python&apos;s eval() call.  It takes a string representing a bit of Python
&gt; source code, evaluates it, and returns the result.  I would like to be
&gt; able to do similar things with OCaml.

As observed by others, there is a big typing issue around this (what
would be the type of the eval function)?

If you really need something, you could hack the toplevel (at your own
risk). I don&apos;t think it is a good idea, unless you did very well
understood what you really want to do.

However, the functional values are usually enough to avoid the &quot;eval&quot;,
and an &quot;eval&quot; won&apos;t be really safe.

Also, you could use metaocaml, which provide constructs (inspired by
eval) to typefully meta-program, ie generate programs at runtime in a
rather safe manner.

See http://www.cs.rice.edu/~taha/MetaOCaml/ for more.

dynamics (like old work from Leroy &amp; Mauny - see X.Leroy&apos;s publication
pages on http://cristal.inria.fr/~xleroy ) and runtime type
information (like in Jun Furse GCaml) might also help - and are in
some remote way a bit related to eval&apos;s typing.

In addition to typing issues, there is also a runtime issue: dynamic
code generation really requires garbage collection of executable code,
which is not available in Ocaml (and would be terrible to implement -
it would mean rewrite most of the system)

________________


However, for the beginner, the good answer (at least as given by Ocaml
gurus here) to the usual &quot;I want eval&quot; request is simply &quot;no you don&apos;t
really need it&quot;
    </cwn_what>
    <cwn_who>Issac Trotts asked and Basile Starynkevitch answered</cwn_who>
    <cwn_what>
Issac Trotts wrote:
&gt; Basile Starynkevitch wrote:
&gt; &gt; However, for the beginner, the good answer (at least as given by Ocaml
&gt; &gt; gurus here) to the usual &quot;I want eval&quot; request is simply &quot;no you don&apos;t
&gt; &gt; really need it&quot;
&gt;
&gt; That being so, how would you use OCaml as an extension language for a C
&gt; program?

I&apos;m not sure to understand your point. Many applications coded in C
embed Ocaml inside. The simplest way is to give the application a
compiled ocaml bytecode file (which can be choosen at runtime) invoked
thru ocaml_main

See section 18.7.4 Main program in C of
http://caml.inria.fr/ocaml/htmlman/manual032.html

An alternative is to have the application being a custum ocaml
program, with lots of C primitives. This means that the ocaml runtime
system has the control and invoke appropriately the C primitives
provided by the application.

If you ask about embedding the ocaml toplevel into your application,
it is a different question. I agree that extending or embedding or
customizing the toplevel is not very well documented.
    </cwn_what>
    <cwn_who>John Goerzen said and Kenneth Knowles answered</cwn_who>
    <cwn_what>
&gt; I&apos;ve been toying with the
&gt; idea of writing a generic build system for OCaml to address this point
&gt; though.

If you haven&apos;t already, take a look at the OCamlMakefile here:
http://www.ai.univie.ac.at/~markus/home/ocaml_sources.html

and ocamlconf (by yours truly) here:
http://kenn.frap.net/ocamlconf/

One of them may your needs, but if not I&apos;m sure the authors would appreciate a
description of their insufficiencies.
    </cwn_what>
    <cwn_who>Nicolas Cannasse added</cwn_who>
    <cwn_what>
Don't forget about OCamake, which does not need any other tool than itself
(and ocaml compilers), and is working very well on both Windows and Unix'es:

http://tech.motion-twin.com/ocamake
    </cwn_what>
    <cwn_who>John Goerzen said and Benjamin Geer answered</cwn_who>
    <cwn_what>
&gt;I&apos;m looking at being able to let
&gt;people insert OCaml expressions directly into otherwise plain-text
&gt;config files.

One option you might not have considered is using Schoca, Christoph
Bauer&apos;s implementation of the Scheme language in Caml:

http://sourceforge.net/project/showfiles.php?group_id=2598

Schoca contains an example Caml program that reads a configuration file
written in Scheme.  Scheme has a lot going for it as an extension
language; for one thing, it&apos;s very easy to learn.
    </cwn_what>
    <cwn_who>John Goerzen asked and Clément Capel answered</cwn_who>
    <cwn_what>
&gt; I am moving from Python to OCaml and one of the things I miss is
&gt; Python&apos;s eval() call.  It takes a string representing a bit of Python
&gt; source code, evaluates it, and returns the result.  I would like to be
&gt; able to do similar things with OCaml.
&gt;
&gt; I have observed that /usr/bin/ocaml, the interactive top-level, is
&gt; itself written in OCaml, which suggests that this should be possible.
&gt; Although I have tried to study the source for this, it seems extremely
&gt; complex and I can&apos;t figure out a way to do the simple evaluation
&gt; described above.
&gt;
&gt; Can anyone help me out here?

Try this simple example:

Toploop.initialize_toplevel_env();;

let eval txt = let lb = (Lexing.from_string txt) in
  let phr = !Toploop.parse_toplevel_phrase lb in
  Toploop.execute_phrase true Format.std_formatter phr;;

eval &quot;let add1 x = x +1;;&quot;;;
eval &quot;add1 2;;&quot;;;

(compile with toplevellib.cma)

But be careful, it can break the typing system.
if you use the Toploop module in the
&quot;string parameter&quot; of the function eval or if you
evaluate it in the toplevel.
But it seems there&apos;s a guard with the new version (3.07+2).
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>New release of CamlImages</cwn_title>
    <cwn_who>Pierre Weis announced</cwn_who>
    <cwn_what>
The new version 2.12 of the CamlImages library, by Jun Furuse,
François Pessaux, and Pierre Weis, is now available.

Version 2.12 adds support for lablgtk2 and is also a bug fix release.

CamlImages is an image processing library, which provides to the
objective Caml programmer:

  ** basic functions for image processing and loading/saving various image
  file formats (hence providing a translation facility from format to format),

  ** an interface with the Caml graphics library allows to display
  images in the Graphics module screen and to mix them with Caml
  drawings,

  ** a freetype interface, integrated into the library:
  you can draw texts into images using any truetype fonts,

  ** a set of example programs, including gif animation, slide show, postscript
  converter to print images.

Sources and documentation are available from:

http://pauillac.inria.fr/camlimages/eng.htm

ftp://ftp.inria.fr/INRIA/caml-light/bazar-ocaml/camlimages-2.12.tgz

Contributions and comments are welcome.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Threading: Using and Building</cwn_title>
    <cwn_who>John Goerzen asked and Xavier Leroy answered</cwn_who>
    <cwn_what>
&gt; I am looking at using multi-threaded programs in OCaml, but have some
&gt; questions:
&gt;
&gt; *** Regarding the thread support itself
&gt;
&gt; Chapter 24 of the OCaml documentaion says that &quot;The threads library is
&gt; implemented by time-sharing on a single processor.  It will not take
&gt; advantage of multi-processor machines.&quot;  That&apos;s bad.
&gt;
&gt; But then later on I notice that there are two threading options: system
&gt; threads and VM-level threads.  The introductory paragraph does not seem
&gt; to apply to system threads which, in other languages at least, do not
&gt; behave that way.

Even with system threads, the OCaml runtime system and GC isn&apos;t
thread-safe, so only one Caml thread can execute at any given time
(this is achieved via a &quot;master mutex&quot; on the runtime system).  So,
the introductory sentence holds (mostly) for system threads as well:
you will not get parallel execution of Caml threads.  Although on a
multiprocessor with system threads, it is possible to have one Caml
thread running in parallel with one or several C threads.

&gt; *** Regarding building programs and libraries with threading support
&gt;
&gt; My next concern is building programs and libraries to support threading.
&gt; Chapter 24 also mentions that programs must be linked with -thread, and
&gt; all object files compiled with -thread, if the final result is to
&gt; support threads.  Alternatively, -vmthread could be substituted.

These requirements are a bit more stringent than what is actually needed.
The real requirements are:
- The -thread or -vmthread option must be given at link-time
  (so that different versions of the standard library and Unix library
   can be picked up)
- The -thread or -vmthread option must be given when compiling a
  source file that uses modules from the thread library (e.g. Thread, Mutex,
  Event, etc).

Actually, if you do not meet one of these requirements, you&apos;ll get
&quot;file not found&quot; errors when compiling or linking.  So, don&apos;t worry
about forgetting -thread or -vmthread, the compiler will remind you.

&gt; So my questions are:
&gt;
&gt;  1. Few libraries out there build themselves with -thread or -vmthread.
&gt;     Is that to be considered a bug?  Is there a workaround short
&gt;     of recompiling them?

As a consequence of the requirements above, you can use a library not
compiled with -thread in a program that uses threads.  So, it&apos;s not a bug
and you shouldn&apos;t worry about the library not being compiled with -thread.
(But beware about non-thread safe libraries, see below.)

&gt;  2. Can a library or object file built with -thread or -vmthread be used
&gt;     in a non-threaded program (one that does not use -thread or
&gt;     -vmthread?)  Can it be used in a threaded program that uses the
&gt;     *other* option?  (-thread vs. -vmthread)  Does the answer to this
&gt;     question vary depending on whether C code is used, or are there
&gt;     other things that can be done in the code to increase compatibility?

Yes.  Yes.  No.  No.

&gt;  3. I am assuming that -thread and -vmthread are not universally
&gt;     supported across OCaml platforms.  Would it be correct to assume,
&gt;     then, that one should check for the presence of -thread or -vmthread
&gt;     at build time?  Do there exist platforms for which neither are
&gt;     supported?

My experience is that -vmthread works on basically all variants of Unix,
-thread works on Windows (with the MS and MinGW ports) and most of the
recent Unix derivatives.

I&apos;m not sure about Windows with the Cygwin port.  It could be that
neither -thread nor -vmthread works on this platform due to
insufficient emulation of Unix syscalls and POSIX threads, but maybe not.

Oh, yes, Mac OS 9 and earlier used to support neither -thread nor
-vmthread, but they now rest in peace.

&gt;  4. If I am developing an application...  what can I do if it is
&gt;     multi-threaded but depends on libraries that are not built in a
&gt;     multi-threaded fashion on the user&apos;s system?  What if the libraries are
&gt;     built with the wrong type of threading (-thread vs. -vmthread)?  What
&gt;     if some libraries are built with one type and some with another?

See question 2.  There should be no problems.

&gt;  5. If I am developing a library... what must I do to make it maximally
&gt;     compatible with non-threaded applications and both types of
&gt;     threaded applications the user may be developing?

Give it a thread-safe (reentrant) API.  That is, avoid global storage.
Developers of threaded applications will bless you.

&gt;  6. What considerations must one take into account when developing C
&gt;     interfaces that will be used in multithreaded OCaml programs?

By default, the &quot;master mutex&quot; that ensures single-threaded execution
of Caml code also ensures single-threaded execution of the C code
called from Caml.  That makes it mostly safe to use non-thread-aware C
code in threaded Caml applications.

It is possible for C/Caml interface code to explicitly relinquish the
master mutex using the enter_blocking_section() and leave_blocking_section()
functions.  (Google for these names, you should find earlier posts of
mine describing how to use them.)  This enables another Caml thread to
execute concurrently.

&gt;  7. Do any of the standard build systems (OCamlMake, configure.in, etc)
&gt;     take into account the above answers in a useful way for an
&gt;     application or library developer?

No idea.

&gt;  8. How do I know which, if any, standard or third-party libraries
&gt;     installed on my system are threadsafe, and which threading model
&gt;     they support?

As in most other languages: their documentation should say so clearly,
but in general one has to read their source code to figure this out.
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
