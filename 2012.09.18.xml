<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2012.09.18</cwn_date>
    <cwn_prev>2012.09.11</cwn_prev>
    <cwn_next>2012.09.25</cwn_next>
    <cwn_date_text>September 11 to 18, 2012</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>A question about Format boxes</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-09/msg00044.html</cwn_url>
      <cwn_who>Michael Welsh Duggan asked and Martin Jambon replied</cwn_who>
      <cwn_what>
&gt; The example at
&gt; &lt;http://caml.inria.fr/resources/doc/guides/format.en.html#hov-boxes&gt;
&gt; shows a major difference in the output of packing versus structural hov
&gt; boxes. However, in my experiments I cannot achieve the output this
&gt; example assigns to "packing" boxes. (OCaml 3.12)
&gt; 
&gt; My examples from the REPL are below. Would someone be able to tell me
&gt; what I am doing incorrectly?
&gt; 
&gt; # Format.printf "@[&lt;hv 2&gt;(---@\n@[&lt;hv 2&gt;(---@\n@[&lt;hv
&gt; 2&gt;(---@,)@]@,)@]@,)@]@\n";;
&gt; (---
&gt; (---
&gt; (---)))
&gt; - : unit = ()
&gt; # Format.printf "@[&lt;hov 2&gt;(---@\n@[&lt;hov 2&gt;(---@\n@[&lt;hov
&gt; 2&gt;(---@,)@]@,)@]@,)@]@\n";;
&gt; (---
&gt; (---
&gt; (---)))
&gt; - : unit = ()
&gt; # Format.printf "@[&lt;2&gt;(---@\n@[&lt;2&gt;(---@\n@[&lt;2&gt;(---@,)@]@,)@]@,)@]@\n";;
&gt; (---
&gt; (---
&gt; (---)))
&gt; - : unit = ()
&gt; # Format.printf "@[&lt;b 2&gt;(---@\n@[&lt;b 2&gt;(---@\n@[&lt;b 2&gt;(---@,)@]@,)@]@,)@]@\n";;
&gt; (---
&gt; (---
&gt; (---)))
&gt; - : unit = ()

I have no idea what you're doing wrong, but I can suggest you try
easy-format (&lt;http://mjambon.com/easy-format.html&gt;) which lets you
choose and customize various indentation styles.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml-SPF 1.0.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-09/msg00053.html</cwn_url>
      <cwn_who>Andre Nathan announced</cwn_who>
      <cwn_what>
I'm happy to announce the availability of OCaml-SPF 1.0.0, a library
that provides OCaml bindings to libspf2[1]. The module allows SPF
(Sender Policy Framework) verifiers to be written in OCaml.

Github repostory: https://github.com/andrenth/ocaml-spf
Forge download: http://forge.ocamlcore.org/frs/?group_id=317
ODB package page: http://oasis.ocamlcore.org/dev/view/spf/1.0.0

Best regards,
Andre

[1] http://www.libspf2.org/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml-SRS 1.0.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-09/msg00054.html</cwn_url>
      <cwn_who>Andre Nathan announced</cwn_who>
      <cwn_what>
I'm happy to announce the availability of OCaml-SRS 1.0.0, a library
that provides OCaml bindings to libsrs2[1]. The module provide functions
to perform email address rewriting with SRS (Sender Rewriting Scheme).

Github repostory: https://github.com/andrenth/ocaml-srs
Forge download: http://forge.ocamlcore.org/frs/?group_id=318
ODB package page: http://oasis.ocamlcore.org/dev/view/srs/1.0.0

Best regards,
Andre

[1] http://www.libsrs2.org/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml-Milter 1.0.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-09/msg00055.html</cwn_url>
      <cwn_who>Andre Nathan announced</cwn_who>
      <cwn_what>
I'm happy to announce the availability of OCaml-Milter 1.0.0, a library
that provides OCaml bindings to libmilter[1]. This module allows one to
use OCaml to write applications that integrate with SMTP servers like
Postfix and Sendmail via the milter interface.

Github repostory: https://github.com/andrenth/ocaml-milter
Forge download: http://forge.ocamlcore.org/frs/?group_id=319
ODB package page: http://oasis.ocamlcore.org/dev/view/milter/1.0.0

Best regards,
Andre

[1] https://www.milter.org/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Release 1.0.0 - A multi-process daemon framework for OCaml</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-09/msg00056.html</cwn_url>
      <cwn_who>Andre Nathan announced</cwn_who>
      <cwn_what>
I'm happy to announce version 1.0.0 of the Release daemon
framework for OCaml:

Github repository: https://github.com/andrenth/release
Forge download: http://forge.ocamlcore.org/frs/?group_id=290
ODB package page: http://oasis.ocamlcore.org/dev/view/release/1.0.0

From the README:

Release is a multi-process Lwt-enabled daemon framework for
OCaml, providing facilities for type-safe inter-process
communication and privilege-dropping.

Its goal is to make it easy to write servers that are
released from the calling terminal and to release root
privileges when those are not necessary.

Release provides the following features:

- Easy creation of 1-to-1 master-slave or 1-to-n master-slaves
process architectures;
- Type-safe and thread-safe interprocess communication;
- Supervisor features (the master process detects unexpected
deaths of its slaves and restarts them);
- Integer operations on buffers with support for 16, 32, 64
and 128 bit integers with support for little- and big-endian
representations, plus a functorial interface allowing the
definition of operations on other integer sizes in the
release.bytes submodule;
- Generic configuration file parser with built-in validation
in the release.config submodule.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml 4.00.0 for iOS is released</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-09/msg00060.html</cwn_url>
      <cwn_who>Jeffrey Scofield announced</cwn_who>
      <cwn_what>
I've released a version of OCaml 4.00.0 that creates iOS apps. First
class modules and generalized abstract data types for your iPhone and
iPad!

I wrote a little bit about the project here:

http://psellos.com/2012/09/2012.09.ocamlxarm-ocaml4-released.html

If you just want to download the cross compiler or build it from source,
you can go directly to the main OCaml-on-iOS page:

http://psellos.com/ocaml/compile-to-iphone.html

I also have a page of OCaml-on-iOS resources with many example
apps and an interface to OpenGL ES:

http://psellos.com/ocaml/

This version of OCamlXARM (my name for the project) generates code only
for the armv7 architecture (in the Thumb encoding), which works on all
iOS devices introduced since September 2009. Despite some excellent
advice to the contrary, I'm planning to put out a release that also
generates armv6 code (in ARM encoding), which will support all historical
iOS devices.

Thanks to Benedikt Meurer for writing the OCaml 4 ARM code generator,
and for help and advice. Thanks to my colleagues at SEAiq[1] for helping
with the testing. Thanks to the OCaml team at INRIA for fixing some
bugs we found in the base OCaml 4.00.0 release (PR 5731[2], PR 5757[3]).

(The SEAiq guys have also recently demonstrated that OCaml threading
works under iOS. I'll have more about this soon in my sporadic
blog, linked above.)

I'm very happy to hear from anybody interested.

Jeffrey

[1]: http://www.seaiq.com/
[2]: http://caml.inria.fr/mantis/view.php?id=5731
[3]: http://caml.inria.fr/mantis/view.php?id=5757
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Slides of ML workshop</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-09/msg00062.html</cwn_url>
      <cwn_who>Alain Frisch announced</cwn_who>
      <cwn_what>
All the slides for the ML2012 workshop are now online at:

http://www.lexifi.com/ml2012/

Videos should be available today or tomorrow on Youtube.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

Programming Tools UX: When Statically Compiled Feels Dynamic:
  &lt;http://blog.opalang.org/2012/09/programming-tools-ux-when-statically.html&gt;

OLD Programming tools UX: When statically compiled feels dynamic:
  &lt;http://blog.opalang.org/2012/09/old-programming-tools-ux-when.html&gt;

OCaml-SRS:
  &lt;https://forge.ocamlcore.org/projects/ocaml-srs/&gt;

OCaml-SPF:
  &lt;https://forge.ocamlcore.org/projects/ocaml-spf/&gt;

ICFP 2012, Sunday: the HOPE Workshop:
  &lt;http://gallium.inria.fr/~scherer/gagallium/icfp-sunday/index.html&gt;

google-drive-ocamlfuse v0.1 released:
  &lt;https://forge.ocamlcore.org/forum/forum.php?forum_id=857&gt;

Building a "xenstore stub domain" with Mirage:
  &lt;http://www.openmirage.org/blog/xenstore-stub-domain&gt;

Functional Big-Data Genomics:
  &lt;http://ashishagarwal.org/2012/09/11/functional-big-data-genomics/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=functional-big-data-genomics&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
