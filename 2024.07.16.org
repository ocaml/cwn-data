#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2024.07.09.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2024.07.23.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of July 09 to 16, 2024.

#+TOC: headlines 1


* OCaml FFI Sharp Edges and How to Avoid Them
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/blog-ocaml-ffi-sharp-edges-and-how-to-avoid-them/14935/1

** Matt Walker announced


Wrote another blog post about my adventures in Godotcaml.  Check it out if you're interested in some details of memory management with a Ctypes FFI.  Would love to hear input to some of the questions asked in the post, too, if you'd like!

https://fizzixnerd.com/blog/2024-07-09-ocaml-ffi-sharp-edges-and-how-to-avoid-them/
      



* Ortac 0.3.0 Dynamic formal verification made easy
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/ann-ortac-0-3-0-dynamic-formal-verification-made-easy/14936/1

** Nicolas Osborne announced


I'm very pleased to announce this exciting new release of Ortac packages!

Ortac is a set of tools for dynamic verification of Gospel formal specifications of OCaml code.

You can find the project on [[https://github.com/ocaml-gospel/ortac][this repo]] and install the released packages via ~opam~.

Released packages are:
- ~ortac-core~
- ~ortac-runtime~
- ~ortac-runtime-qcheck-stm~
- ~ortac-qcheck-stm~
- ~ortac-dune~

But running:
~$ opam install ortac-qcheck-stm ortac-dune~
should be enough to install what is necessary.

Apart from some fixes, this release brings three main improvements to the Ortac/QCheck-STM mode.

The first one is about user experience. This is a two-parts improvement as we:

1. move to a module-based configuration to reduce the number of arguments to give ~ortac qcheck-stm~ while increasing the flexibility of configuration (see [[https://ocaml-gospel.github.io/ortac/ortac-qcheck-stm/index.html][documentation]] for more information)
2. release the Ortac/Dune plugin which generates the dune rules necessary to generate and run the tests (see [[https://github.com/ocaml-gospel/ortac/tree/main/plugins/dune-rules][README]] for usage).

With these two improvements, we believe that you have a very good excuse for not writing tests: it is very easy to generate them!

The second improvement is related to the supported subset of Gospel, mainly about how you can express the logical model for your OCaml types: you don't have to limit yourself anymore to the Gospel standard library.

Finally, some work has been put on extending the coverage of the generated tests: functions without any SUT argument and functions mentioning tuples are now included in the tested values.

Happy testing!
      



* dream-html and pure-html 3.5.2
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/ann-dream-html-pure-html-3-5-2/14808/3

** Yawar Amin announced


[ANN] dream-html & pure-html 3.6.0

Hello, I am happy to announce the following changes:

- Added some htmx attributes that had been omitted. Now as far as I can tell we have complete coverage of all core attributes, additional attributes, and those used by core extensions.
- Add a ~?header:bool~ optional parameter to ~to_xml~ and ~pp_xml~ functions to conveniently render the XML header as part of the output.
      



* The OCaml community is signed up for Outreachy!
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/the-ocaml-community-is-signed-up-for-outreachy/13892/19

** Siddhi Agrawal announced


I am Siddhi, an Outreachy Summer 2024 intern with the OCaml community. I am working on the [[https://github.com/NathanReb/ocaml-api-watch][ocaml-api-watch]] project which is a tool that detects changes in the public API of a library and displays them in a human readable, git diff-like format so that the users and maintainers can stay on top of them. I am being mentored by @shonfeder, @NathanReb and Odinaka Joy (I am only able to mention people here) and it has been a great experience so far. 

I have linked my [[https://siddhiagg.wordpress.com/][blogs]] here if you would like to know more about the project.
      



* OCaml LSP 1.18.0
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/ann-ocaml-lsp-1-18-0/14952/1

** PizieDust announced


We are happy to announce the release of [[https://github.com/ocaml/ocaml-lsp/releases/tag/1.18.0][ocaml-lsp 1.18.0]] !

*New Features:*

This release brings exciting new features such as improved hover behavior with less noisy hovers on some Parsetree nodes such as keywords, comments etc. along with support for hovering over PPX annotations and preview the generated code. This release also have support for some additional custom queries, folding ~ifthenelse~ expressions, a new configuration option to control dune diagnostics, improved document symbols, and fixes to a handful of issues.

Do not hesitate to report any suspicious behavior in the [[https://github.com/ocaml/ocaml-lsp/issues][issue tracker]]
      



* 2nd editor tooling dev-meeting: 25th of July ðŸ§™
:PROPERTIES:
:CUSTOM_ID: 6
:END:
Archive: https://discuss.ocaml.org/t/ann-2nd-editor-tooling-dev-meeting-25th-of-july/14953/1

** vds announced


After the success of our [[https://discuss.ocaml.org/t/ann-first-public-editor-tooling-dev-meeting/14824][first public dev-meeting]], we are organizing the next one on the 25th of July at 5pm CEST.  Whether you are a long time maintainer, an occasional contributor, a new comer, or simply a curious passer-by, please feel free to attend!

âœ¨ We have two talks scheduled for this session:
- @octachron will present his work on having structured compiler output
- @nojb will present "typed grep" an tool used at LexiFi to search by type in the codebase.

ðŸ“‹ Meeting agenda: 
- A tour-de-table to allow the participants that wish to do so to present themselves and mention issues / prs they are interested in. 
- Talks and Q&A
- Discuss issues and pull requests that were tagged in advance or mentioned during the tour-de-table. 
- Discuss possible alternative meeting hours.

We're looking forward to meeting you! 

- Meeting link: https://meet.google.com/zhn-giws-gnu
- Calendar event: https://calendar.google.com/calendar/event?action=TEMPLATE&amp;tmeid=MzRoaTAxcXJiNmVmYzloamxjbDY3MjY1YTcgdWx5c3NlQHRhcmlkZXMuY29t&amp;tmsrc=ulysse%40tarides.com
- Previous meeting notes are available in [[https://github.com/ocaml/merlin/wiki/Public-dev%E2%80%90meetings][Merlin's repository wiki]].
      



* A (Possibly) Safer Interface to the Ctypes FFI
:PROPERTIES:
:CUSTOM_ID: 7
:END:
Archive: https://discuss.ocaml.org/t/blog-a-possibly-safer-interface-to-the-ctypes-ffi/14954/1

** Matt Walker announced


Hi there, another blog post.

This time I discuss ideas for a new interface that helps localize the possibilities of errors when working with a Ctypes-style FFI.  Comment below if you like/hate it please!

https://fizzixnerd.com/blog/2024-07-11-a-possibly-safer-interface-to-the-ctypes-ffi/
      



* OCaml Workshop 2024 at ICFP -- announcement and call for proposals
:PROPERTIES:
:CUSTOM_ID: 8
:END:
Archive: https://discuss.ocaml.org/t/ocaml-workshop-2024-at-icfp-announcement-and-call-for-proposals/14371/13

** Sonja Heinze announced


The accepted talks are now public! You can find them on the [[https://icfp24.sigplan.org/home/ocaml-2024#program][Workshop website]].

We're very happy with the expected quality and diversity of talks. To give a bit of a taste via a few examples of talks that will be presented:

- In the context of the *OCaml language*,  _On the design and implementation of Modular Explicits_ will present a major and long-wanted new language feature whose PR on the compiler landed last week.
- In the context of the *OCaml ecosystem*, _Opam 2.2 and beyond_ will present technical details as well as struggles about the just-landed 2.2 release of your package manager.
- In the context of *day-to-day OCaml applications*, _B Â· o Â· B, a universal & secure file-transfer software in OCaml_ will present a real-life MirageOs application.
- In the context of *OCaml developer experience*, _Project-wide occurrences for OCaml, a progress report_ will present a shiny new editor feature that makes OCaml code navigation a joy.
- There will also be four talks in the landscapes of *OCaml multi-core* (i.e. OCaml 5).

We've given the authors a few weeks to update their abstracts and papers if they want to. At the beginning of August, the scheduled program with updated abstracts and attached papers will be on the website.

For those who haven't seen it yet: The registration for the workshops and the whole conference [[https://icfp24.sigplan.org/attending/registration][is open now]]. There's currently an early bird discount, which *ends on August 3rd*.

As we've mentioned already, the in-person experience of the workshop is a very nice one, allowing everyone to interact with colleagues and the rest of the community, to chat about the talks and OCaml in general, hit up the speakers etc. However, if you're not able to make it, you'll still be able to enjoy the talks: The talks will be live-streamed, and some time later be made permanently available online.

Really, genuinely, thanks a lot to all members of the Program Committee for the very valuable reviews and interactions as well as to all the authors of all submissions!
      



* living 0.1.0
:PROPERTIES:
:CUSTOM_ID: 9
:END:
Archive: https://discuss.ocaml.org/t/ann-living-0-1-0/14964/1

** Matt Walker announced


I'm pleased to announce the first pre-opam version of the ~living~ library, currently available only on GitHub for testing.  I have some basic tests and a README explaining what it's for, but basically, it prevents mistakes like 

#+begin_src ocaml
open Ctypes

(** Returns a pointer into the argument character string that points to the first
    instance of the argument character. *)
let strchr : char ptr -> char -> char ptr = 
  Foreign.foreign "strchr" (ptr char @-> char @-> returning (ptr char))

let () =
  let p = CArray.start (CArray.of_string "abc") in
  let q = strchr p 'a' in
  let () = Gc.compact () in
  let c = !@ q in
  if Char.(equal c 'a') then print_endline "yay!" else print_endline "boo!"
#+end_src

above from causing you pain.  If you weren't aware, the code above will almost always print "boo!".  Using `living`, you can replace it with this code:

#+begin_src ocaml
open Living
open Living_ctypes

let strchr  : char ptr -> char -> char ptr Living_core.t = 
  let strchr_unsafe = Foreign.foreign "strchr" (ptr char @-> char @-> returning (ptr char)) in
  fun s c -> Living_core.(strchr_unsafe s c => s)

let _ =
  let open Living_core.Let_syntax in
  let* p = CArray.start (CArray.of_string "abc") in
  let* q = strchr p 'a' in
  let () = Gc.compact () in
  let* c = !@ q in
  if Char.(equal c 'a') then print_endline "yay!" else print_endline "boo!"
  Living_core.return ()
#+end_src

and it will always print "yay!"

Edit: should probably link to it!

https://github.com/Fizzixnerd/ocaml-living
      



* Other OCaml News
:PROPERTIES:
:CUSTOM_ID: 10
:END:
** From the ocaml.org blog


Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://signals-threads.simplecast.com/episodes/from-the-lab-to-the-trading-floor-with-erin-murphy-hD6GHMhc][From the Lab to the Trading Floor with Erin Murphy]]
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe to the [[https://sympa.inria.fr/sympa/info/caml-list][caml-list]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
