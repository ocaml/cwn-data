<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2012.06.26</cwn_date>
    <cwn_prev>2012.06.19</cwn_prev>
    <cwn_next>2012.07.03</cwn_next>
    <cwn_date_text>June 19 to 26, 2012</cwn_date_text>
  </cwn_head>
  <cwn_body>
		<cwn_entry>
      <cwn_title>nlopt-ocaml</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-06/msg00147.html</cwn_url>
      <cwn_who>Michał Kurcewicz announced</cwn_who>
      <cwn_what>
This is to announce OCaml bindings to the NLopt nonlinear optimization
library. The wrapper code implements an almost complete NLopt API (the
only exception are vector-valued constraints). I am using it in my
projects without any problems, but it may still have some bugs.

You can get the source from:

https://bitbucket.org/mkur/nlopt-ocaml
      </cwn_what>
    </cwn_entry>
		<cwn_entry>
      <cwn_title>OCaml on Amazon EC2 Instance</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-06/msg00137.html</cwn_url>
      <cwn_who>Jeffrey Scofield asked</cwn_who>
      <cwn_what>
Can anybody tell me how to install OCaml on an Amazon EC2 instance? I'm
running Amazon Linux (because it's free). None of the preconfigured
repositories seem to include OCaml itself (though a few libraries are
present if you enable EPEL 6 "Extra Packages for Enterprise Linux").

There's some indication that I need the "Optional Packages," but so far
all I have is this name. I don't know what it refers to or how to access
it from my instance.
      </cwn_what>
			<cwn_who>Stéphane Glondu suggested and Goswin von Brederlow added</cwn_who>
			<cwn_what>
&gt; You can try with Debian:
&gt;
&gt; http://www.monperrus.net/martin/installing-debian-on-amazon-ec2

You might also want to look into mirage (openmirage.org) for ocaml in a
cloud. (But don't ask me how to start one on amazon.)
			</cwn_what>
			<cwn_who>Siraaj Khandkar suggested</cwn_who>
			<cwn_what>
I would use Godi:
http://godi.camlcity.org/godi/
			</cwn_what>
			<cwn_who>Jeffrey Scofield finally said</cwn_who>
			<cwn_what>
Thanks very much for the suggestions for getting OCaml installed
on Amazon EC2. I'm going to save them for future use.

We just wanted to do some fairly quick testing, so I was looking
for something simple. Since Amazon Linux is compatible with CentOS 6,
what I ended up doing is installing the CentOS 6.2 OCaml package
on my EC2 instance. I wrote up a description of how to do it
here:

http://psellos.com/2012/06/2012.06.ocaml-amazon-ec2.html

We've run our first round of tests, and it all seems to be working.

Maybe this will be useful to other OCamlers.
			</cwn_what>
    </cwn_entry>
		<cwn_entry>
      <cwn_title>OCamlSpotter for OCaml 4.00.0 beta</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-06/msg00157.html</cwn_url>
      <cwn_who>Jun Furuse announced</cwn_who>
      <cwn_what>
I have put a port of OCamlSpotter to OCaml 4.00.0 beta at
https://bitbucket.org/camlspotter/ocamlspot . Try the default branch.

OCamlSpotter is a source code definition/type query helper for Emacs
(and possibly for other editors). See details at
http://jun.furuse.info/hacks/ocamlspotter .

Thanks to the new -bin-annot option of OCaml, OCamlSpotter no longer
requires any compiler patch. It is now a small standalone application
very easy to compile and install. It is a very quick port to OCaml 4
and the program is slower than the previous releases, but at least it
passes all the existing tests.

Probably you may be also interested in TypeRex for the same purpose.
      </cwn_what>
    </cwn_entry>
		<cwn_entry>
      <cwn_title>Compiling with camlp4 extensions</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-06/msg00160.html</cwn_url>
      <cwn_who>Aaron Bohannon asked</cwn_who>
      <cwn_what>
I have been trying to use the new camlp4 to write an OCaml syntax extension.
All the examples I have seen so far suggest that I use the extension by
passing ocamlc the "-pp" option.  But it seems that all the location info for
error messages gets lost when I do this unless I catch and report the parse
error myself within the extension.  Is there some way to get ocamlc to report
the parse error at the correct location automatically?
      </cwn_what>
			<cwn_who>Gabriel Scherer replied</cwn_who>
			<cwn_what>
All nodes in a Camlp4 AST are annotated with location information; the
locations you get from the parser are correct, and it is your
responsibility, as an extension writer, to ensure that any new nodes
you generate also have (approximately) correct location information.

If you build AST nodes "by hand", you have to provide this location
explicitly. If you use the concrete syntax quotations, the location
used is the value _loc present in the environment, whatever it may be.
So to have correct locations, you have to make sure that, at every AST
you produce through a quotation, there is a "_loc" variable in scope
with the correct value. If you match AST pieces with quotation
patterns (match e with &lt;:expr&lt; $a$ + $b$ &gt;&gt; -&gt; ...), you may bind the
location variable through the syntax "&lt;:expr@foo&lt;", for example:
(match e with &lt;:expr@_loc&lt; $a$ + $b$ &gt;&gt; -&gt; ...). Finally, if you're
inside an EXTEND block defining a parsing rule, the idenfitier _loc is
implicitely bound to a location corresponding to what was parsed by
this rule.

See for example the toy extension pa_refutable, that has example of
those various things:
http://bluestorm.info/camlp4/pa_refutable.ml.html

In some very rare cases (or if you are perfectionist), you may want to
give to a new node a location that is not quite the location of any of
the parsed node you're working on. You may use various functions of
the Loc submodule of your syntax definition to forge new locations; in
particular, Loc.merge merges two (supposed contiguous) locations.
http://bluestorm.info/camlp4/camlp4-doc/Sig.Loc.html
			</cwn_what>
			<cwn_who>Aaron Bohannon then asked and Gabriel Scherer replied</cwn_who>
			<cwn_what>
&gt; Thanks for the reply.  The example is helpful.  However, I should have
&gt; been more clear: I don't exactly want to write a syntax extension, per
&gt; se.  Rather, I am trying to use camlp4 to parse a non-OCaml grammar
&gt; and to generate an OCaml AST.  So the "Register.OCamlSyntaxExtension"
&gt; functor doesn't seem like it will work for me.  Instead, I tried using
&gt; "Printers.Ocaml.print_implem" in my "extension" code and everything
&gt; works fine, except for error locations.  Of course, I realize this is
&gt; because the AST is being printed and then re-parsed, but I don't know
&gt; how to prevent it from being reparsed.  I looked through all the
&gt; Camlp4 interfaces and thought that perhaps I need to use the function
&gt; "Register.register_str_item_parser".  But I couldn't make that work.
&gt; Either that's not the function I need or else I don't know how to use
&gt; it -- I can't tell which.

See the "full parser tutorial" in the Camlp4 wiki, it has information
for what, if I have correctly understood, is your use case, including
location handling.
http://brion.inria.fr/gallium/index.php/Full_parser_tutorial
			</cwn_what>
			<cwn_who>Aaron Bohannon then asked and Gabriel Scherer replied</cwn_who>
			<cwn_what>
&gt; Ah, yes.  That is helpful.  I had thought of trying to "extend" OCaml
&gt; by replacing the grammar with a different one, although I didn't know
&gt; exactly how to do it.
&gt;
&gt; Of course, it seemed obvious to me that I wouldn't be able to use my
&gt; own lexer if I did that.  I'm not sure if I will want to do that or
&gt; not yet, but I was thinking I would just learn to do it that way so
&gt; I'd have that flexibility if I need it.  Unfortunately, the page stops
&gt; short of explaining how to pursue that approach. :(

If you want to implement your own lexer, you have to provide the
MakeGram functor your own module satisfying the Lexer signature.
http://bluestorm.info/camlp4/camlp4-doc/Sig.Lexer.html

If you can reuse Camlp4's predefined lexer, however, you should not
hesitate to do that. There is little use in being original on the
lexing part, and users that already know OCaml will appreciate the
consistency in the lexical conventions. Camlp4's token type for OCaml
is rich enough to integrate comments and whitespace information, so
you can even define an indentation-dependent language on top of the
pre-existing lexer, using a filtering function on the token stream :
http://bluestorm.info/camlp4/camlp4-doc/Sig.Token.Filter.html
			</cwn_what>
    </cwn_entry>
	  <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

A formally-verified alias analysis:
  &lt;http://gallium.inria.fr/~scherer/gagallium/a-formally-verified-alias-analysis/index.html&gt;

2D Interpolation, Part 1: The Digital Differential Analyzer:
  &lt;http://alaska-kamtchatka.blogspot.com/2012/06/2d-interpolation-part-1-digital.html&gt;

LRTT parser:
  &lt;https://forge.ocamlcore.org/projects/lrttparser/&gt;

File Sharing on the Spot:
  &lt;http://alaska-kamtchatka.blogspot.com/2012/01/file-sharing-on-spot.html&gt;

Announcing Opa 1.0:
  &lt;http://blog.opalang.org/2012/06/announcing-opa-10.html&gt;

Stog 0.1:
  &lt;http://caml.inria.fr/cgi-bin/hump.cgi?contrib=818&gt;

Xtmpl 0.1:
  &lt;http://caml.inria.fr/cgi-bin/hump.cgi?contrib=817&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>