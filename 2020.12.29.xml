<?xml version="1.0" encoding="utf-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2020.12.29</cwn_date>
    <cwn_prev>2020.12.22</cwn_prev>
    <cwn_next>2021.01.05</cwn_next>
    <cwn_date_text>December 22 to 29, 2020</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>ppx_deriving_yaml 0.1.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-ppx-deriving-yaml-0-1-0/7007/1</cwn_url>
      <cwn_who>Patrick Ferris announced</cwn_who>
      <cwn_what>
I'm proud to announce the first release (and my first release) of
[ppx_deriving_yaml](https://github.com/patricoferris/ppx_deriving_yaml). If you are familiar with the
excellent [ppx_deriving_yojson](https://github.com/ocaml-ppx/ppx_deriving_yojson) then this library
should come as no surprise. In fact it helped me a lot in writing this ppx, so thank you to its
creators/maintainers.

*** Installation

#+begin_example
$ opam update
$ opam install ppx_deriving_yaml
#+end_example

*** Usage

Ppx_deriving_yaml converts your OCaml types to the "basic" [OCaml Yaml value
type](https://github.com/avsm/ocaml-yaml/blob/6de8fa6926d391334b945754619a64857d352e5d/lib/types.ml#L44)
(the one that is currently compatible with ezjsonm). So for example you can have:

#+begin_src ocaml
type t = { title: string; authors: string list } [@@deriving yaml]

let () =
  let v = { title = "Yaml PPX!"; authors = [ "Patrick Ferris" ] } in
  let yaml = to_yaml v in
  Yaml.pp Format.std_formatter yaml;
  match of_yaml yaml with
    | Ok t -> Format.print_string t.title
    | Error (`Msg m) -> failwith m
#+end_src

The ppx generates two functions:

#+begin_src ocaml
val of_yaml : Yaml.value -> t Yaml.res
val to_yaml : t -> Yaml.value
#+end_src

And when built with this dune file:

#+begin_example
(executable
 (name main)
 (libraries yaml)
 (preprocess
  (pps ppx_deriving_yaml)))
#+end_example

The following output is generated:

#+begin_src yaml
title: Yaml PPX!
authors:
- Patrick Ferris
Yaml PPX!
#+end_src

The [README](https://github.com/patricoferris/ppx_deriving_yaml#implementation-details) contains some
more information and the library is still a little rough around the edges, especially with error
reporting, but I'm currently using it in a few places such as an "ocaml-ified" [github
actions](https://github.com/patricoferris/opam-github-workflow) library (ppx_deriving_yaml's [test
workflow](https://github.com/patricoferris/ppx_deriving_yaml/blob/main/.github/workflows/test.yml) was
automatically generated with it :sparkles:). This is a nice example of how it can be used in a fairly
straightforward way to generate OCaml versions of the many projects that use Yaml for configuration
files.

Happy yaml-ing :)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>A Heroku buildpack for OCaml</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-a-heroku-buildpack-for-ocaml/7012/1</cwn_url>
      <cwn_who>roddy announced</cwn_who>
      <cwn_what>
I wrote [a Heroku buildpack](https://github.com/roddyyaga/heroku-buildpack-ocaml) for OCaml web apps
that use opam/dune.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>opam-dune-lint - keep opam and dune dependencies in sync</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-opam-dune-lint-keep-opam-and-dune-dependencies-in-sync/7014/1</cwn_url>
      <cwn_who>Thomas Leonard announced</cwn_who>
      <cwn_what>
We're pleased to announce the first release of
[opam-dune-lint](https://github.com/ocurrent/opam-dune-lint). This little tool checks that every
ocamlfind dependency listed in your ~dune~ files has the corresponding opam package listed as a
dependency in your ~*.opam~ file(s).

e.g.

#+begin_example
$ cd charrua
$ opam dune-lint
charrua-client.opam: changes needed:
  "tcpip" {with-test &amp; &gt;= 6.0.0}           [from test/client, test/client/lwt]
charrua-server.opam: changes needed:
  "ppx_cstruct" {with-test &amp; &gt;= 6.0.0}     [from (ppx), test]
  "tcpip" {with-test &amp; &gt;= 6.0.0}           [from test]
charrua-unix.opam: changes needed:
  "cstruct-lwt" {>= 6.0.0}                 [from unix]
  "ipaddr" {>= 5.0.1}                      [from unix]
  "tcpip" {>= 6.0.0}                       [from unix]
charrua.opam: OK
Note: version numbers are just suggestions based on the currently installed version.
Write changes? [y] y
Wrote "./charrua-client.opam"
Wrote "./charrua-server.opam"
Wrote "./charrua-unix.opam"
#+end_example

If your project generates the opam files from ~dune-project~, then it will update your ~dune-project~
instead.

It can also be useful to run this in CI. It will exit with a non-zero exit status if anything needs to
be changed. [ocaml-ci](https://ci.ocamllabs.io/) runs this automatically as part of the "lint-opam"
check.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Scirep, a utility for literate programming</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/scirep-a-utility-for-literate-programming/7016/1</cwn_url>
      <cwn_who>Philippe announced</cwn_who>
      <cwn_what>
I wrote a utility called [scirep](https://github.com/pveber/scirep) to render a markdown file with
OCaml code blocks as an HTML document, which provides some support for graphics. Here are some examples
of generated documents: [one based on vg](http://pveber.github.io/scirep/fold.html), and [another using
owl-plplot](http://pveber.github.io/scirep/damped.html).

It can also be used downstream of [mdx](https://github.com/realworldocaml/mdx) as a markdown-to-html
converter that detects pictures in the toplevel's standard output and renders them in the final
document.

It is really a hack, and it is poorly documented, but I'm advertising it in case it might be useful to
others.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Camel Calendar for 2021</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/camel-calendar-for-2021/7020/1</cwn_url>
      <cwn_who>Florent Monnier announced</cwn_who>
      <cwn_what>
I would like to share with you a [camel calendar for 2021 in
pdf](http://decapode314.free.fr/cal/cal-camel/cal-camel-2021-en.pdf) with the nice theme from ocaml dot
org.

It was generated from an ocaml script that you can find in this repo: [svg calendar
generator](https://github.com/fccm/ocaml-cal-svg).

Several scripts are available, you can find some results on this [web
page](http://decapode314.free.fr/cal/).

At the beginning of 2020 I was searching for a free software to generate calendars in SVG that I could
customise for my own use, but I was unable to install the Perl script that exists (it has a lot of
dependencies and the error message when I try to install it didn't help us to find what's wrong with
it).

This explains the design of these scripts, that are made to work without any dependencies and without
any compilation. There's code duplication, but every script only need the ocaml interpreter to be run,
so most people comfortable with the command line should be able to use it.

(I also tried to sell some [on Etsy](https://www.etsy.com/fr/shop/Decapode) but didn't sold a single
one.)

By default 12 languages are included in every script, but you can generate the calendars for more than
200 languages if you use [these dates locales](https://github.com/fccm/DateLocale-ocaml) that come from
the CLDR repository.

You can also switch monday first or sunday first.

These generators are provided under Zlib license.

I hope some will enjoy!
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
