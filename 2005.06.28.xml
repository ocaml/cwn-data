<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2005.06.28</cwn_date>
  <cwn_prev>2005.06.21</cwn_prev>
  <cwn_next>2005.07.05</cwn_next>
  <cwn_date_text>21 to 28 June, 2005</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>Technical Presentation Software written in OCaml</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29396</cwn_url>
    <cwn_who>Jon Harrop announced</cwn_who>
    <cwn_what>
For anyone who is interested in commercial exploits using OCaml, we are 
releasing our first stand-alone sofware package, Presenta.

Presenta is an OpenGL-based slideshow presentation program with support for 
animated points, typeset mathematics, 2D and 3D graphics:

  http://www.ffconsultancy.com/products/presenta/

The whole program is just under 10,000 LOC, entirely OCaml. The core of the 
program is a general purpose 2D vector graphics library (Smoke) which we&apos;ve 
been developing for the past six years and which was translated from C++ into 
OCaml 2 years ago, with great success.

We currently support only x86 and AMD64 Linux but we are also considering 
supporting Mac OS X as well.

Let me know what you think! :)
    </cwn_what>
    <cwn_who>Gerd Stolpmann then announced</cwn_who>
    <cwn_what>
&gt; For anyone who is interested in commercial exploits using OCaml, we are 
&gt; releasing our first stand-alone sofware package, Presenta.

Looks very cool! Btw, you don&apos;t need nVidia drivers, the free DRI-based
ones work very well (e.g. on my Intel i850 laptop).

I have now also a commercial product written in O&apos;Caml: UMLMON, a
monitor for User Mode Linux. As I am mainly targeting the German market,
there is currently only documentation in German:
http://www.gerd-stolpmann.de/umlmon . An international version may follow
if there is enough interest.

UMLMON is a classic multiplexing daemon that starts and stops User Mode
Linux instances, manages a communications path with them, and does a
number of other nice things. Thanks O&apos;Caml it has been developed within
six weeks, and is now practically bug-free. Show me another system
software developed that quickly.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Bindings for ODE (Open Dynamics Engine), and a small &quot;game&quot;</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29412</cwn_url>
    <cwn_who>Richard Jones announced</cwn_who>
    <cwn_what>
http://www.annexia.org/tmp/ocamlode-0.5.tar.gz

You will need: ocamlsdl, lablgl, extlib and of course the ODE library
itself.  There&apos;s a (not very good) toy game in there too!
    </cwn_what>
    <cwn_who>He later added</cwn_who>
    <cwn_what>
There&apos;s a web page for this now:

http://merjis.com/developers/ocamlode
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>OC-SOAP 0.3.1 - a proper SOAP interface for OCaml</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29290</cwn_url>
    <cwn_who>Richard Jones announced</cwn_who>
    <cwn_what>
There&apos;s a web page for OC-SOAP now:

http://merjis.com/developers/oc-soap

The 0.3.1 version includes a patch to support &lt;all&gt; types in XML
Schema, supplied by Jesse D. Guardiani.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Making something similar to format[4]</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29432</cwn_url>
    <cwn_who>Jonathan Roewen asked and Richard Jones answered</cwn_who>
    <cwn_what>
&gt; I&apos;d like to create something that works like the format type for
&gt; format strings with Printf/Scanf. What I want to do is take a
&gt; one-dimensional bigarray, and a format string of all the sizes of the
&gt; fields corresponding to a struct, and return the typed results.
&gt; 
&gt; So sizes of 1 = bool, &lt;= 8 char/int (format specifier to choose char),
&gt; &lt;= 31 int/int32, = 32 int32, &gt; 32, int64.

The OCaml printf/scanf functions are basically hacks done in the
compiler.  Whereas it is possible to write a new function which takes
precisely the same string format as printf/scanf, it&apos;s not possible to
modify the format without changing the compiler.  However, see below ...

&gt; The idea is to make reading/writing C-like structs painless &amp;
&gt; automated. I&apos;m just not sure where to begin in making this type-safe
&gt; format string. Does it require modding the ocaml parser &amp; libraries?
&gt; Cause I&apos;m really confused how ocaml can statically parse the string
&gt; and enforce type safety without some hack in the compiler at some
&gt; stage.

It&apos;s actually a really good idea.

I can&apos;t see any immediate reason why it couldn&apos;t be done trivially
with camlp4.  For a good start, read Martin Jambon&apos;s camlp4 tutorial
(http://martin.jambon.free.fr/extend-ocaml-syntax.html) and then have
a look at the code for tywith
(http://www.seedwiki.com/wiki/shifting_focus/tywith) and my old
simplesoap library (http://merjis.com/developers/simplesoap) which
both manipulate types from camlp4.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Wyrd 1.0.0</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29441</cwn_url>
    <cwn_who>Paul Pelzl announced</cwn_who>
    <cwn_what>
The xterm addicts in the audience may be interested in my calendar
application written in OCaml:

&quot;Wyrd is a curses front-end for Remind, a powerful calendar and alarm
application. The display features a scrollable day calendar suitable for
visualizing your schedule at a glance. Wyrd integrates with an external
editor of your choice to make manual editing of reminder files more
efficient. Other features include significant configurability and
Mutt-like interface design.&quot;

http://www.eecs.umich.edu/~pelzlpj/wyrd

As a side note, email to the Hump has been bouncing for a couple of
months now, as noted here:
http://article.gmane.org/gmane.comp.lang.caml.inria/29014
Would be nice if someone looked into that...
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
