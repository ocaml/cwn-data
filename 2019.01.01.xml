<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2019.01.01</cwn_date>
    <cwn_prev>2018.12.25</cwn_prev>
    <cwn_next>2019.01.08</cwn_next>
    <cwn_date_text>December 25, 2018 to January 01, 2019</cwn_date_text>
    <cwn_extra_head>Happy New Year!</cwn_extra_head>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>OCaml implementations of Raft consensus protocol</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ocaml-implementations-of-raft-consensus-protocol/3108/1</cwn_url>
      <cwn_who>IndiscriminateCoding asked</cwn_who>
      <cwn_what>
Is there any production-ready implementation of [Raft consensus protocol](http://raft.github.io) in OCaml?
There is [ocaml-raft](https://github.com/heidi-ann/ocaml-raft), which does have a technical paper, but it looks abandoned and it's not even in opam repository.
      </cwn_what>
      <cwn_who>Nick Betteridge replied</cwn_who>
      <cwn_what>
https://github.com/mransan/raft\\
https://github.com/mfp/oraft
      </cwn_what>
      <cwn_who>IndiscriminateCoding then said</cwn_who>
      <cwn_what>
Thanks! First project seems abandoned too (and doesn't have license specified), but second looks promising. Will have a closer look at it.
      </cwn_what>
      <cwn_who>Nick Betteridge replied</cwn_who>
      <cwn_what>
First project is MIT (opam file) - vbmirthr keeping it working - https://github.com/vbmithr/raft
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Online, realtime, multiplayer Set game written in ocaml</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/online-realtime-multiplayer-set-game-written-in-ocaml/3107/1</cwn_url>
      <cwn_who>Andrew Tongen announced</cwn_who>
      <cwn_what>
As a learning project, I decided to implement the game of [Set](https://www.setgame.com/) entirely in ocaml/reason:

Game: https://setml.andrewtongen.net/\\
Code: https://github.com/atongen/setml

There are separate modules for frontend and backend code, with shared modules in between. Overall, I really enjoyed this exercise. The ocaml type system is truly amazing, and I will definitely look for more ways to use it in the future.

The game itself has not be thoroughly tested on various devices, but it seems to work pretty well on newish android and apple devices.

Check it out and let me know what you think!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Is it safe to hold onto string data in C bindings?</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/is-it-safe-to-hold-onto-string-data-in-c-bindings/2931/8</cwn_url>
      <cwn_who>Deep into this thread, Brendan Long announced</cwn_who>
      <cwn_what>
I've been super busy for a while, but here's the blog post:

https://www.brendanlong.com/easy-mistakes-when-writing-ocaml-c-bindings.html

(And the code I was working on when I wrote this will show up in our Mssql library as soon as I have time)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[http://ocaml.org/community/planet/][OCaml Planet]].

- [[https://functionaljobs.com/jobs/9133-senior-software-engineer-at-camlcase][Senior Software Engineer at camlCase (Full-time)]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
