<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2019.02.12</cwn_date>
    <cwn_prev>2019.02.05</cwn_prev>
    <cwn_next>2019.02.19</cwn_next>
    <cwn_date_text>February 05 to 12, 2019</cwn_date_text>
    <cwn_extra_head></cwn_extra_head>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>PSA: cohttp 2.0 removes old ocamlfind subpackage aliases</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/psa-cohttp-2-0-removes-old-ocamlfind-subpackage-aliases/3290/1</cwn_url>
      <cwn_who>Anil Madhavapeddy announced</cwn_who>
      <cwn_what>
In a similar vein to the recent [cstruct change](https://discuss.ocaml.org/t/psa-cstruct-3-4-0-removes-old-ocamlfind-subpackage-aliases/3275), the HTTP client and server library [cohttp 2.0 has just been released](https://github.com/mirage/ocaml-cohttp/blob/master/CHANGES.md) with some deprecation changes that you should be aware of.

In cohttp.0.99, a number of subpackages were turned into explicit opam packages to simplify dependency management. To aid migration, some compatability shims were left in place so that the old findlib names would continue to work. They have now been removed as of this release. If you were still using them, then please rename them as follows in your ~dune~ or ~_tags~ files to use the name findlib names:

- ~cohttp.lwt-core~ -&gt; ~cohttp-lwt~
- ~cohttp.lwt~ -&gt; ~cohttp-lwt-unix~
- ~cohttp.js~ -&gt; ~cohttp-lwt-jsoo~
- ~cohttp.async~ -&gt; ~cohttp-async~
- ~cohttp.top~ -&gt; ~cohttp-top~

Once you have renamed it in your build system, just add the corresponding new package name to your ~opam~ dependency list as well.

The reason for removing the compatibility shim is that the old ocamlfind names do not work when embedding the dune libraries in a [dune vendor workspace](http://www.dra27.uk/blog/platform/2018/08/15/dune-vendoring.html).  So I'm removing the technical debt now to make those so-called "duniverse" deployments significantly easier to manage.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Interesting OCaml Articles</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/interesting-ocaml-articles/1867/39</cwn_url>
      <cwn_who>UnixJunkie announced</cwn_who>
      <cwn_what>
Ok, here is my contribution to try promoting OCaml in my field:
https://jcheminf.biomedcentral.com/articles/10.1186/s13321-019-0332-0
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Major Release of Base64 / Article</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-major-release-of-base64-article/3297/1</cwn_url>
      <cwn_who>Calascibetta Romain wrote</cwn_who>
      <cwn_what>
Editor note: this post is too long for this newsletter. It is available online at
https://tarides.com/blog/2019-02-08-release-of-base64.html
      </cwn_what>
      <cwn_who>James Woodyatt then said</cwn_who>
      <cwn_what>
This is an excellent article! Thanks for writing it up.

p.s. I don't want to hijack this thread, but I'd like to mention that all three of the problems discussed in this article were already known to me when I wrote the [Base64 implementation](https://bitbucket.org/jhw/orsetto/src/unstable/src/cf/cf_base64.mli) in my forthcoming [Orsetto](https://bitbucket.org/jhw/orsetto/) framework of structured data interchange languages. (Expect an announcement before Monday about its preview release. Also, for the MirageOS people: my implementations are generally not speed demons. I've left a lot of room for myself to make performance improvements in the future.)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Orsetto: structured data interchange languages (preview release)</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-orsetto-structured-data-interchange-languages-preview-release/3304/1</cwn_url>
      <cwn_who>James Woodyatt announced</cwn_who>
      <cwn_what>
I am pleased to announce that I've reached the *preview* milestone I set for my [Orsetto](https://bitbucket.org/jhw/orsetto) project. As I wrote in the *README* file about it:

#+begin_quote
Orsetto is a standalone library comprising a core toolkit...

- Core functional data structures and processes.
- Unicode transport, normalization, parsing and formatting.
- General purpose packet format encoder-decoder processes.

...used to implement streaming parsers and formatters for a useful variety of
structured data interchange languages...
#+end_quote

In the preview release, the major featured languages are only *JSON* and *CBOR*, but my hope is to expand this list to include a variety of other useful languages. The programming interfaces are sufficiently different from other implementations that I feel Orsetto may be a welcome alternative to have available.

Orsetto is currently available from my personal OPAM repository, which you can use in the conventional way:

#+begin_src shell
opam repository add jhwoodyatt git+https://bitbucket.org/jhw/opam-personal.git
#+end_src

In two weeks, unless discussion here convinces me to delay or defer, then I will request to make Orsetto available on the public OPAM repository along with a commitment to make patch releases as necessary to correct errors.

At this time, I'm inviting the OCaml community to give it a look, post comments and questions about it here, file issues on [the Issue tracker](https://bitbucket.org/jhw/orsetto/issues) if you notice anything wrong. I'm especially interested in knowing about name conflicts that I need to avoid. Once I push to the public OPAM repository, I want to be able to move quickly toward its first *stable* release.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml 4.08.0+beta1</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2019-02/msg00014.html</cwn_url>
      <cwn_who>Damien Doligez announced</cwn_who>
      <cwn_what>
The release of OCaml 4.08.0 is approaching. We have created
a beta version to help you adapt your software to the new features
ahead of the release.

The source code is available at these addresses:

  https://github.com/ocaml/ocaml/archive/4.08.0+beta1.tar.gz\\
  https://caml.inria.fr/pub/distrib/ocaml-4.08/ocaml-4.08.0+beta1.tar.gz

The compiler can also be installed as an OPAM switch with one of the
following commands.

#+begin_src shell
opam switch create ocaml-variants.4.08.0+beta1 --repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_src

or

#+begin_src shell
opam switch create ocaml-variants.4.08.0+beta1+&lt;VARIANT&gt; --repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_src
where you replace &lt;VARIANT&gt; with one of these:
- afl
- default_unsafe_string
- flambda
- fp
- fp+flambda

We want to know about all bugs. Please report them here:
  http://caml.inria.fr/mantis/bug_report_page.php
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml meetup in SF on 2/12</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ocaml-meetup-in-sf-on-2-12/3324/1</cwn_url>
      <cwn_who>Brandon Kase announced</cwn_who>
      <cwn_what>
Hey all! We're hosting an OCaml/ReasonML meetup in SF tomorrow night (2/12) at 6:30PM. We'll have food, drinks, and some really interesting talks:

- Shallow Dive into the Philosophy of Reprocessing by Avery Morin. How Reprocessing tries to stay approachable to enable anyone to do creative work in ReasonML.
- A conversation about ReasonML in production (and side projects) between a junior and senior engineer
Yuki Li and Sean Grove will debate the pros/cons of using ReasonML in large production systems, whether ReasonML has a place in side projects and prototypes, and how junior developers will be helped and hurt by the language and its ecosystem.

We'll also have plenty of time to chat, eat, and hang out. People of all backgrounds / skill levels are welcome, please just RSVP below so we know how much food to get!

https://www.meetup.com/sv-ocaml/events/258482142/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Is anyone doing Design by Contract in OCaml?</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/is-anyone-doing-design-by-contract-in-ocaml/3301/1</cwn_url>
      <cwn_who>Yawar Amin asked</cwn_who>
      <cwn_what>
I noticed there are a couple of research projects that implement new language features for a contract language, but not seeing anything library-based for mainline OCaml. Is anyone doing it now or in did in the past? Wondering what people's thoughts are. Personally, today I feel it should be possible to do with extension points. Maybe something like,

#+begin_src ocaml
let divide x y = x / y
[@@dbc.pre "y &lt;&gt; 0"]
[@@dbc.post "result * y = x"]
#+end_src
      </cwn_what>
      <cwn_who>Denis Ignatovich said</cwn_who>
      <cwn_what>
Check out https://try.imandra.ai. It has a bunch of examples in Jupyter notebooks. There's also the docs page https://docs.imandra.ai

Your example above would look something like this (with integer arithmetic, obv):
#+begin_src ocaml
# let divide x y = x / y;;
val divide : Z.t -&gt; Z.t -&gt; Z.t = &lt;fun&gt;
# verify (fun (x, y) -&gt; (y &lt;&gt; 0) ==&gt; (((divide x y) * y) = x));;
- : Z.t * Z.t -&gt; bool = &lt;fun&gt;
Counterexample (after 0 steps, 0.020s):
 let _x = (1, 2)
[âœ—] Conjecture refuted.
module CX : sig val _x : Z.t * Z.t end
#+end_src
      </cwn_what>
      <cwn_who>Ivan Gotovchits also said</cwn_who>
      <cwn_what>
A possible approach, on which I was experimenting some time ago, would be to use ephemerons to attach predicates to data, which could be later checked (a mere presence check) on the caller side.
Something like this:

#+begin_src ocaml
let typecheck code =
   ensures ["well-typed"] @@
   perform_typecheck code

let normalize code =
   requires ["well-typed"];
   provides ["well-typed"; "normal-form"] @@
   perform_normalization code

let optimize code =
   requires ["normal-form"; "well-typed"];
   provides ["normal-form"; "well-typed"; "optimized"] @@
   do_optimizations code
#+end_src
where ~requires tags obj~ is a function of type ~string list -&gt; 'a -&gt; unit~ that takes a list of tags, denoting features, and checks that they are attached to the given object, and ~provides tags obj~ is a function of type ~string list -&gt; object -&gt; object~ takes a list of features and attaches it to the object (an alternative syntax is having type ~object -&gt; unit~, since an ephemeron is a mutable hashtable).

The implementation is using ephemerons, which are hashtables indexed with arbitrary boxed objects with a special treatment of liveness (i.e., values from those hashtables disappear when the index disappear, so no memory leakage should happen).

The main benefit of this approach is its simplicity, it is vanilla OCaml, it is easy to implement, and easy to disable. The main drawback is that it works only with heap values (aka boxed values) and that it is not reflected in the function signature. And of course, since it is that simple, the contract can't actually be a formula, especially that references the host language.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Dune and Multicore</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/dune-and-multicore/3315/1</cwn_url>
      <cwn_who>james woodyatt announced</cwn_who>
      <cwn_what>
For grins, I updated my _multicore_ OPAM switch and started looking into what is currently keeping my Orsetto project from compiling there. At the moment, the answer is that Dune doesn't compile. Which I suppose is not really noteworthy, because multicore is still way way off, but I was vastly amused by the log message that appeared on my console:

#+begin_quote
I must not segfault. Uncertainty is the mind-killer. Exceptions are the
little-death that brings total obliteration. I will fully express my cases.
Execution will pass over me and through me. And when it has gone past, I will
unwind the stack along its path. Where the cases are handled there will be
nothing. Only I will remain.
#+end_quote

I don't know who wrote this, but it has me rolling on the floorâ€” especially given the irony of this happening on a compiler that's trying to introduce algebraic effects. Just wanted to raise a glass for that here. Bravo, whoever you are. You have won the Internet today.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[http://ocaml.org/community/planet/][OCaml Planet]].

- [[http://www.ocamlpro.com/2019/02/11/whats-new-for-alt-ergo-in-2018-here-is-a-recap/][Whatâ€™s new for Alt-Ergo in 2018 ? Here is a recap !]]
- [[https://gaiustech.wordpress.com/2019/02/10/learning-a-new-language/][Learning a New Language]]
- [[https://tarides.com/blog/2019-02-08-release-of-base64.html][Release of Base64]]
- [[https://functionaljobs.com/jobs/9142-ocaml-server-side-developer-at-ahrefs][OCaml server-side developer at Ahrefs (Full-time)]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
