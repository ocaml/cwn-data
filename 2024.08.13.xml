<cwn>
  <cwn_head>
    <cwn_date>2024.08.13</cwn_date>
    <cwn_prev>2024.08.06</cwn_prev>
    <cwn_next>2024.08.20</cwn_next>
    <cwn_date_text>August 06 to 13, 2024</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>MlFront - A Java-like package system for OCaml</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-mlfront-a-java-like-package-system-for-ocaml/15072/4</cwn_url>
      <cwn_who>Continuing this thread, jbeckford announced</cwn_who>
      <cwn_what>
I've added a third post: [https://diskuv.com/mlfront/overview-3/](https://diskuv.com/mlfront/overview-3/)

In it I describe a small but useful /reference build system/ for MlFront which can take packages like:

#+begin_example
.
├── AcmeWidgets_Std/
│   └── A.ml
└── BobBuilder_Std/
    └── B.ml
#+end_example

and produce standalone build scripts that can be committed to source control:

#+begin_src shell
$ mlfront-boot -native -o buildscript

$ ./buildscript.sh # .\buildscript.cmd is also created

$ target/BobBuilder_Std.B
I am an A!
I am a B!
#+end_src

On a related note, I've begun to implement a small part of https://gallium.inria.fr/~scherer/namespaces/spec.pdf. It is not strictly required but [Namespaces.mli](https://gitlab.com/dkml/build-tools/MlFront/-/blob/f1f6e6d073500febb5c9e429212c8bdaaa177c35/src/MlFront_Codept/Namespaces.mli) will be very helpful for upgrading existing projects to ~MlFront~-style packages without changing code. That will be for a future (not soon) post.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>First release of hector</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-first-release-of-hector/15099/1</cwn_url>
      <cwn_who>François Pottier announced</cwn_who>
      <cwn_what>
It is my pleasure to announce the first release of ~hector~, an OCaml library that offers /vectors/ (also known as dynamic arrays, or resizeable arrays).

To install it, type ~opam update &amp;&amp; opam install hector~.

~hector~ offers *polymorphic vectors*, where the type of the elements is a parameter, *monomorphic vectors*, where the type of the elements is fixed, and *integer vectors*, a special case of monomorphic vectors.

~hector~'s vectors are *not thread-safe* and *do not include a protection against memory leaks*. Compared with the ~Dynarray~ module in OCaml's standard library, ~hector~'s polymorphic and monomorphic vectors are *slightly faster*, and ~hector~'s integer vectors are *significantly faster*. ~hector~ offers fast (but dangerous) *unsafe access operations*, namely ~unsafe_get~, ~unsafe_set~, and ~unsafe_borrow~. For a more detailed overview, see the [documentation](https://cambium.inria.fr/~fpottier/hector/doc/hector/).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Dune dev meeting</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-dune-dev-meeting/14994/9</cwn_url>
      <cwn_who>Continuing this thread, Marek Kubica announced</cwn_who>
      <cwn_what>
Thanks for everyone who joined today! The [meeting minutes](https://github.com/ocaml/dune/wiki/dev-meeting-2024-08-07) are online and the next meeting will be in two weeks, 21st of August at 10:00 (AM) CEST.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocaml.org blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://frama-c.comhttps//link.springer.com/book/10.1007/978-3-031-55608-1][The Guide to Software Verification with Frama-C is available]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
