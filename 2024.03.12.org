#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2024.03.05.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2024.03.19.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of March 05 to 12, 2024.

#+TOC: headlines 1


* Js_of_ocaml 5.7
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/ann-js-of-ocaml-5-7/14191/2

** Hhugo announced


Js_of_ocaml 5.7.1 has been released today.

It fixes a mis-compilation bug introduced in the last release.

As always, see the [[https://github.com/ocsigen/js_of_ocaml/blob/master/CHANGES.md][Changelog ]] for other changes.
      



* Bindings to QuickJS
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/ann-bindings-to-quickjs/14263/1

** David Sancho announced


I‚Äôm happy to announce a new library ([[https://opam.ocaml.org/packages/quickjs/][quickjs.ml]]) that I have been working on, sometimes
on-stream with the help of a few people (specially @welltypedbitch) and other times, just coding lonely.

It‚Äôs an early project to bind to quickjs *https://bellard.org/quickjs* a small and embeddable JavaScript engine. It supports the
ES2023 specification including modules, asynchronous generators, proxies and BigInt. 

It passes nearly 100% of the ECMAScript Test Suite tests when selecting the ES2023 features. A summary is available at [[https://test262.fyi/][Test262
Report]] and has very low startup time (compared to other JS Engines).

The need to bind to a JavaScript engine on OCaml appeared while working with server-reason-react components. While moving 
ReasonReact components from the browser into the server.

Those components relied on JavaScript APIs such as DOM APIs, but also some ‚Äúpure‚Äù JS. The part of the browser isn‚Äôt available on the
server (obv) so we discard it with a ppx (called browser_ppx https://twitter.com/davesnx/status/1765059888550686892) but still there
were some (‚Äùpure JS‚Äù) code that could run on the server such as Array/List/String operations, RegExp, i18n, Date, etc.

On the browser, those apis are available under ~melange.js~ (which are bindings to JS:
[[https://melange.re/v2.0.0/communicate-with-javascript/][https://melange.re/v2.0.0/communicate-with-javascript]]) and I made an effort
of having similar implemenations on ~server-reason-react.js~ which implemented in OCaml the same APIs, but there were a few issues
that I couldn‚Äôt resolve in OCaml (or I didn‚Äôt want to resolve), for example the JavaScript RegExp engine had backtracing and named
groups which Pcre (the first approach I used) doesn‚Äôt have.

Those APIs are available (with a full test suite) on many JS engines, so It was a matter of choosing one and bind to it‚Ä¶ which brings
to release [[http://quickjs.ml][quickjs.ml]] into opam with RegExp support and ongoing *BigInt, Date, parse numbers, and encode/decode
URI.*

Let me know if you find it useful, and feel free to collab!

PS: I'm very aware that the meme writes itself, OCaml to JS and now we bring JS into OCaml.
      



* Ocaml-windows 5.1.1
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/ann-ocaml-windows-5-1-1/14268/1

** Romain Beauxis announced


A little over a week ago, ~ocaml-windows.5.1.1~ was added to
[[https://github.com/ocaml-cross/opam-cross-windows][ocaml-cross/opam-cross-windows]] üéä

The ~opam-cross-windows~ repository provides ~opam~ packages that build libraries and binaries targetting the windows platform from
linux and macos hosts using the [[https://www.mingw-w64.org/][mingw-w64]] cross-compiler and [[https://mxe.cc/][mxe.cc]] for extenal
dependencies.

The addition of a ~ocaml~ cross-compiler version ~5.1.1~ makes it possible to compile code using the awesome new set of feature of
the ocaml 5.x releases!

A lot of packages still need to be updated to support the ocaml 5 compiler. Fortunately, adding new ~dune~-based packages has become
remarkably easy thanks to ~dune~'s great cross-compilation support. Also, the CI could use some love.

If you find it useful, feel free to come help!
      



* First release candidate for OCaml 4.14.2
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/first-release-candidate-for-ocaml-4-14-2/14269/1

** octachron announced


The release of OCaml version 4.14.2 is imminent.

OCaml 4.14.2 is a new update to the stable 4.14 branch of OCaml. This new release backports many safe bug fixes from the OCaml 5
branch and fixes a handful of compatibility issues of OCaml 4.14.1 with newer operating system versions.

A full list of bug fixes is available below.

In order to ensure that the future release works as expected, we are planning to test a release candidate during the upcoming week
(the rc candidate might take some time to propagate on the opam repository).

If you find any bugs, please report them here on [[https://github.com/ocaml/ocaml/issues][GitHub]].

*** Installation Instructions

The base compiler can be installed as an opam switch with the following commands on opam 2.1:
#+begin_example
opam update
opam switch create 4.14.2~rc1
#+end_example

The source code for the release candidate is available on

- [[https://github.com/ocaml/ocaml/archive/4.14.2-rc1.tar.gz][GitHub]]
- [[https://caml.inria.fr/pub/distrib/ocaml-4.14/ocaml-4.14.2-rc1.tar.gz][Inria archives]]

**** Fine-Tuned Compiler Configuration

If you want to tweak the configuration of the compiler, you can switch to the option variant with:
#+begin_example
opam update
opam switch create <switch_name> ocaml-variants.4.14.2~rc1+options <option_list>
#+end_example

where ~<option_list>~ is a space-separated list of ~ocaml-option-*~ packages. For instance, for a ~flambda~ and ~no-flat-float-array~
switch:
#+begin_example
opam switch create 4.14.2~rc1+flambda+nffa ocaml-variants.4.14.2~rc1+options ocaml-option-flambda ocaml-option-no-flat-float-array
#+end_example

All available options can be listed with ~opam search ocaml-option~.

*** Changes Since OCaml 4.14.1
**** Runtime System:

  - [[https://github.com/ocaml/ocaml/issues/11764][#11764]], [[https://github.com/ocaml/ocaml/issues/12577][#12577]]: Add prototypes to old-style C function definitions and declarations. (Antonin D√©cimo, review by Xavier Leroy and Nick Barnes)
  - [[https://github.com/ocaml/ocaml/issues/11763][#11763]], [[https://github.com/ocaml/ocaml/issues/11759][#11759]], [[https://github.com/ocaml/ocaml/issues/11861][#11861]], [[https://github.com/ocaml/ocaml/issues/12509][#12509]], [[https://github.com/ocaml/ocaml/issues/12577][#12577]]: Use strict prototypes on primitives. (Antonin D√©cimo, review by Xavier Leroy, David Allsopp, S√©bastien Hinderer and Nick Barnes)
  - (*breaking change*) [[https://github.com/ocaml/ocaml/issues/10723][#10723]]: Do not use ~-flat-namespace~ linking for macOS.
    (Carlo Cabrera, review by Damien Doligez)
  - [[https://github.com/ocaml/ocaml/issues/11332][#11332]], [[https://github.com/ocaml/ocaml/issues/12702][#12702]]: Make sure ~Bool_val(v)~ has type ~bool~ in C++ (Xavier Leroy, report by ygrek, review by Gabriel Scherer)

**** Build System:

  - [[https://github.com/ocaml/ocaml/issues/11590][#11590]]: Allow installing to a destination path containing spaces
    (√âlie Brami, review by S√©bastien Hinderer and David Allsopp)
  - [[https://github.com/ocaml/ocaml/issues/12372][#12372]]: Pass option ~-no-execute-only~ to the linker for OpenBSD >= 7.3
    so that code sections remain readable, as needed for closure marshaling.
    (Xavier Leroy and Anil Madhavapeddy, review by Anil Madhavapeddy and
    S√©bastien Hinderer)
  - [[https://github.com/ocaml/ocaml/issues/12903][#12903]]: Disable control flow integrity on OpenBSD >= 7.4 to avoid
    illegal instruction errors on certain CPUs.
    (Michael Hendricks, review by Miod Vallat)

**** Bug fixes:

  - [[https://github.com/ocaml/ocaml/issues/12061][#12061]], [[https://github.com/ocaml/ocaml/issues/12063][#12063]]: Don't add inconsistent equalities when computing high-level error messages for functor applications and inclusions. (Florian Angeletti, review by Gabriel Scherer)
  - [[https://github.com/ocaml/ocaml/issues/12878][#12878]]: Fix incorrect treatment of injectivity for private recursive types.
    (Jeremy Yallop, review by Gabriel Scherer and Jacques Garrigue)
  - [[https://github.com/ocaml/ocaml/issues/12971][#12971]], [[https://github.com/ocaml/ocaml/issues/12974][#12974]]: Fix an uncaught Ctype. Escape exception on some invalid programs forming recursive types. (Gabriel Scherer, review by Florian Angeletti, report by Neven Villani)
  - [[https://github.com/ocaml/ocaml/issues/12264][#12264]], [[https://github.com/ocaml/ocaml/issues/12289][#12289]]: Fix ~compact_allocate~ to avoid a pathological case that causes very slow compaction. (Damien Doligez, report by Arseniy Alekseyev, review by Sadiq Jaffer)
  - [[https://github.com/ocaml/ocaml/issues/12513][#12513]], [[https://github.com/ocaml/ocaml/issues/12518][#12518]]: Automatically enable emulated ~fma~ for Visual Studio 2019+ to allow configuration with either pre-Haswell/pre-Piledriver CPUs or running in VirtualBox. Restores parity with the other Windows ports, which don't require explicit ~--enable-imprecise-c99-float-ops~. (David Allsopp, report by Jonah Beckford and Kate Deplaix, review by S√©bastien Hinderer)
  - [[https://github.com/ocaml/ocaml/issues/11633][#11633]], [[https://github.com/ocaml/ocaml/issues/11636][#11636]]: Bug fix in ~caml_unregister_frametable~ (Fr√©d√©ric Recoules, review by Gabriel Scherer)
  - [[https://github.com/ocaml/ocaml/issues/12636][#12636]], [[https://github.com/ocaml/ocaml/issues/12646][#12646]]: More prudent reinitialisation of I/O mutexes after a fork() (Xavier Leroy, report by Zach Baylin, review by Enguerrand Decorne)
  - (*breaking change*) [[https://github.com/ocaml/ocaml/issues/10845][#10845]] Emit frametable size on AMD64 BSD (OpenBSD, FreeBSD, NetBSD) systems (emitted for Linux in [[https://github.com/ocaml/ocaml/issues/8805][#8805]]) (Hannes Mehnert, review by Nicol√°s Ojeda B√§r)
  - [[https://github.com/ocaml/ocaml/issues/12958][#12958]]: Fix ~tail-modulo-cons~ compilation of ~try-with~, ~&&~, and ~||~
    expressions.
    (Gabriel Scherer and Nicol√°s Ojeda B√§r, report by Sylvain Boilard, review by
    Gabriel Scherer)
      



* OCaml.org Newsletter: February 2024
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/ocaml-org-newsletter-february-2024/14272/1

** Sabine Schmaltz announced


Welcome to the February 2024 edition of the OCaml.org newsletter! This update has been compiled by the OCaml.org team. You can find
[[https://discuss.ocaml.org/tag/ocamlorg-newsletter][previous updates]] on Discuss.

Our goal is to make OCaml.org the best resource for anyone who wants to get started and be productive in OCaml. The OCaml.org
newsletter provides an update on our progress towards that goal and an overview of the changes we are working on.

We couldn't do it without all the amazing OCaml community members who help us review, revise, and create better OCaml documentation.
Your feedback enables us to better prioritise our work. Thank you!

This newsletter covers:
- *OCaml Documentation:* New documentation has been released, and existing documentation has been improved.
- *OCaml Cookbook:* A prototype of an OCaml cookbook that provides short code examples that solve practical problems using packages from the OCaml ecosystem is on staging.ocaml.org/cookbook.
- *Dark Mode:* We're almost ready to release dark mode now.
- *Community Section Rework:* We are preparing wireframes for the community section to better present the existing content. In addition, we started preliminary work towards a dedicated "Events" page.
- *General Improvements:* As usual, we also worked on general maintenance and improvements based on user feedback, so we're highlighting some of our work below.

*** Open Issues for Contributors & Outreachy Application Period

There are open issues for external contributors. However, since github.com/ocaml/ocaml.org participates in the Outreachy application
period, we might have a shortage of open issues in March, since Outreachy applicants will quickly take them on.

You can find [[https://github.com/ocaml/ocaml.org/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+no%3Aassignee][open issues for contributors
here]]!

*** OCaml Documentation

*User Testing*

Twenty-one brave newbies accepted being observed for one hour while discovering OCaml through the online docs and completing a couple
of programming tasks. Many thanks to all the participants of the user testing sessions we held!

Half of the user testing participants used the recently [[https://ocaml.org/docs][updated tutorials]], the other half used 
[[https://v2.ocaml.org/docs][v2.ocaml.org/docs]]. Our takeaway from this is:
- Learning OCaml isn't hard. However, learning functional programming is. Most participants who had previous FP experience successfully completed the tasks.
- The updated docs do a little better than the manual at teaching both OCaml and FP to participants without FP experience. A few of them succeeded at the more complex tasks using the new tutorials, while all participants without FP experience failed using the old documentation.

By observing the participants try to make sense of the tasks and find relevant materials in the documentation, we have identified
many smaller changes that are likely to improve the user experience on the documentation pages.

*Relevant PRs and Activities:*

- *In Progress:*
- *In Review (internal):*
  - [[https://github.com/ocaml/ocaml.org/pull/2044][Higher-Order Functions]]
- *In Review (community):*
  - [[https://github.com/ocaml/ocaml.org/pull/1400][File Manipulation]] (see [[https://discuss.ocaml.org/t/help-review-the-new-file-manipulation-tutorial-on-ocaml-org/12638][Discuss Thread]])
  - [[https://github.com/ocaml/ocaml.org/pull/1531][Polymorphic Variants]] (see [[https://discuss.ocaml.org/t/new-draft-tutorial-on-polymorphic-variants/13485][Discuss Thread]])
- *Published:*
  - [[https://github.com/ocaml/ocaml.org/pull/2045][Maps]]
  - [[https://github.com/ocaml/ocaml.org/pull/948][Sets]]
  - [[https://github.com/ocaml/ocaml.org/pull/1800][Options]]
  - [[https://github.com/ocaml/ocaml.org/pull/1778][Modules, Functors, Libraries With Dune]] (see [[https://discuss.ocaml.org/t/draft-tutorials-on-modules-functors-and-libraries/][Discuss]])
  - [[https://github.com/ocaml/ocaml.org/pull/1881][Labelled Arguments]]
  - [[https://github.com/ocaml/ocaml.org/pull/1880][The OCaml Playground]] by [[https://github.com/The-Amoghavarsha][@The-Amoghavarsha]]
  - [[https://github.com/ocaml/ocaml.org/pull/1825][Running Commands in an opam Switch]]
  - [[https://github.com/ocaml/ocaml.org/pull/1529][Mutable State / Imperative Programming]] (see [[https://discuss.ocaml.org/t/draft-tutorial-on-mutability-loops-and-imperative-programming/13504][Discuss Thread]])
  - Announcement on Discuss: [[https://discuss.ocaml.org/t/new-tutorials-on-basics-of-ocaml/13396][New Tutorials on Basics of OCaml]]
  - [[https://github.com/ocaml/ocaml.org/pull/1514][Basic Data Types]] (see [[https://discuss.ocaml.org/t/ocaml-org-tutorial-revamping-contd-basic-datatypes/12985][Discuss Thread]])
  - [[https://github.com/ocaml/ocaml.org/pull/1512][Functions and Values]] (see [[https://discuss.ocaml.org/t/ocaml-org-tutorial-revamping-cond-values-and-functions/13005][Discuss Thread]])
  - [[https://ocaml.org/docs/installing-ocaml][Installing OCaml]] (see [[https://discuss.ocaml.org/t/help-revamping-the-getting-started-tutorials-in-ocaml-org/12749][Discuss Thread]])
  - [[https://ocaml.org/docs/tour-of-ocaml][A Tour Of OCaml]] (see [[https://discuss.ocaml.org/t/help-revamping-the-getting-started-tutorials-in-ocaml-org/12749][Discuss Thread]])
  - [[https://ocaml.org/docs/your-first-program][Your First OCaml Program]] (see [[https://discuss.ocaml.org/t/help-revamping-the-getting-started-tutorials-in-ocaml-org/12749][Discuss Thread]])
  - [[https://ocaml.org/docs/opam-switch-introduction][Introduction to opam Switches]]
  - [[https://ocaml.org/docs/arm64-fix][Fix Homebrew Errors on Apple M1]]
  - [[https://ocaml.org/docs/operators][Operators]]
  - [[https://ocaml.org/docs/error-handling][Error Handling]] (see [[https://discuss.ocaml.org/t/ann-new-get-started-documentation-on-ocaml-org/13269][Discuss Thread]])
  - [[https://ocaml.org/docs/arrays][Arrays]] (see [[https://discuss.ocaml.org/t/feedback-needed-new-arrays-tutorial-on-ocaml-org/12683][Discuss Thread]])
  - [[https://ocaml.org/docs/sequences][Sequences]] (see [[https://discuss.ocaml.org/t/creating-a-tutorial-on-sequences/12091][Discuss Thread]])
- *Other Activity*:
  - [[https://github.com/ocaml/ocaml.org/pull/2060][(docs) Basic Data Types: Add link to module Str]]
  - [[https://github.com/ocaml/ocaml.org/pull/2090][First class module (Learning/Language/Module System)]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2092][Update bp_03_run_executables_and_tests.md]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2093][DOC: replace dream with yojson in first program]] by [[https://github.com/heathhenley][@heathhenley]]
  - [[https://github.com/ocaml/ocaml.org/pull/2095][Update typo + change from append to prepend]] by [[https://github.com/danipoma][@danipoma]]
  - [[https://github.com/ocaml/ocaml.org/pull/2105][Add workspace file for use with dune-pkg]] by [[https://github.com/gridbugs][@gridbugs]]
  - [[https://github.com/ocaml/ocaml.org/pull/2115][Fix typos in guidelines]] by [[https://github.com/cionx][@cionx]]
  - [[https://github.com/ocaml/ocaml.org/pull/2020][Removing dune from setup instructions]] by [[https://github.com/The-Amoghavarsha][@The-Amoghavarsha]]
  - [[https://github.com/ocaml/ocaml.org/pull/2023][Improve some wording in the functors tutorial]] by [[https://github.com/neuroevolutus][@neuroevolutus]]
  - [[https://github.com/ocaml/ocaml.org/pull/2054][Add link from operators to monads]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - [[https://github.com/ocaml/ocaml.org/pull/2047][(doc) Improve wording in "Libraries with Dune" tutorial]] by [[https://github.com/The-Amoghavarsha][@The-Amoghavarsha]]
  - [[https://github.com/ocaml/ocaml.org/pull/2059][Replace Variable by Parameter]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - [[https://github.com/ocaml/ocaml.org/pull/2046][(docs) Adding an example of a closure that contains mutable state in Mutable State & Imperative Tutorial]] by [[https://github.com/The-Amoghavarsha][@The-Amoghavarsha]]
  - [[https://github.com/ocaml/ocaml.org/pull/2064][(docs) Recommend dune watch mode]] by [[https://github.com/yawaramin][@yawaramin]]
  - [[https://github.com/ocaml/ocaml.org/pull/2073][(docs) Set ‚ÄúSets‚Äú as Set's tutorial title]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - [[https://github.com/ocaml/ocaml.org/pull/2087][(docs) Correct map to map_error in Error Handling Guide]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - [[https://github.com/ocaml/ocaml.org/pull/2117][Omit mention of Merlin]] by [[https://github.com/yawaramin][@yawaramin]]

*** Upcoming OCaml Cookbook

We made some progress towards adding a new, community-driven section to the Learn area: the OCaml Cookbook. The cookbook aims to be a
compilation of recipes that provide code samples that solve practical-minded tasks using packages from the OCaml ecosystem.

Here is the design we are considering:
- Category: High-level groups of tasks, e.g., networking, data compression, or command line arguments.
- Task: Single thing to be done in a category, e.g., write to a file, make an HTTP GET request, or return an exit status.
- Recipe: Version of task using a package, e.g., HTTP GET using ~curly~ or ~cohttp~.

A rough prototype is on staging.ocaml.org/cookbook. The contributions and the user feedback we received suggest that the structure of
the cookbook needs to be refined one more time until it is ready to be released.

A good place to give feedback on the cookbook is [[https://discuss.ocaml.org/t/feedback-help-wanted-upcoming-ocaml-org-cookbook-feature/14127/10][this discuss
thread]].

*Relevant PRs and Activities:*
- [[https://github.com/ocaml/ocaml.org/pull/1839][Prototype OCaml Cookbook]]
- Contributions to the Cookbook:
  - (WIP) [[https://github.com/ocaml/ocaml.org/pull/2099][Cookbook : filesystem]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - (WIP) [[https://github.com/ocaml/ocaml.org/pull/2112][Cookbook networking]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - (WIP) [[https://github.com/ocaml/ocaml.org/pull/2121][Cookbook xml]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - (WIP) [[https://github.com/ocaml/ocaml.org/pull/2123][Cookbook : Web / simple HTTP client]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - (WIP) [[https://github.com/ocaml/ocaml.org/pull/2124][Cookbook Web / uri]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - (WIP) [[https://github.com/ocaml/ocaml.org/pull/2125][Cookbook: Regexp (ppx_regexp)]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2097][Cookbook : encoding]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2098][Cookbook : and Sorting list and arrays]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2104][Cookbook textprocessing]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2100][Cookboot : Add a Database / ezsqlite entry]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2107][Cookbook concurrency : Lwt]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2108][Cookbook caqti ppx rapper]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2119][Cookbook Ezsqlite - typo and rewriting]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - [[https://github.com/ocaml/ocaml.org/pull/2118][Cookbook Sorting - typo]] by [[https://github.com/F-Loyer][@F-Loyer]]

*** Dark Mode

In December, [[https://github.com/oyenuga17][oyenuga17]] started to implement the new dark mode on OCaml.org.

By now, the new dark mode is mostly complete, but it hasn't been reviewed or tested sufficiently.

We have enabled the dark mode on staging.ocaml.org, based on your browser / operating system preferences. If you want to help, you
can view the dark mode on staging.ocaml.org and report anything you see by opening an issue.

*Completed Pages:*
- [[https://github.com/ocaml/ocaml.org/pull/1897][Learn/Get Started + Language + Guides]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/1902][Learn/Excercises]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/1903][Learn/Books]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/1919][Learn/Platform Tools]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/1946][Packages Search Results]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/1973][Packages + Community]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/2001][Blog + Jobs + Changelog]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/1836][Learn/Overview]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/2032][Install + Papers + Logos and Policy Pages]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/2053][Governance + Outreachy Internships Page]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/2069][Komepage + Tutorial Search Results Page]] by [[https://github.com/oyenuga17][@oyenuga17]]
- [[https://github.com/ocaml/ocaml.org/pull/2109][OCaml Workshop + Success Stories]] by [[https://github.com/oyenuga17][@oyenuga17]]

*** Community Section Rework

This month, we have started to do user research on the community area and gathered feedback and ideas on the current pages. Among
others, we have identified these:
- the Community section needs a better Events directory
- the Jobs page needs to be more easily reachable from the community page
- it would be great to highlight Open Source projects from the OCaml ecosystem that are looking for contributors

If you have opinions on the community section, feel free to share them in [[https://discuss.ocaml.org/t/looking-for-ideas-for-the-community-page-at-ocaml-org/14032/9][this discuss
thread]]!

*Relevant PRs and Activities:*
  - [[https://github.com/ocaml/ocaml.org/pull/2018][Create Community Subnav to put Jobs under Community]] by [[https://github.com/sabine][@sabine]]
  - [[https://github.com/ocaml/ocaml.org/pull/2022][Add Title for Breadcrumb Subnav (e.g. "Learn" / "Community")]] by [[https://github.com/sabine][@sabine]]

*** General Improvements

Many thanks go out to the many contributors who helped improve OCaml.org in February. Find them listed below!

*Relevant PRs and Activities:*
- General:
  - [[https://github.com/ocaml/ocaml.org/pull/2024][Make tutorial field short_title optional]] by [[https://github.com/amarachigoodness74][@amarachigoodness74]]
  - [[https://github.com/ocaml/ocaml.org/pull/2016][(build) Dont Crunch the data/ Folder]] by [[https://github.com/sabine][@sabine]]
  - [[https://github.com/ocaml/ocaml.org/pull/2028][Refine Learn Landing Page Styles to meet Figma Design]] by [[https://github.com/sabine][@sabine]]
  - [[https://github.com/ocaml/ocaml.org/pull/2040][Remove obsolete text on difficulty symbols on exercises page]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - [[https://github.com/ocaml/ocaml.org/pull/2048][make the github links on ocaml.org point to the ocaml org]] by [[https://github.com/v-gb][@v-gb]]
  - [[https://github.com/ocaml/ocaml.org/pull/2076][feat: create ocaml playground mobile view ]] by [[https://github.com/FatumaA][@FatumaA]]
  - [[https://github.com/ocaml/ocaml.org/pull/2120][Add OCaml Language Manual button on Learn Overview hero section]] by [[https://github.com/sabine][@sabine]]
  - [[https://github.com/ocaml/ocaml.org/pull/2116][Bugfix: Remove the duplicated "Docs" link and make it looks like the figma]] by [[https://github.com/kiyov09][@kiyov09]]
  - [[https://github.com/ocaml/ocaml.org/pull/2075][Advertise atom feed in head using link]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - [[https://github.com/ocaml/ocaml.org/pull/2067][adjust list bullet color]] by [[https://github.com/egmaleta][@egmaleta]]
  - [[https://github.com/ocaml/ocaml.org/pull/2071][Make the playground cursor more obvious]] by [[https://github.com/sabine][@sabine]]
  - [[https://github.com/ocaml/ocaml.org/pull/2078][Add Two Packages to "Is OCaml Web Yet?"]] by [[https://github.com/F-Loyer][@F-Loyer]]
- Data parsing:
  - [[https://github.com/ocaml/ocaml.org/pull/2039][(ood-gen) Make optional list types in 'tutorials' type non-optional]] by [[https://github.com/egmaleta][@egmaleta]]
  - [[https://github.com/ocaml/ocaml.org/pull/2042][(ood-gen) Adjust type of fields with ~list option~ type to ~list~ in Changelog, News, Planet, and Workshop]] by [[https://github.com/egmaleta][@egmaleta]]
  - [[https://github.com/ocaml/ocaml.org/pull/2102][(ood-gen) Unify Data.Event / Data.Meetup into Data.Event / Data.Event/RecurringEvent]] by [[https://github.com/sabine][@sabine]]
  - [[https://github.com/ocaml/ocaml.org/pull/2068][(ood-gen) Adjust type of fields with ~option~ type in Workshop]] by [[https://github.com/egmaleta][@egmaleta]]
  - [[https://github.com/ocaml/ocaml.org/pull/2063][Do not generate empty data/watch.yml]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - [[https://github.com/ocaml/ocaml.org/pull/2061][Don't let get_ok swallow error causes]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - [[https://github.com/ocaml/ocaml.org/pull/2055][(ood-gen) Adjust type of fields with bool option type to bool in Release]] by [[https://github.com/egmaleta][@egmaleta]]
- Data:
  - [[https://github.com/ocaml/ocaml.org/pull/2025][Changelog entry for OCaml 5.2.0~alpha1]] by [[https://github.com/Octachron][@Octachron]]
  - [[https://github.com/ocaml/ocaml.org/pull/2036][Add changelog entry for ppxlib.0.32.0 release]] by [[https://github.com/NathanReb][@NathanReb]]
  - [[https://github.com/ocaml/ocaml.org/pull/2050][changelog: add dune.3.13.1]] by [[https://github.com/emillon][@emillon]]
  - [[https://github.com/ocaml/ocaml.org/pull/2096][Add missing changelogs for January]] by [[https://github.com/tmattio][@tmattio]]
  - [[https://github.com/ocaml/ocaml.org/pull/2113][(data) add MirageOS hack retreat]] by [[https://github.com/sabine][@sabine]]
  - [[https://github.com/ocaml/ocaml.org/pull/2058][Add changelog for dune.3.14.0]] by [[https://github.com/emillon][@emillon]]
      



* Announcing the New Dark Mode on OCaml.org
:PROPERTIES:
:CUSTOM_ID: 6
:END:
Archive: https://discuss.ocaml.org/t/announcing-the-new-dark-mode-on-ocaml-org/14273/1

** Sabine Schmaltz announced


I am happy to announce the launch of the new Dark Mode feature on ocaml.org.

This enhancement was led by UX/UI designer @Claire_Vandenberghe, focusing on an intuitive and eye-friendly design suitable for
extended use. The implementation of this feature was carried out by Outreachy intern @Seun, spanning from December to March. We are
very happy with her work.

This update aims to provide a more comfortable browsing experience, especially for those who prefer a darker interface for reading
documentation.

We invite you to explore the new dark mode and report any issues and possible improvements
[[https://github.com/ocaml/ocaml.org/issues][here]]! :sparkles::heart:
      



* Call for presentations ‚Äì ML 2024: ACM SIGPLAN ML Family Workshop
:PROPERTIES:
:CUSTOM_ID: 7
:END:
Archive: https://discuss.ocaml.org/t/call-for-presentations-ml-2024-acm-sigplan-ml-family-workshop/14284/1

** Guillaume Munch-Maccagnoni announced


We are happy to invite submissions to the *ML 2024* workshop:

*** Higher-order, Typed, Inferred, Strict: ACM SIGPLAN ML Family Workshop

Co-located with [[https://icfp24.sigplan.org/][ICFP ]]
- Date :: Friday, September 6, 2024
- Location :: Milan, Italy

[[https://icfp24.sigplan.org/home/mlworkshop-2024][Call for presentations ]]

ML (originally, ‚ÄúMeta Language‚Äù) is a family of programming languages that includes dialects known as Standard ML, OCaml, and F#,
among others. The development of these languages has inspired a large amount of computer science research, both practical and
theoretical.

The ML Family Workshop is an established informal workshop aiming to recognize the entire extended ML family and to provide the forum
to present and discuss common issues: all aspects of the design, semantics, theory, application, implementation, and teaching of the
members of the ML family. We also encourage presentations from related languages (such as Haskell, Scala, Rust, Nemerle, Links, Koka,
F*, Eff, ATS, etc), to promote the exchange of ideas and experience. The ML family workshop will be held in close coordination with
the OCaml Users and Developers Workshop.

We plan the workshop to an be in-person event with remote participation (streamed live). Speakers are generally expected to present
in person (we will work to make remote presentations possible).

- Deadline for talk proposals: *Thursday, June 6, 2024 (AoE)*
- Notification of acceptance: *Saturday, July 6, 2024*
- Workshop: *Friday, September 6, 2024*

*** Format

The ML 2024 workshop will continue the informal approach followed since 2010. Presentations are selected by the program committee
from submitted proposals. There are no published proceedings, so contributions may be submitted for publication elsewhere. The main
criterion is the promoting and informing the development of the entire extended ML family and delivering a lively workshop
atmosphere. We particularly encourage talks about works in progress, presentations of negative results (things that were expected to
but did not quite work out) and informed positions.

We seek presentations on topics including (but not limited to): language design, implementation, type systems, applications,
environments, semantics. We specifically encourage reporting what did not meet expectations or what, despite all efforts, did not
work to satisfaction. Four kinds of submissions are solicited: Research Presentations, Experience Reports, Demos, and Informed
Positions.

The point of the submission should be clear from its first two pages (PC members are not obligated to read any further.)

See the [[https://icfp24.sigplan.org/home/mlworkshop-2024#Call-for-Presentations][full call for presentations ]] for scope and
submission instructions.
      



* dream-html 3.0.0
:PROPERTIES:
:CUSTOM_ID: 8
:END:
Archive: https://discuss.ocaml.org/t/ann-dream-html-3-0-0/14013/6

** Yawar Amin announced


[ANN] dream-html 3.2.0

Thanks to Marco Schneider for noticing and adding a missing convenience wrapper for ~Dream.send~, now we have ~Dream_html.send~ to
write markup directly to a WebSocket as text.

Also a change to use our internal function to escape the text inside HTML comments ie ~comment "xyz"~.
      



* ppx_minidebug 1.3.0: toward a logging framework
:PROPERTIES:
:CUSTOM_ID: 9
:END:
Archive: https://discuss.ocaml.org/t/ann-ppx-minidebug-1-3-0-toward-a-logging-framework/14213/2

** Lukasz Stafiniak announced


Happy to say [[https://ocaml.org/p/ppx_minidebug/latest][ppx_minidebug 1.4.0]] is now in the opam repository. The two new features
since 1.3.0 are:

- a _Table of Contents_ view on logs, a log file with selected log entry headers as hyperlinks pointing to anchors in the regular log file(s), the table of contents logs preserve the log tree hierarchy but don't use folding,
- time stamps optionally output as time elapsed since the start of a program rather than as wall-clock times.

What future development of ~ppx_minidebug~ would you like to see?

[poll type=regular results=always public=true chartType=bar]
- I want flame graphs
- I want better support for exceptions
- I want ~%log_entry~ (release 1.5.0 already)
- ppx_minidebug is already good enough for me
- ppx_minidebug is not for me anyway
[/poll]

Thank You!
      



* Other OCaml News
:PROPERTIES:
:CUSTOM_ID: 10
:END:
** From the ocaml.org blog


Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://tarides.com/blog/2024-03-07-a-time-for-change-our-response-to-the-white-house-cybersecurity-press-release][A Time for Change: Our Response to the White House Cybersecurity Press Release]]
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe to the [[https://sympa.inria.fr/sympa/info/caml-list][caml-list]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
