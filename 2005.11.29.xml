<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2005.11.29</cwn_date>
  <cwn_prev>2005.11.22</cwn_prev>
  <cwn_next>2005.12.13</cwn_next>
  <cwn_date_text>22 to 29 November, 2005</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>Mandelbrot renderer</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31458</cwn_url>
    <cwn_who>Jon Harrop announced</cwn_who>
    <cwn_what>
Following Oliver's objections regarding the lack of serious software written 
in OCaml (e.g. web servers), I have written a very serious Mandelbrot 
renderer. The program is 35 lines of OCaml and renders using OpenGL. This 
page breaks it down and describes how it works:

  http://www.ffconsultancy.com/free/fractal

I've written a simple, recursive C++ version as well. It weighs in at 45 lines 
but only 6% more bytes. If you specialise the complex-number arithmetic in 
the OCaml:

  let rec mandelbrot i cx cy zx zy =
    if i = 63 || zx *. zx +. zy *. zy &gt; 4. then i else
      let zx = zx *. zx -. zy *. zy and zy = 2. *. zx *. zy in
      mandelbrot (i+1) cx cy (zx +. cx) (zy +. cy)

then, with only -O3, the C++ is actually significantly slower. The performance 
of the C++ improves considerably with -ffast-math so that it is slightly 
faster. The performance of the C++ can be further improved by using an 
imperative style. This is on both AMD64 and x86.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>polymorphic fixpoints operator in Ocaml</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31459</cwn_url>
    <cwn_who>Jacques Carette announced</cwn_who>
    <cwn_what>
Inspired by Julien Signoles' code for Omega, (http://www.lri.fr/~signoles/prog/misc/lambda.ml.html) Oleg K explores different ways to create a *fully polymorphic* fixpoint operator in Ocaml.  See 

    http://pobox.com/~oleg/ftp/packages/fixpoints.ml 

for details.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Interface to Boom SMS (text message service)</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31476</cwn_url>
    <cwn_who>Richard Jones announced</cwn_who>
    <cwn_what>
Not likely to be of wide interest, but we have implemented a simple
interface to the commercial Boom SMS (text message sending) service.
We use this to generate alerts when significant things happen while
automatically bidding on Google Adwords.

http://merjis.com/developers/boomsms

License is LGPL + OCaml linking exception.

Interface: http://resources.merjis.com/developers/boomsms/BoomSMS.html

Read more about the commercial service here.  If you want to test it,
they will give you up to 50 free text messages (if you ask them).

http://sms.boom-sms.co.uk/
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>HDCaml 0.2.5 -- SystemC Support</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.confluence/405</cwn_url>
    <cwn_who>Tom Hawkins announced</cwn_who>
    <cwn_what>
HDCaml is a hardware design and verification language embedded in OCaml.

With release 0.2.5, HDCaml now produces cycle and bit accurate C models 
for simulation.  In addition to the logic primitives, the C models also 
support basic assertions of the form:

   assertion "label" (always (prop (some_signal)));

The C models include a SystemC wrapper for integration into any SystemC 
environment.  The wrapper is currently untested, so feedback from any 
SystemC user is appreciated.  Thanks!

http://www.confluent.org/
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Physical compare</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31485</cwn_url>
    <cwn_who>Tom Hawkins asked and Nicolas Cannasse answered</cwn_who>
    <cwn_what>
&gt; Is their a version of "compare" that is based on physical equality?  If 
&gt; not, how can I define one?  I tried:
&gt; 
&gt; let compareq a b = if a == b then 0 else if a &gt; b then 1 else (-1)
&gt; 
&gt; But unfortunately, (&gt;) is a structural comparison.
&gt; 
&gt; I need to make a Map where the keys are distinguished by the physical 
&gt; instance.

It's not possible.

One of the reason is that the GC might move your memory addresses around 
and then break your Map constitency. You need to attribute an unique id 
to each of your items and use it for comparison.
    </cwn_what>
    <cwn_who>Jon Harrop suggested</cwn_who>
    <cwn_what>
Tag every key with a unique integer using something like this:

module Tag : sig
  type 'a t
  val make : 'a -&gt; 'a t
  val compare : 'a t -&gt; 'a t -&gt; int
end = struct
  type 'a t = int * 'a
  let i = ref 0
  let make x =
    incr i;
    !i, x
  let compare (a, _) (b, _) = compare a b
end;;

Then use the Tag.compare function to perform physical comparison with a total 
ordering.
    </cwn_what>
    <cwn_who>Jean-Christophe Filliatre also suggested</cwn_who>
    <cwn_what>
Others already  gave the right answer  i.e. that you need  to tag your
values with unique integers to do that.

Just to  mention it, I wrote  a little hash-consing  library that does
precisely this, together with specialized  versions of Set and Map for
these tagged values  (based on Patricia trees). There  is even a short
article describing the technique. All is available on this page:

http://www.lri.fr/~filliatr/software.en.html
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Library for reading and writing CSV (comma-separated values) files</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31509</cwn_url>
    <cwn_who>Richard Jones announced</cwn_who>
    <cwn_what>
Version 1.1.0 has been released.

Download: http://merjis.com/developers/csv
Documentation: http://resources.merjis.com/developers/csv/Csv.html
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>findlib-1.1.1 released</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31531</cwn_url>
    <cwn_who>Gerd Stolpmann announced</cwn_who>
    <cwn_what>
there is a new version of findlib (1.1.1) with two minor bug fixes,
especially for O'Caml 3.09.

See http://www.ocaml-programming.de/packages/documentation/findlib/
for documentation and links. See
http://www.ocaml-programming.de/packages/
for downloads.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>ile ou un remplacement?</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31535</cwn_url>
    <cwn_who>Christopher Alexander Stein asked</cwn_who>
    <cwn_what>
J'avais l'habitude d'avoir une utilité très commode pour Caml; la ligne éditant 
"ile" qui envelopperait l'interprèteur. Je puis plus ne le trouver sur le web.  
N'importe qui savent où il est ou suggèrent un remplacement?

(Editor's translation: the poster is looking for the line editor "ile" or a 
remplacement that would allow him, when using it with the toplevel, to have a 
better line editing experience.)
    </cwn_what>
    <cwn_who>Eric Cooper suggested</cwn_who>
    <cwn_what>
Try ledit, available as a Debian package or from
   ftp://ftp.inria.fr/INRIA/cristal/Daniel.de_Rauglaudre/Tools/
    </cwn_what>
    <cwn_who>Michael Wohlwend suggested</cwn_who>
    <cwn_what>
there is also rlwrap which is easier to use. (readline wrap)
    </cwn_what>
    <cwn_who>Martin Jambon suggested</cwn_who>
    <cwn_what>
There is some useful information there, and you are welcome to contribute 
too:
    http://wiki.cocan.org/tips_for_using_the_ocaml_toplevel
    </cwn_what>
    <cwn_who>Alain Frisch said</cwn_who>
    <cwn_what>
Google donne ce lien:

http://ocaml.info/ocaml_sources/ile-2.7/
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
