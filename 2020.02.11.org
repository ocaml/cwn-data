#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[http://alan.petitepomme.net/cwn/2020.02.04.html][Previous Week]] [[http://alan.petitepomme.net/cwn/index.html][Up]] [[http://alan.petitepomme.net/cwn/2020.02.18.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of February 04 to 11, 2020.

#+TOC: headlines 1


* OCaml 4.10.0, first release candidate
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/ocaml-4-10-0-first-release-candidate/5137/1

** octachron announced


The release of OCaml version 4.10.0 is imminent. We have
created a release candidate that you can test.

The source code is available at these addresses:

- https://github.com/ocaml/ocaml/archive/4.10.0+rc1.tar.gz
- https://caml.inria.fr/pub/distrib/ocaml-4.10/ocaml-4.10.0+rc1.tar.gz

The compiler can also be installed as an OPAM switch with one of the
following commands.
#+begin_src shell
opam switch create ocaml-variants.4.10.0+rc1 --repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_src
or
#+begin_src shell
opam switch create ocaml-variants.4.10.0+rc1+<VARIANT> --repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_src
 where you replace <VARIANT> with one of these:
 - afl
 - flambda
 - fp
 - fp+flambda

We want to know about any bugs. Please report them here:
 https://github.com/ocaml/ocaml/issues

If every goes well, the full release should follow in the next
two or three weeks.

*OCaml 4.10.0 changes*

*** Language features

- [[https://github.com/ocaml/ocaml/issues/7757][#7757]], [[https://github.com/ocaml/ocaml/issues/1726][#1726]]: multi-indices for extended indexing operators: ~a.%{0;1;2}~ desugars to ~( .%{ ;.. } ) a [|0;1;2|]~ (Florian Angeletti, review by Gabriel Radanne)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/1859][#1859]], [[https://github.com/ocaml/ocaml/issues/9117][#9117]]: enforce safe (immutable) strings by removing the -unsafe-string option by default. This can be overridden by a configure-time option (available since 4.04 in 2016): --disable-force-safe-string since 4.08, -no-force-safe-since between 4.07 and 4.04. In the force-safe-string mode (now the default), the return type of the String_val macro in C stubs is ~const char*~ instead of ~char*~. This change may break C FFI code. (Kate Deplaix)

- [[https://github.com/ocaml/ocaml/issues/6662][#6662]], [[https://github.com/ocaml/ocaml/issues/8908][#8908]]: allow writing "module _ = E" to ignore module expressions (Thomas Refis, review by Gabriel Radanne)

*** Runtime system

- [[https://github.com/ocaml/ocaml/issues/8809][#8809]]: Add a best-fit allocator for the major heap; still experimental, it should be much better than current allocation policies (first-fit and next-fit) for programs with large heaps, reducing both GC cost and memory usage. This new best-fit is not (yet) the default; set it explicitly with OCAMLRUNPARAM="a=2" (or Gc.set from the program). You may also want to increase the ~space_overhead~ parameter of the GC (a percentage, 80 by default), for example OCAMLRUNPARAM="o=85", for optimal speed. (Damien Doligez, review by Stephen Dolan, Jacques-Henri Jourdan, Xavier Leroy, Leo White)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/8713][#8713]], [[https://github.com/ocaml/ocaml/issues/8940][#8940]], [[https://github.com/ocaml/ocaml/issues/9115][#9115]], [[https://github.com/ocaml/ocaml/issues/9143][#9143]], [[https://github.com/ocaml/ocaml/issues/9202][#9202]], [[https://github.com/ocaml/ocaml/issues/9251][#9251]]: Introduce a state table in the runtime to contain the global variables. (The Multicore runtime will have one such state for each domain.)

   This changes the status of some internal variables of the OCaml runtime; in many cases the header file originally defining the internal variable provides a compatibility macro with the old name, but programs re-defining those variables by hand need to be fixed.

   (KC Sivaramakrishnan and Stephen Dolan, compatibility hacking by David Allsopp, Florian Angeletti, Kate Deplaix, Jacques Garrigue, Guillaume Munch-Maccagnoni and Nicolás Ojeda Bär, review by David Allsopp, Alain Frisch, Nicolas Ojeda Bar, Gabriel Scherer, Damien Doligez, and Guillaume Munch-Maccagnoni)

- [[https://github.com/ocaml/ocaml/issues/8993][#8993]]: New C functions caml_process_pending_actions{,_exn} in caml/signals.h, intended for executing all pending actions inside long-running C functions (requested minor and major collections, signal handlers, finalisers, and memprof callbacks). The function caml_process_pending_actions_exn returns any exception arising during their execution, allowing resources to be cleaned-up before re-raising. (Guillaume Munch-Maccagnoni, review by Jacques-Henri Jourdan, Stephen Dolan, and Gabriel Scherer)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/8691][#8691]], [[https://github.com/ocaml/ocaml/issues/8897][#8897]], [[https://github.com/ocaml/ocaml/issues/9027][#9027]]: Allocation functions are now guaranteed not to trigger any OCaml callback when called from C. In long-running C functions, this can be replaced with calls to caml_process_pending_actions at safe points. Side effect of this change: in bytecode mode, polling for asynchronous callbacks is performed at every minor heap allocation, in addition to function calls and loops as in previous OCaml releases. (Jacques-Henri Jourdan, review by Stephen Dolan, Gabriel Scherer and Guillaume Munch-Maccagnoni)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9037][#9037]]: caml_check_urgent_gc is now guaranteed not to trigger any finaliser. In long-running C functions, this can be replaced with calls to caml_process_pending_actions at safe points. (Guillaume Munch-Maccagnoni, review by Jacques-Henri Jourdan and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/8619][#8619]]: Ensure Gc.minor_words remains accurate after a GC. (Stephen Dolan, Xavier Leroy and David Allsopp, review by Xavier Leroy and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/8667][#8667]]: Limit GC credit to 1.0 (Leo White, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/8670][#8670]]: Fix stack overflow detection with systhreads (Stephen Dolan, review by Xavier Leroy, Anil Madhavapeddy, Gabriel Scherer, Frédéric Bour and Guillaume Munch-Maccagnoni)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/8711][#8711]]: The major GC hooks are no longer allowed to interact with the OCaml heap. (Jacques-Henri Jourdan, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/8630][#8630]]: Use abort() instead of exit(2) in caml_fatal_error, and add the new hook caml_fatal_error_hook. (Jacques-Henri Jourdan, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8641][#8641]]: Better call stacks when a C call is involved in byte code mode (Jacques-Henri Jourdan, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8634][#8634]], [[https://github.com/ocaml/ocaml/issues/8668][#8668]], [[https://github.com/ocaml/ocaml/issues/8684][#8684]], [[https://github.com/ocaml/ocaml/issues/9103][#9103]] (originally [[https://github.com/ocaml/ocaml/issues/847][#847]]): Statistical memory profiling. In OCaml 4.10, support for allocations in the minor heap in native mode is not available, and callbacks for promotions and deallocations are not available. Hence, there is not any public API for this feature yet. (Jacques-Henri Jourdan, review by Stephen Dolan, Gabriel Scherer and Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/9268][#9268]], [[https://github.com/ocaml/ocaml/issues/9271][#9271]]: Fix bytecode backtrace generation with large integers present. (Stephen Dolan and Mark Shinwell, review by Gabriel Scherer and Jacques-Henri Jourdan)

*** Standard library

- [[https://github.com/ocaml/ocaml/issues/8760][#8760]]: List.concat_map : ('a -> 'b list) -> 'a list -> 'b list (Gabriel Scherer, review by Daniel Bünzli and Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/8832][#8832]]: List.find_map : ('a -> 'b option) -> 'a list -> 'b option (Gabriel Scherer, review by Jeremy Yallop, Nicolás Ojeda Bär and Daniel Bünzli)

- [[https://github.com/ocaml/ocaml/issues/7672][#7672]], [[https://github.com/ocaml/ocaml/issues/1492][#1492]]: Add ~Filename.quote_command~ to produce properly-quoted commands for execution by Sys.command. (Xavier Leroy, review by David Allsopp and Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/8971][#8971]]: Add ~Filename.null~, the conventional name of the "null" device. (Nicolás Ojeda Bär, review by Xavier Leroy and Alain Frisch)

- [[https://github.com/ocaml/ocaml/issues/8651][#8651]]: add '%#F' modifier in printf to output OCaml float constants in hexadecimal (Pierre Roux, review by Gabriel Scherer and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8657][#8657]]: Optimization in [Array.make] when initializing with unboxed or young values. (Jacques-Henri Jourdan, review by Gabriel Scherer and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/8716][#8716]]: Optimize [Array.fill] and [Hashtbl.clear] with a new runtime primitive (Alain Frisch, review by David Allsopp, Stephen Dolan and Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/8530][#8530]]: List.sort: avoid duplicate work by chop (Guillaume Munch-Maccagnoni, review by David Allsopp, Damien Doligez and Gabriel Scherer)

*** Other libraries

- [[https://github.com/ocaml/ocaml/issues/1939][#1939]], [[https://github.com/ocaml/ocaml/issues/2023][#2023]]: Implement Unix.truncate and Unix.ftruncate on Windows. (Florent Monnier and Nicolás Ojeda Bär, review by David Allsopp)

*** Code generation and optimizations

- [[https://github.com/ocaml/ocaml/issues/8806][#8806]]: Add an [@@immediate64] attribute for types that are known to be immediate only on 64 bit platforms (Jérémie Dimino, review by Vladimir Keleshev)

- [[https://github.com/ocaml/ocaml/issues/9028][#9028]], [[https://github.com/ocaml/ocaml/issues/9032][#9032]]: Fix miscompilation by no longer assuming that untag_int (tag_int x) = x in Cmmgen; the compilation of ~(n lsl 1) + 1~, for example, would be incorrect if evaluated with a large value for ~n~. (Stephen Dolan, review by Vincent Laviron and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8672][#8672]]: Optimise Switch code generation on booleans. (Stephen Dolan, review by Pierre Chambart)

- [[https://github.com/ocaml/ocaml/issues/8990][#8990]]: amd64: Emit 32bit registers for Iconst_int when we can (Xavier Clerc, Tom Kelly and Mark Shinwell, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/2322][#2322]]: Add pseudo-instruction ~Ladjust_trap_depth~ to replace dummy Lpushtrap generated in linearize (Greta Yorsh and Vincent Laviron, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8707][#8707]]: Simplif: more regular treatment of Tupled and Curried functions (Gabriel Scherer, review by Leo White and Alain Frisch)

- [[https://github.com/ocaml/ocaml/issues/8526][#8526]]: Add compile-time option -function-sections in ocamlopt to emit each function in a separate named text section on supported targets. (Greta Yorsh, review by Pierre Chambart)

- [[https://github.com/ocaml/ocaml/issues/2321][#2321]]: Eliminate dead ICatch handlers (Greta Yorsh, review by Pierre Chambart and Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/8919][#8919]]: lift mutable lets along with immutable ones (Leo White, review by Pierre Chambart)

- [[https://github.com/ocaml/ocaml/issues/8909][#8909]]: Graph coloring register allocator: the weights put on preference edges should not be divided by 2 in branches of conditional constructs, because it is not good for performance and because it leads to ignoring preference edges with 0 weight. (Eric Stavarache, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9006][#9006]]: int32 code generation improvements (Stephen Dolan, designed with Greta Yorsh, review by Xavier Clerc, Xavier Leroy and Alain Frisch)

- [[https://github.com/ocaml/ocaml/issues/9041][#9041]]: amd64: Avoid stall in sqrtsd by clearing destination. (Stephen Dolan, with thanks to Andrew Hunter, Will Hasenplaugh, Spiros Eliopoulos and Brian Nigito. Review by Xavier Leroy)

*** Manual and documentation

- [[https://github.com/ocaml/ocaml/issues/8718][#8718]], [[https://github.com/ocaml/ocaml/issues/9089][#9089]]: syntactic highlighting for code examples in the manual (Florian Angeletti, report by Anton Kochkov, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9101][#9101]]: add links to section anchor before the section title, make the name of those anchor explicits. (Florian Angeletti, review by Daniel Bünzli, Sébastien Hinderer, and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9257][#9257]], cautionary guidelines for using the internal runtime API without too much updating pain. (Florian Angeletti, review by Daniel Bünzli, Guillaume Munch-Maccagnoni and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/8950][#8950]]: move local opens in pattern out of the extension chapter (Florian Angeletti, review and suggestion by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9088][#9088]], [[https://github.com/ocaml/ocaml/issues/9097][#9097]]: fix operator character classes (Florian Angeletti, review by Gabriel Scherer, report by Clément Busschaert)

- [[https://github.com/ocaml/ocaml/issues/9169][#9169]]: better documentation for the best-fit allocation policy (Gabriel Scherer, review by Guillaume Munch-Maccagnoni and Florian Angeletti)

*** Compiler user-interface and warnings

- [[https://github.com/ocaml/ocaml/issues/8833][#8833]]: Hint for (type) redefinitions in toplevel session (Florian Angeletti, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/2127][#2127]], [[https://github.com/ocaml/ocaml/issues/9185][#9185]]: Refactor lookup functions. Included observable changes:
    - makes the location of usage warnings and alerts for constructors more precise
    - don't warn about a constructor never being used to build values when it has been defined as private
  (Leo White, Hugo Heuzard review by Thomas Refis, Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/8702][#8702]], [[https://github.com/ocaml/ocaml/issues/8777][#8777]]: improved error messages for fixed row polymorphic variants (Florian Angeletti, report by Leo White, review by Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/8844][#8844]]: Printing faulty constructors, inline records fields and their types during type mismatches. Also slightly changed other type mismatches error output. (Mekhrubon Turaev, review by Florian Angeletti, Leo White)

- [[https://github.com/ocaml/ocaml/issues/8885][#8885]]: Warn about unused local modules (Thomas Refis, review by Alain Frisch)

- [[https://github.com/ocaml/ocaml/issues/8872][#8872]]: Add ocamlc option "-output-complete-exe" to build a self-contained binary for bytecode programs, containing the runtime and C stubs. (Stéphane Glondu, Nicolás Ojeda Bär, review by Jérémie Dimino and Daniel Bünzli)

- [[https://github.com/ocaml/ocaml/issues/8874][#8874]]: add tests for typechecking error messages and pack them into pretty-printing boxes. (Oxana Kostikova, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/8891][#8891]]: Warn about unused functor parameters (Thomas Refis, review by Gabriel Radanne)

- [[https://github.com/ocaml/ocaml/issues/8903][#8903]]: Improve errors for first-class modules (Leo White, review by Jacques Garrigue)

- [[https://github.com/ocaml/ocaml/issues/8914][#8914]]: clarify the warning on unboxable types used in external primitives (61) (Gabriel Scherer, review by Florian Angeletti, report on the Discourse forum)

- [[https://github.com/ocaml/ocaml/issues/9046][#9046]]: disable warning 30 by default This outdated warning complained on label/constructor name conflicts within a mutually-recursive type declarations; there is now no need to complain thanks to type-based disambiguation. (Gabriel Scherer)

*** Tools

- *breaking change* [[https://github.com/ocaml/ocaml/issues/6792][#6792]], [[https://github.com/ocaml/ocaml/issues/8654][#8654]] ocamldebug now supports programs using Dynlink. This changes ocamldebug messages, which may break compatibility with older emacs modes. (Whitequark and Jacques-Henri Jourdan, review by Gabriel Scherer and Xavier Clerc)

- [[https://github.com/ocaml/ocaml/issues/8621][#8621]]: Make ocamlyacc a Windows Unicode application (David Allsopp, review by Nicolás Ojeda Bär)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/8834][#8834]], ~ocaml~: adhere to the XDG base directory specification to locate an ~.ocamlinit~ file. Reads an ~$XDG_CONFIG_HOME/ocaml/init.ml~ file before trying to lookup ~~/.ocamlinit~. On Windows the behaviour is unchanged. (Daniel C. Bünzli, review by David Allsopp, Armaël Guéneau and Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/9113][#9113]]: ocamldoc: fix the rendering of multi-line code blocks in the 'man' backend. (Gabriel Scherer, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/9127][#9127]], [[https://github.com/ocaml/ocaml/issues/9130][#9130]]: ocamldoc: fix the formatting of closing brace in record types. (David Allsopp, report by San Vu Ngoc)

- [[https://github.com/ocaml/ocaml/issues/9181][#9181]]: make objinfo work on Cygwin and look for the caml_plugin_header symbol in both the static and the dynamic symbol tables. (Sébastien Hinderer, review by Gabriel Scherer and David Allsopp)

*** Build system

- [[https://github.com/ocaml/ocaml/issues/8840][#8840]]: use ocaml{c,opt}.opt when available to build internal tools On my machine this reduces parallel-build times from 3m30s to 2m50s. (Gabriel Scherer, review by Xavier Leroy and Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/8650][#8650]]: ensure that "make" variables are defined before use; revise generation of config/util.ml to better quote special characters (Xavier Leroy, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/8690][#8690]], [[https://github.com/ocaml/ocaml/issues/8696][#8696]]: avoid rebuilding the world when files containing primitives change. (Stephen Dolan, review by Gabriel Scherer, Sébastien Hinderer and Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/8835][#8835]]: new configure option --disable-stdlib-manpages to disable building and installation of the library manpages. (David Allsopp, review by Florian Angeletti and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/8837][#8837]]: build manpages using ocamldoc.opt when available cuts the manpages build time from 14s to 4s (Gabriel Scherer, review by David Allsopp and Sébastien Hinderer, report by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/8843][#8843]], [[https://github.com/ocaml/ocaml/issues/8841][#8841]]: fix use of off_t on 32-bit systems. (Stephen Dolan, report by Richard Jones, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8947][#8947]], [[https://github.com/ocaml/ocaml/issues/9134][#9134]]: fix/improve support for the BFD library (Sébastien Hinderer, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/8951][#8951]]: let make's default target build the compiler (Sébastien Hinderer, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/8995][#8995]]: allow developers to specify frequently-used configure options in Git (ocaml.configure option) and a directory for host-specific, shareable config.cache files (ocaml.configure-cache option). See HACKING.adoc for further details. (David Allsopp, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9136][#9136]]: Don't propagate Cygwin-style prefix from configure to Makefile.config on Windows ports. (David Allsopp, review by Sébastien Hinderer)

*** Internal/compiler-libs changes

- [[https://github.com/ocaml/ocaml/issues/8828][#8828]]: Added abstractions for variants, records, constructors, fields and extension constructor types mismatch. (Mekhrubon Turaev, review by Florian Angeletti, Leo White and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/7927][#7927]], [[https://github.com/ocaml/ocaml/issues/8527][#8527]]: Replace long tuples into records in typeclass.ml (Ulugbek Abdullaev, review by David Allsopp and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/1963][#1963]]: split cmmgen into generic Cmm helpers and clambda transformations (Vincent Laviron, review by Mark Shinwell)

- [[https://github.com/ocaml/ocaml/issues/1901][#1901]]: Fix lexing of character literals in comments (Pieter Goetschalckx, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/1932][#1932]]: Allow octal escape sequences and identifiers containing apostrophes in ocamlyacc actions and comments. (Pieter Goetschalckx, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/2288][#2288]]: Move middle end code from [Asmgen] to [Clambda_middle_end] and [Flambda_middle_end].  Run [Un_anf] from the middle end, not [Cmmgen]. (Mark Shinwell, review by Pierre Chambart)

- [[https://github.com/ocaml/ocaml/issues/8692][#8692]]: Remove Misc.may_map and similar (Leo White, review by Gabriel Scherer and Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/8677][#8677]]: Use unsigned comparisons in amd64 and i386 emitter of Lcondbranch3. (Greta Yorsh, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8766][#8766]]: Parmatch: introduce a type for simplified pattern heads (Gabriel Scherer and Thomas Refis, review by Stephen Dolan and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/8774][#8774]]: New implementation of Env.make_copy_of_types (Alain Frisch, review by Thomas Refis, Leo White and Jacques Garrigue)

- [[https://github.com/ocaml/ocaml/issues/7924][#7924]]: Use a variant instead of an int in Bad_variance exception (Rian Douglas, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/8890][#8890]]: in -dtimings output, show time spent in C linker clearly (Valentin Gatien-Baron)

- [[https://github.com/ocaml/ocaml/issues/8910][#8910]], [[https://github.com/ocaml/ocaml/issues/8911][#8911]]: minor improvements to the printing of module types (Gabriel Scherer, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/8913][#8913]]: ocamltest: improve 'promote' implementation to take skipped lines/bytes into account (Gabriel Scherer, review by Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/8908][#8908]]: Use an option instead of a string for module names ("_" becomes None), and a dedicated type for functor parameters: "()" maps to "Unit" (instead of "*"). (Thomas Refis, review by Gabriel Radanne)

- [[https://github.com/ocaml/ocaml/issues/8928][#8928]]: Move contains_calls and num_stack_slots from Proc to Mach.fundecl (Greta Yorsh, review by Florian Angeletti and Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/8959][#8959]], [[https://github.com/ocaml/ocaml/issues/8960][#8960]], [[https://github.com/ocaml/ocaml/issues/8968][#8968]], [[https://github.com/ocaml/ocaml/issues/9023][#9023]]: minor refactorings in the typing of patterns:
  - refactor the {let,pat}_bound_idents* functions
  - minor bugfix in type_pat
  - refactor the generic pattern-traversal functions in Typecore and Typedtree
  - restrict the use of Need_backtrack
  (Gabriel Scherer and Florian Angeletti, review by Thomas Refis and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9030][#9030]]: clarify and document the parameter space of type_pat (Gabriel Scherer and Florian Angeletti and Jacques Garrigue, review by Florian Angeletti and Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/8975][#8975]]: "ocamltests" files are no longer required or used by "ocamltest". Instead, any text file in the testsuite directory containing a valid "TEST" block will be automatically included in the testsuite. (Nicolás Ojeda Bär, review by Gabriel Scherer and Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/8992][#8992]]: share argument implementations between executables (Florian Angeletti, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9015][#9015]]: fix fatal error in pprint_ast ([[https://github.com/ocaml/ocaml/issues/8789][#8789]]) (Damien Doligez, review by ...)

*** Bug fixes

- [[https://github.com/ocaml/ocaml/issues/5673][#5673]], [[https://github.com/ocaml/ocaml/issues/7636][#7636]]: unused type variable causes generalization error (Jacques Garrigue and Leo White, review by Leo White, reports by Jean-Louis Giavitto and Christophe Raffalli)

- [[https://github.com/ocaml/ocaml/issues/6922][#6922]], [[https://github.com/ocaml/ocaml/issues/8955][#8955]]: Fix regression with -principal type inference for inherited methods, allowing to compile ocamldoc with -principal (Jacques Garrigue, review by Leo White)

- [[https://github.com/ocaml/ocaml/issues/7925][#7925]], [[https://github.com/ocaml/ocaml/issues/8611][#8611]]: fix error highlighting for exceptionally long toplevel phrases (Kyle Miller, reported by Armaël Guéneau, review by Armaël Guéneau and Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/8622][#8622]]: Don't generate #! headers over 127 characters. (David Allsopp, review by Xavier Leroy and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/8715][#8715]]: minor bugfixes in CamlinternalFormat; removes the unused and misleading function CamlinternalFormat.string_of_formatting_gen (Gabriel Scherer and Florian Angeletti, review by Florian Angeletti and Gabriel Radanne)

- [[https://github.com/ocaml/ocaml/issues/8792][#8792]], [[https://github.com/ocaml/ocaml/issues/9018][#9018]]: Possible (latent) bug in Ctype.normalize_type removed incrimined Btype.log_type, replaced by Btype.set_type (Jacques Garrigue, report by Alain Frisch, review by Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/8856][#8856]], [[https://github.com/ocaml/ocaml/issues/8860][#8860]]: avoid stackoverflow when printing cyclic type expressions in some error submessages. (Florian Angeletti, report by Mekhrubon Turaev, review by Leo White)

- [[https://github.com/ocaml/ocaml/issues/8875][#8875]]: fix missing newlines in the output from MSVC invocation. (Nicolás Ojeda Bär, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/8921][#8921]], [[https://github.com/ocaml/ocaml/issues/8924][#8924]]: Fix stack overflow with Flambda (Vincent Laviron, review by Pierre Chambart and Leo White, report by Aleksandr Kuzmenko)

- [[https://github.com/ocaml/ocaml/issues/8892][#8892]], [[https://github.com/ocaml/ocaml/issues/8895][#8895]]: fix the definition of Is_young when CAML_INTERNALS is not defined. (David Allsopp, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8896][#8896]]: deprecate addr typedef in misc.h (David Allsopp, suggestion by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/8981][#8981]]: Fix check for incompatible -c and -o options. (Greta Yorsh, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/9019][#9019]], [[https://github.com/ocaml/ocaml/issues/9154][#9154]]: Unsound exhaustivity of GADTs from incomplete unification Also fixes bug found by Thomas Refis in [[https://github.com/ocaml/ocaml/issues/9012][#9012]] (Jacques Garrigue, report and review by Leo White, Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/9031][#9031]]: Unregister Windows stack overflow handler while shutting the runtime down. (Dmitry Bely, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/9051][#9051]]: fix unregistered local root in win32unix/select.c (could result in ~select~ returning file_descr-like values which weren't in the original sets) and correct initialisation of some blocks allocated with caml_alloc_small. (David Allsopp, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9073][#9073]], [[https://github.com/ocaml/ocaml/issues/9120][#9120]]: fix incorrect GC ratio multiplier when allocating custom blocks with caml_alloc_custom_mem in runtime/custom.c (Markus Mottl, review by Gabriel Scherer and Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/9209][#9209]], [[https://github.com/ocaml/ocaml/issues/9212][#9212]]: fix a development-version regression caused by [[https://github.com/ocaml/ocaml/issues/2288][#2288]] (Kate Deplaix and David Allsopp, review by Sébastien Hinderer and Gabriel Scherer )

- [[https://github.com/ocaml/ocaml/issues/9218][#9218]], [[https://github.com/ocaml/ocaml/issues/9269][#9269]]: avoid a rare wrong module name error with "-annot" and inline records. (Florian Angeletti, review by Gabriel Scherer, report by Kate Deplaix)

- [[https://github.com/ocaml/ocaml/issues/9261][#9261]]: Fix a soundness bug in Rec_check, new in 4.10 (from [[https://github.com/ocaml/ocaml/issues/8908][#8908]]) (Vincent Laviron, review by Jeremy Yallop and Gabriel Scherer)
      



* Luv — cross-platform concurrent I/O: a binding to libuv
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/luv-cross-platform-concurrent-i-o-a-binding-to-libuv/5145/1

** Anton Bachin announced


I am pleased to announce the first release of [[https://github.com/aantron/luv][**Luv**]], a binding to [[http://github.com/libuv/libuv][libuv]]. libuv is the
cross-platform C library inside Node.js that does I/O, wraps system calls, and drives Node's main loop.

#+begin_src ocaml
let () =
  let timer = Luv.Timer.init () |> Stdlib.Result.get_ok in
  ignore (Luv.Timer.start timer 1000 (fun () ->
    print_endline "Hello, world!"));

  print_endline "Waiting...";
  ignore (Luv.Loop.run ())
#+end_src

https://github.com/aantron/luv

Luv exposes sockets, files, subprocesses, FS events, and many other OS APIs. Indeed, Luv is an independent
alternative to the standard [[https://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html][~Unix~]], and does not depend on ~Unix~. The easiest way to get an idea of all that
is available is to quickly scroll through the [[https://aantron.github.io/luv/luv/index.html#api-reference][list of modules in the API docs]].

You are invited to glance through all of Luv's documentation:

- [[https://github.com/aantron/luv][Project page]]
- [[https://aantron.github.io/luv/][User guide]]
- [[https://aantron.github.io/luv/luv/index.html#api-reference][API reference]]
- [[https://github.com/aantron/luv/tree/master/example][Examples]], which are discussed in the guide...
- ...and the [[http://docs.libuv.org/en/v1.x/][documentation of libuv]]

libuv is focused primarily on [[https://aantron.github.io/luv/basics.html#event-loops][event-driven programming]], which makes it similar to Async or Lwt. However, it
does not offer a promise data type — the API is written in terms of callbacks.

libuv also supports [[https://aantron.github.io/luv/threads.html][multithreading]] and [[https://aantron.github.io/luv/processes.html][multiprocessing]]. In particular, libuv allows running
multiple event loops in multiple threads, which makes it a ready candidate for use with a multicore runtime.

A major advantage of libuv is that, because it is a core module of Node, it is [[https://github.com/libuv/libuv/blob/master/MAINTAINERS.md#readme][well-maintained]]
and supports [[https://github.com/libuv/libuv/blob/master/SUPPORTED_PLATFORMS.md#readme][many platforms]]. Luv inherits these properties.

Luv uses [[https://github.com/ocamllabs/ocaml-ctypes][ctypes]] to greatly minimize the amount of C code in the repo. A thorough [[https://github.com/aantron/luv/tree/master/test][test suite]] checks
return values, I/O effects, and interaction with the OCaml garbage collector and threading runtime. Luv vendors libuv
to avoid version conflicts, and, when you install Luv, it automatically builds its internal libuv.

One of the main goals of Luv is to be easy to integrate into larger projects. For example, there may be an
experimental version of Lwt based on it. To that end, Luv is as unopinionated as possible. It sticks closely to the
libuv API, making no unnecessary design decisions, and deviating only where changes are necessary to integrate with
OCaml, or where libuv has an awkward API due to the limitations of C.

And with all that... Happy systems programming :)
      



* Musings on extended pattern-matching syntaxes
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/musings-on-extended-pattern-matching-syntaxes/3600/57

** Continuing this old thread, Alexander Bashkirov announced


We reviewed this thread quite carefully along with features of other languages and summed up the results
[[https://github.com/bash-spbu/ways-of-pattern-matching-extending-overview][here]].

We also started an [[https://github.com/ocaml/RFCs/pull/12][active patterns RFC discussion]].
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[http://alan.petitepomme.net/cwn/][the archive]] or the [[http://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].

#+BEGIN_authorname
[[http://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
