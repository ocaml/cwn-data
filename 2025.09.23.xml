<cwn>
  <cwn_head>
    <cwn_date>2025.09.23</cwn_date>
    <cwn_prev>2025.09.16</cwn_prev>
    <cwn_next>2025.09.30</cwn_next>
    <cwn_date_text>September 16 to 23, 2025</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Introduction to the Dune build system, by OCamlPro</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/blog-introduction-to-the-dune-build-system-by-ocamlpro/17279/1</cwn_url>
      <cwn_who>OCamlPro announced</cwn_who>
      <cwn_what>
*Greetings Cameleers,*

We‚Äôve just released a new blog post: [OCaml Onboarding: Introduction to the Dune build system](https://ocamlpro.com/blog/2025_07_29_ocaml_onboarding_introduction_to_dune/)

This is a practical, compact guide for those starting their OCaml and Dune journey ‚Äî or helping others do so. Instead of diving into internals, we focus on what you need to know to get up and running with Dune confidently.

We walk through:
- How Dune thinks about builds and directories
- The role of dune files and static declarations
- The tooling one interacts with day-to-day

The post keeps things hands-on and beginner-focused, with just enough theory to make the practical bits stick. We end by circling back to ~dune init~ ‚Äî showing how understanding the basics makes the scaffolding tool far more intuitive.

üìù Read it on the [OCamlPro Blog](https://ocamlpro.com/blog/)

Perfect for sharing with colleagues or newcomers dipping their toes into OCaml and Dune.

As always, feedback welcome!
Until next time,
‚Äî The OCamlPro Team
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>memprof-limits (first official release): Memory limits, allocation limits, and thread cancellation, with interrupt-safe resources</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-memprof-limits-first-official-release-memory-limits-allocation-limits-and-thread-cancellation-with-interrupt-safe-resources/8135/3</cwn_url>
      <cwn_who>Guillaume Munch-Maccagnoni announced</cwn_who>
      <cwn_what>
I am pleased to announce the version ~0.3.0~ of the package ~memprof-limits~. The main contribution of this release is the *support for OCaml 5 with multiple parallel domains*.

Memprof-limits can henceforth be used to conveniently interrupt (CPU-bound) domains in your parallel computations, using /cancellation tokens/, with the support of features to ensure interrupt-safety and resource-safety.

As example of uses, plans are underway to use memprof-limits to ensure the resource-safety of user interrupts in the Rocq prover (eliminating a class of bugs) and to add tactics for portable timeouts (that count allocations rather than elapsed time).

- Read more: https://guillaume.munch.name/software/ocaml/memprof-limits.0.3.0/
- Report bugs and suggestions: https://gitlab.com/gadmm/memprof-limits
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>mlfront-shell - reference implementation of a build system</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-mlfront-shell-reference-implementation-of-a-build-system/17186/2</cwn_url>
      <cwn_who>jbeckford announced</cwn_who>
      <cwn_what>
There have been many improvements since the last update. Here are some of them:

1. The trace store (needed to not rebuild everything from scratch) has been implemented.
2. Build file ASTs are parsed, marshalled and put into a key-value directory (which can be shared or cached in CI).
3. Build keys are generated and used to protect sharing of the parsed AST.
4. A full walkthrough of ‚Äúbuilding‚Äù the 7zip executable from 7zip binary assets (it is more complicated than it sounds) is on the [documentation page](https://github.com/diskuv/dk?tab=readme-ov-file#using-the-build-tool-to-create-a-multi-platform-package)
5. An ~‚Äìautofix~ option to update build files with checksums, and allowing SHA1 checksum for local files (both are for eventual support of Meta‚Äôs watchman tool)
6. A new format for the JSON files (many functions versus one). The old format is deprecated.
7. Many many bug fixes, including specification updates.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Zanuda -- OCaml linter experiment</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-zanuda-ocaml-linter-experiment/11784/13</cwn_url>
      <cwn_who>Continuing this thread, Kakadu announced</cwn_who>
      <cwn_what>
Zanuda 2.0.0 with OCaml 5.3 support have hit opam.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>YOCaml, a framework for static site generator</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-yocaml-a-framework-for-static-site-generator/15393/9</cwn_url>
      <cwn_who>Xavier Van de Woestyne announced</cwn_who>
      <cwn_what>
*** Release ~2.5.0~
We are delighted to present the new release of YOCaml: ~2.5.0~!
As you can see, there have been a few intermediate versions since our last announcement. However, we have reached a new milestone: YOCaml can now be used seamlessly with an Applicative API (instead of the Arrow one), making many tasks much easier to express!

We have also finally taken the time to write [a tutorial that explains how to use YOCaml to create a complete blog](https://yocaml.github.io/tutorial), step by step, and our goal is to expand it over time to add more and more guides! (The documentation/guide generator (https://github.com/yocaml/yocaml-www is also written in YOCaml and gives an idea of what can be done fairly quickly.)

- [Repository](https://github.com/xhtmlboi/yocaml)
- [YOCaml packages](https://ocaml.org/packages/search?q=yocaml)
- [Complete release note](https://github.com/xhtmlboi/yocaml/releases/tag/v2.5.0)

We look forward to receiving your feedback! YOCaml is a free and collaborative project, so any contributions (including the guide) are more than welcome! We would also be DELIGHTED to see your creations with YOCaml!  

/Happy Hacking!/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Lwt.6.0.0~beta (direct-style, multi-domain parallelism)</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-lwt-6-0-0-beta-direct-style-multi-domain-parallelism/17283/1</cwn_url>
      <cwn_who>Rapha√´l Proust announced</cwn_who>
      <cwn_what>
After some feedback and some work, I'm happy to announce the release of ~lwt.6.0.0~beta00~ and ~lwt_direct.6.0.0~beta00~! (https://github.com/ocaml/opam-repository/pull/28558)

major CHANGES are:
- direct style mode (see [alpha release announce](https://discuss.ocaml.org/t/ann-lwt-6-0-0-alpha-direct-style/16972/32)): use ~await : 'a Lwt.t -> 'a~ to transform any promises into a simple value. This allows you to break out of the monad which makes it possible to use libraries previously incompatible with Lwt.
- multi-domain support: run separate schedulers in separate domains (some of the more advanced functions on Lwt are now domain-dependent, e.g., ~run_in_main~ becomes ~run_in_domain~ and takes one additional parameter)

Feedback is very welcome. Happy beta-testing and good luck with the parallel-programming!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>schm-ocaml</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-schm-ocaml/17293/1</cwn_url>
      <cwn_who>Florent Monnier announced</cwn_who>
      <cwn_what>
schm-ocaml provides a scheme-like syntax.

schm3 integrates nicely with the rescript-version that provides the ocaml syntax.

schm4 integrates with one of the later ocaml 4 versions, and tries to be accessible from .c

http://decapode314.free.fr/ocaml2/schm/

There is a tutorial:

http://decapode314.free.fr/ocaml2/schm/schm-tut.html

http://decapode314.free.fr/ocaml2/schm/dl/schm4-0.03.zip

The oo got lost in a computer crash.

So there is no oo.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>detri cmd</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-detri-cmd/17301/1</cwn_url>
      <cwn_who>Florent Monnier announced</cwn_who>
      <cwn_what>
There is now a fifth variant for detri:

http://decapode314.free.fr/ocaml/detris.html

This fifth one outputs .html, in-stead of console.

If you took a previous version for the console, it was already something you could do by-yourself easily rewriting the console esc-chars to html, but now there is a ready-made one.

(There is also a small tutorial, but it should be re-written,

http://decapode314.free.fr/ocaml/detri/tut/detri-tut.html

)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>seven ocaml tutorials</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-s-tut-seven-ocaml-tutorials/17302/1</cwn_url>
      <cwn_who>Florent Monnier announced</cwn_who>
      <cwn_what>
You will find seven new ocaml-tutorials on this page that I wrote recently:

http://decapode314.free.fr/ocaml2/blog/

It was not writen with a chat-bot, but you will maybe notice a difference in the style of writing, since I‚Äôm using a chat-bot.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Ortac/Wrapper: a new plugin for specification driven unit testing</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-ortac-wrapper-a-new-plugin-for-specification-driven-unit-testing/17304/1</cwn_url>
      <cwn_who>Charl√®ne_Gros announced</cwn_who>
      <cwn_what>
Hello everyone,

We, at Tarides, are excited to announce the release of a new plugin for ~ortac~: [Ortac/Wrapper](https://github.com/ocaml-gospel/ortac/tree/main/plugins/wrapper)!

This plugin is part of the Gospel project, a contract-based behavioural specification language for OCaml. ~ortac~ is a tool that converts an OCaml module interface with [Gospel](https://github.com/ocaml-gospel/gospel) specifications into code to check those specifications. There are various ways to check specifications, all provided by plugins, and this post announces the new plugin: Ortac/Wrapper!

This plugin is designed to generate a wrapped module that exposes the same interface as the original module but instruments all function calls with assertions corresponding to the Gospel specifications.
The main objective is to assist with unit testing. You provide the Gospel specification for your file, and Ortac will instrument it. When you run the unit tests on the wrapped version, if a specification is violated, Ortac will crash with an explicit error, telling you which portion of your code is incorrect and which specifications were violated.

This work has been started by Cl√©ment Pascutto during his PhD at LMF and Tarides https://theses.hal.science/tel-04696708v1.
I continued his work to support some Gospel features such as the ~old~ operator and models.

*** Installation

To install the Wrapper plugin, use the following command:
~opam install ortac-wrapper~

This will install the following OPAM packages:

- ~ortac-core.opam~ which provides the ~ortac~ command-line tool and the core functionalities used by all plugins,
- ~ortac-runtime.opam~ which provides the support library for the code generated by the Wrapper Ortac plugin,
- ~ortac-wrapper.opam~ which provides the Wrapper plugin for the ~ortac~ command-line tool.

**** To automatically generate dune files

If you need dune rules to integrate Ortac into your project, you can install the Dune plugin:
~opam install ortac-dune~
This will install the following OPAM packages:

- ~ortac-core.opam~ which provides the ~ortac~ command-line tool and the core functionalities used by all plugins,
- ~ortac-dune.opam~ which provides the Dune plugin for the ~ortac~ command-line tool.

*** Try it!

Let‚Äôs dive into a mini tutorial to see how the Ortac/Wrapper plugin can be used to enhance your unit testing with Gospel specifications. We‚Äôll walk through creating a simple polymorphic container type with limited capacity and see how to specify and test its behavior using Gospel.

**** 1- Define the type and models

First, we define a polymorphic container type ~'a t~ with Gospel specifications. This type will have a fixed capacity and a mutable list of contents.

#+begin_src ocaml
type 'a t
(*@ model capacity: int
	mutable model contents: 'a list
	with t
	invariant t.capacity > 0
	invariant List.length t.contents &lt;= t.capacity *)
#+end_src

Here, we define two models:

- ~capacity~: Represents the fixed size of the container.
- ~contents~: Represents the mutable list of elements currently stored in the container.

The invariants ensure that the capacity is always positive and that the contents list never exceeds the declared capacity.

**** 2- Specify function behavior

Next, we specify the behavior of functions that manipulate the type ~'a t~. We‚Äôll define a ~create~ function to initialize the container and an ~add~ function to insert elements into the container.

#+begin_src ocaml
val create: int -> 'a t
(*@ t = create c
	requires c > 0
	ensures t.capacity = c
	ensures t.contents = [] *)
val add: 'a t -> 'a -> unit
(*@ add t x
	modifies t.contents
	ensures t.contents = x :: (old t.contents) *)
#+end_src

Here the functions ~create~ and ~add~ are specified in Gospel.

- The ~create~ function requires the capacity ~c~ to be strictly positive and ensures that the model of the new container has the specified capacity and an empty list of contents.
- The ~add~ function modifies the contents of the container and ensures that the new element ~x~ is added to the list of contents.

**** 3- Define projection functions

To validate these specifications at runtime, you need to provide projection functions that link OCaml values to their Gospel models. Projection functions can be defined in two ways.

- Using the same name as the model.
- Using a different name, annotated with the attribute ~@@projection_for~ and the name of its Gospel model.

For our example, we define the projection functions as follows.

#+begin_src ocaml
val capacity : 'a t -> int
val to_list : 'a t -> 'a list [@@projection_for contents]
#+end_src

Where we encounter the two types of naming.

- The ~capacity~ function directly corresponds to the ~capacity~ model.
- The ~to_seq~ function is explicitly declared as the projection for the ~contents~ model using the ~@@projection_for~ attribute.

These projection functions are mandatory for the Wrapper plugin to instrument the specifications. If any projection function is missing, nothing will be generated and an error will be printed.

**** 4- Generate the wrapped version

Once you have both of the interface file annotated with Gospel and your implementation, you can start the generation.
If you have installed the ~ortac-dune~ package (which is recommended), you need to add the following in the dune file where you want to put the tests.

#+begin_example
(rule
 (alias runtest)
 (mode promote)
 (action
  (with-stdout-to
   dune.wrapper.inc
   (setenv
    ORTAC_ONLY_PLUGIN
    dune-rules
    (run ortac dune wrapper &lt;path to lib/lib.mli&gt;)))))
#+end_example

This will generate an additional Dune file called ~dune.wrapper.inc~ that you will need to include once created: ~(include dune.wrapper.inc)~. Also, add the name of the wrapped module to the ~libraries~ stanza of the test folder.

**** 5- Add unit tests

In order to test the ~Lib~ module, we can now simply write a program using the wrapped version. No need to specify the expected behaviour as the instrumentation will take care of that.

For example, if you run the following program:

#+begin_src ocaml
open Lib_wrapped
let () =
  let q = create 3 in
  add q 1;
  let q2 = create (-1) in
  add q2 1;
  ()
#+end_src

You will obtain the following result:

#+begin_example
File "lib.mli", line 8, characters 0-175:
Runtime error in function ~create'
  - the pre-condition
      `c &gt; 0'
    was violated.
Fatal error: exception Ortac_runtime.Error(_)
#+end_example

This process helps ensure that your code adheres to the specified behavior, making your unit tests more robust and informative.

*** Feel free to report

For more information here is the link of the [dedicated README](https://github.com/ocaml-gospel/ortac/blob/main/plugins/wrapper/README.md).
If you encounter any bugs or misunderstandings, please feel free to report them as an issue on [GitHub](https://github.com/ocaml-gospel/ortac/issues).

We hope this plugin will be useful to you and look forward to your feedback!

*** Acknowledgments

This work is partly founded by the ANR grant ANR-22-CE48-0013.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocaml.org blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://ocaml.org/events][Upcoming OCaml Events]]
- [[https://fearful-odds.rocks/blog/database-testing-for-chaufr][Database Testing in OCaml: From CRUD to Connection Pool Stress Testing]]
- [[https://roscidus.com/blog/blog/2025/09/20/ocaml-vulkan/][Vulkan graphics in OCaml vs C]]
- [[https://www.tunbury.org/2025/09/17/parquet-files/][Apache Parquet Files]]
- [[https://www.tunbury.org/2025/09/17/optimising-parquet-files/][Optimising Data Access in Parquet Files]]
- [[https://www.tunbury.org/2025/09/17/freebsd-unionfs/][FreeBSD unionfs deadlock]]
- [[https://www.dra27.uk/blog/platform/2025/09/17/late-to-the-party.html][A first foray into agentic coding]]
- [[https://blog.robur.coop/articles/mollymawk-autoconfig.html][Auto-configuration of MirageOS unikernels]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
