<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2018.12.25</cwn_date>
    <cwn_prev>2018.12.18</cwn_prev>
    <cwn_next>2019.01.01</cwn_next>
    <cwn_date_text>December 18 to 25, 2018</cwn_date_text>
    <cwn_extra_head>Merry Christmas!</cwn_extra_head>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Next feature for Logarion</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/next-feature-for-logarion/3071/1</cwn_url>
      <cwn_who>Orbifx announced</cwn_who>
      <cwn_what>
Getting ready for another release of [Logarion](https://logarion.orbitalfox.eu). I might be able to squeeze in another feature before that, what would you like to see?

https://poll.disroot.org/9Qc3j6SP59jF64pR

If you want something that is not there, write a comment here or there, or post on the [[mailto:logarion@lists.orbitalfox.eu][discussion list]].
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Blog post: Virtual Libraries in Dune</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/blog-post-virtual-libraries-in-dune/3073/1</cwn_url>
      <cwn_who>Rudi Grinberg announced</cwn_who>
      <cwn_what>
Dune is gaining a new feature called virtual libraries in the next release (1.7). It's a pretty interesting feature so I've written a blog post about it:

http://rgrinberg.com/posts/virtual-libraries/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>LSP, DAP protocols for language and debugger support</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/lsp-dap-protocols-for-language-and-debugger-support/3079/1</cwn_url>
      <cwn_who>Perry E. Metzger announced</cwn_who>
      <cwn_what>
As an FYI to the OCaml community:

Microsoft has for some time been pushing a standardized protocol for language servers (of which Merlin is an example), called (appropriately enough) the [Language Server Protocol](https://langserver.org/). The notion behind the LSP is to allow _any_ editor to be a good IDE for _any_ language provided that a language server exists for the language and that it (and the editor) both speak the LSP. LSP has taken off very quickly; there's now reasonable emacs, vim, vscode, etc. support for it.

It appears Microsoft is now also in the process of creating a new protool called the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/), which works to allow any editor or IDE to interface with any language specific debugger, provided both implement the protocol.

It might be nice if, over the long run, OCaml's tooling took advantage of the growing ecosystem these protocols provide. I recognize that this probably cannot happen very quickly, but it certainly is something interested people in the community should be aware of.
      </cwn_what>
      <cwn_who>Ryan Slade said</cwn_who>
      <cwn_what>
A LSP implementation for OCaml already exists:

https://github.com/freebroccolo/ocaml-language-server
      </cwn_what>
      <cwn_who>Louis Roch√© added</cwn_who>
      <cwn_what>
There are (at least) 3 LSP implementation for ocaml/reason actually:

- The one linked above
- https://github.com/jaredly/reason-language-server
- https://github.com/bryphe/merlin-language-server
      </cwn_what>
      <cwn_who>Perry E. Metzger then said</cwn_who>
      <cwn_what>
Yes, and there's the [Earlybird](https://github.com/hackwaly/ocamlearlybird) debug adapter. But so far as I can tell, these tools are not in wide use. It would probably be a good thing if, over time, using LSP and DAP became the default way that Merlin and the debuggers were interfaced to editors. (This might require some extensions to the protocols.)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>LablGtk 3.0.beta3</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2018-12/msg00062.html</cwn_url>
      <cwn_who>Jacques Garrigue announced</cwn_who>
      <cwn_what>
Here is a third beta release of Lablgtk3.

It includes support for GtkBuilder as a replacement to libglade, thanks
to the Matita people.

It is available for download at the usual location:\\
	http://lablgtk.forge.ocamlcore.org\\
	https://forge.ocamlcore.org/frs/download.php/1775/lablgtk-3.0.beta3.tar.gz

The opam package is on its way:\\
	https://github.com/ocaml/opam-repository/pull/13191

The code and bug reports are on GitHub\\
	https://github.com/garrigue/lablgtk/tree/lablgtk3  (for the lablgtk3 branch)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Working with bit-level data</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/working-with-bit-level-data/3094/1</cwn_url>
      <cwn_who>Anton Kochkov asked</cwn_who>
      <cwn_what>
I plan to implement bitfields support in [Cstruct](https://github.com/mirage/ocaml-cstruct) library. And I wonder on what syntax is best and probably an API, maybe there are already some good examples of OCaml libraries that work with bit-level data? If you ask - why not to just aggregate bits into bytes, there are two problems:
1. If you don't align bitfields, all members can be shifted across byte boundary to be read directly
2. Changing the way to read/write in case of different endianess

See https://github.com/mirage/ocaml-cstruct/issues/205 for more information.
      </cwn_what>
      <cwn_who>Anurag Soni suggested</cwn_who>
      <cwn_what>
Is https://github.com/xguerin/bitstring similar to what you are looking for?
      </cwn_what>
      <cwn_who>Anton Kochkov then said</cwn_who>
      <cwn_what>
Yes, it is similar, thanks.
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
