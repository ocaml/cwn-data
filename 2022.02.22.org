#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2022.02.15.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2022.03.01.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of February 15 to 22, 2022.

#+TOC: headlines 1


* OCAML goes Quantum computing
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/ocaml-goes-quantum-computing/9333/1

** Florian said


It seems that silently OCAML is now  entering the Quantum world.
It looks that the  Interpreter for "Twist"
[[https://scitechdaily.com/twist-mits-new-programming-language-for-quantum-computing/][New programming language for Quantum
computing]]
is made with OCAML:
[[https://github.com/psg-mit/twist-popl22][GitHub for Twist]]
      

** Anton Kochkov then added


Haskell has a nice package for quantum computing - Quipper. I recommend to take a look to it for inspiration as well:
- https://hackage.haskell.org/package/quipper-language
- http://www.mathstat.dal.ca/~selinger/quipper/
- https://arxiv.org/pdf/1304.3390.pdf
- https://arxiv.org/pdf/2105.03522.pdf (a new language that reuses linear types in the Haskell to represent quantum specifics during the Quipper type check)
      



* Layout Parsing and Nicely Formatted Error Messages
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/ann-layout-parsing-and-nicely-formatted-error-messages/9343/1

** Hbr announced


In a previous [[https://discuss.ocaml.org/t/my-way-from-lalr-parsing-to-combinator-parsing/7377][post]] I have
described my way from LALR parsing to combinator
parsing. Now I am more and more convinced that combinator parsing is really a
good and flexible way to write parsers. The new release 0.5.0 of `Fmlib` focuses
on layout parsing and nicely formatted error messages by using combinator
parsing.

The library can be installed via opam by ~opam install fmlib~. There is a [[https://github.com/hbr/fmlib][github
repository]] hosting the source code. The
[[https://hbr.github.io/fmlib/odoc/index.html][API]] can be found online. See also
a [[https://hbr.github.io/fmlib/odoc/fmlib_parse/parse.html][tutorial]] on combinator parsing.

*** Layout Parsing

Most programming languages express hierarchical structures by some kind of
parentheses. Algol like languages use ~begin~ ~end~, C like languages use curly
braces ~{~, ~}~ to enclose blocks of code. Since blocks can be nested inside
blocks, the hierarchical or tree structure is well expressed by the syntax.

For the human reader blocks are usually indented to make the hierarchical
structure graphically visible. Programming languages like *Haskell* and
*Python* ommit the parentheses and express the hierarchical structure by
indentation. I.e. the indentation is part of the grammar. This is pleasing to
the eye, because many parentheses can be ommitted.

The hierarchical structure in the following schematical source file is
immediately visible without the need of parentheses.

#+begin_example
    xxxxxxxxxxx
        xxx
        xxx
            xxxxxxx
    xxxxxxxx
        xxx
#+end_example

Lower level blocks are indented with respect to their parent block and siblings
at the same level are vertically aligned.

Because of this good readability configuration languages like yaml have
become very popular.

Unfortunately there are not many parsers available which support indentation
sensitivity. The library [[https://hbr.github.io/fmlib/odoc/fmlib_parse/Fmlib_parse/index.html][Fmlib]] has support to
parse languages whose grammar uses indentation to structure blocks hierarchically.

There are only 3 combinators needed to introduce layout parsing in combinator
parsing. Suppose that ~p~ is a combinator parsing a certain contruct. Then we
have

- ~indent 4 p~: Parse the construct described by ~p~ indented at least 4
  columns relative to its environment

- ~align p~: Parse the construct desribed by ~p~ aligned vertically with its
  siblings

- ~detach p~: Parse the construct described by ~p~ without any indentation or
  alignment restrictions

In order to parse a list of ~p~s vertically aligned and indented relative to its
environment by at least one column we just write

#+begin_src ocaml
    one_or_more (align p) |> indent 1
#+end_src

and parse a structure with the schematic layout

#+begin_example
    xxxxxxxx

        pppppppp

        pppppp

        pppp

    xxxxx
#+end_example

*** User Frienly Error Messages

It is important to for a parser writer to make syntax error messages user
friendly. [[https://hbr.github.io/fmlib/odoc/fmlib_pretty/Fmlib_pretty/index.html][Fmlib]] has some support to write
friendly error messages. There is the operator ~<?>~ copied from the Haskell library ~parsec~ which helps to equip
combinators with descriptive error message in case they fail to parse the construct successfully.

At the end of a failed parsing, the syntax (or semantic) errors have to be
presented to the user. Suppose there is a combinator parser for a yaml like
structure. The library writes by default for you error messages in the form

#+begin_example
    1 |
    2 | names:
    3 |      - Alice
    3 |      - Bob
    4 |
    5 |   category: encryption
          ^

    I have encountered something unexpected. I was
    expecting one of

        - at 3 columns after

            - sequence element: "- <yaml value>"

        - at 2 columns before

            - key value pair: "<key>: <yaml value>"

        - end of input
#+end_example

The raw information (line and column numbers, individual expectations, failed
indentation or alignment expectation) is available as well so that you can
present the error messages to the user in any different form.

There is also a component [[https://hbr.github.io/fmlib/odoc/fmlib_pretty/Fmlib_pretty/index.html][Fmlib_pretty]] in
the library for pretty printing any ascii text.
      



* ptime 1.0.0 and mtime 1.4.0
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/ann-ptime-1-0-0-and-mtime-1-4-0/9344/1

** Daniel BÃ¼nzli announced


It's my pleasure to announce new releases of ptime and mtime. Ptime and mtime provide types and clocks for POSIX and
monotonic time.

These releases change the JavaScript support strategy for clocks by implementing the primitives in pure JavaScript
and linking them via ~js_of_ocaml~.

This means that both the ~ptime.clock.jsoo~ and ~mtime.clock.jsoo~ libraries no longer exist[^1]. Instead simply use
the ~ptime.clock.os~ or ~mtime.clock.os~ libraries like you would do for your regular programs.

By side effect, the packages also no longer depend on any of  ~js_of_ocaml~'s packages.

Thanks to Hugo Heuzard (@hhugo) for suggesting and implementing these changes. Thanks also to Jonah Beckford for his
Windows build patches.

Other changes are described in the release notes for [[https://github.com/dbuenzli/ptime/blob/master/CHANGES.md#v100-2022-02-16-la-forclaz][~ptime~]] and [[https://github.com/dbuenzli/mtime/blob/master/CHANGES.md#v140-2022-02-17-la-forclaz-vs][~mtime~]].

Home pages:  [[https://erratique.ch/software/ptime][ptime]], [[https://erratique.ch/software/mtime][mtime]]

Docs & manuals: [[https://erratique.ch/software/ptime/doc][ptime]], [[https://erratique.ch/software/mtime/doc][mtime]] or
~odig doc ptime mtime~

Install: ~opam install ptime mtime~

[^1]: I had intended to only deprecate these libraries by ~warning~ in the ~META~ files and requiring the replacement library but it seems the warning won't show up in many contexts including ~dune~ builds. So a breaking change it is.
      



* Timedesc 0.6.0
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/ann-timedesc-0-6-0/9349/1

** Darren announced


I am pleased to announce the release of [[https://github.com/daypack-dev/timere][Timedesc]] 0.6.0.

Timedesc is a very comprehensive date time handling library with good support of time zone.

*** Features:

- Timestamp and date time handling with platform independent time zone support
  - Subset of the IANA time zone database is built into this library
- Supports Gregorian calendar date, ISO week date, and ISO ordinal date
- Supports nanosecond precision
- ISO8601 parsing and RFC3339 printing

*** Changes

This release adds a fair number of quality of life improvements and additional features. Many thanks to @glennsl for
the suggestions and feedback!

The most important sections of the changelog are as follows:

- Main breaking changes:
  - Changes in ISO week date functions (shorting label for arguments, quality of life changes)
  - Removed ~_date~ suffix in names of ~Date.Ymd_date~ and ~Date.ISO_ord_date~
- Added "partial date" modules with ISO8601 parsing and printing facilities
  - ~ISO_week~
  - ~Ym~
- Added additional ISO8601 printing facilities for all three calendar systems
  - ~Date.Ymd.pp/to_iso8601~ (these are just aliases to the RFC3339 printers)
  - ~Date.ISO_week_date.pp/to_iso8601~
  - ~Date.ISO_ord.pp/to_iso8601~
- Added additional ISO8601 parsing facilities for all three calendar systems
  - ~Date.Ymd.of_iso8601[_exn]~
  - ~Date.ISO_week_date.of_iso8601[_exn]~
  - ~Date.ISO_ord.of_iso8601[_exn]~
- Added additional comparison functions to ~Date~
  - ~lt~, ~le~, ~gt~, ~ge~, ~compare~
- Added arithemtic functions to ~Date~
- Added ~pp/to_iso8601~ functions as aliases to the rfc3339 functions to ~Timedesc~
- Patched ISO8601 parsers and RFC3339/ISO8601 printers to handle second level time zone offset
  - Rare occurrence in tzdb but picked up by some new tests
      



* OCaml from the Very Beginning now free in PDF and HTML formats
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/ocaml-from-the-very-beginning-now-free-in-pdf-and-html-formats/9361/1

** John Whitington announced


Thanks to a grant from the [[https://ocaml-sf.org/][OCaml Software Foundation]], I am able to release my book [[https://ocaml-book.com][OCaml
from the Very Beginning]] at no cost in its existing PDF format, and in a new HTML format too.

You can find it here:
[[https://johnwhitington.net/ocamlfromtheverybeginning/][https://johnwhitington.net/ocamlfromtheverybeginning/]].

The paperback and Kindle versions continue to be available from Amazon as before.

The book has recently been updated to make it ready for OCaml 4.14 which involved only minor changes to error
handling and warnings. I have also opened the [[https://github.com/johnwhitington/mlbook][source]].
      



* Dune 3.0.0
:PROPERTIES:
:CUSTOM_ID: 6
:END:
Archive: https://discuss.ocaml.org/t/ann-dune-3-0-0/9374/1

** Rudi Grinberg announced


On behalf of the dune team, Iâm delighted to announce the availability of dune 3.0.

The team has been working on this release for over 6 months, and thereâs a bunch of new work to report. Iâll only
highlight the some of the interesting new developments:

- The watch mode has been rewritten from scratch to be faster and more scalable. We also no longer rely on any 3rd party tools such as fswatch. If any of you still have a dune workspace dune is still struggling with, we cannot wait to hear from you.

- The watch mode now also starts an RPC server in the background. This RPC protocol is going to be the basis for other tools to interact with dune. Watch out for announcement on the LSP side to see how weâll be making use of it to improve the editing experience.

- The dune cache has been rewritten as well. It is now simpler and more reliable. There are still some components missing, such as distribution of the artifacts on the network. Nevertheless, we welcome you all to experiment with this feature and give us feedback.

- Weâve addressed one of our oldest feature requests: high level rules for ctypes projects. This feature is still experimental, so we need feedback from real world projects before declaring it as mature.

Of course, there are many other fixes, enhancements, and only a few breaking changes in this release. We hope you
have an easy time upgrading.

Happy Hacking.

/Editorâs note: for the full changelog, please follow the archive link above./
      



* Blog Post "2021 at OCamlPro"
:PROPERTIES:
:CUSTOM_ID: 7
:END:
Archive: https://discuss.ocaml.org/t/blog-post-2021-at-ocamlpro/9390/1

** Fabrice Le Fessant announced


We just published a review of what OCamlPro did in 2021:

https://www.ocamlpro.com/blog/2022_01_31_2021_at_ocamlpro

A lot of OCaml, but also some Rust, Cobol, Solidity, and a lot of Formal Verification! OCamlPro is always looking for
skilled OCaml developers to hire, so if you are interested, contact us at contact@ocamlpro.com
      



* Packstream 0.1
:PROPERTIES:
:CUSTOM_ID: 8
:END:
Archive: https://discuss.ocaml.org/t/ann-packstream-0-1/9392/1

** Tomasz BaraÅski announced


I have a pleasure to announce the release of [[https://github.com/tomob/packstream][Packstream]] 0.1.

Packstream is a library to parse/serialize [[https://7687.org/packstream/packstream-specification-1.html][Packstream binary
format]].

This is the initial release. It is functional but very very limited in scope. It allows parsing a binary stream into
a Packstream datatype and serializing the datatype into a binary stream.
      



* OCaml 4.14.0, first beta release
:PROPERTIES:
:CUSTOM_ID: 9
:END:
Archive: https://discuss.ocaml.org/t/ocaml-4-14-0-first-beta-release/9396/1

** octachron announced


The release of OCaml 4.14.0 is close.

The set of new features has been stabilized, and most opam packages already
work with this release. After two alpha releases, we have created a first
beta version to help you update your softwares and libraries ahead of the
release.

If you find any bugs, please report them at:

  https://github.com/ocaml/ocaml/issues

The full release of OCaml 4.14.0 is currently expected for the middle of March.

Compared to the last alpha, we have  a last minute correction for one of the new
function in the Seq module, some documentation improvements, few configuration
and internal tweaks.

*** Installation instructions
The base compiler can be installed as an opam switch with the following commands

#+begin_example
opam update
opam switch create 4.14.0~beta1 --repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_example
With opam 2.1, the previous command line can be simplified to
#+begin_example
opam update
opam switch create 4.14.0~beta1
#+end_example
If you want to tweak the configuration of the compiler, you can switch to the option variant with:

#+begin_example
opam update
opam switch create <switch_name> --packages=ocaml-variants.4.14.0~beta1+options,<option_list>
--repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_example
or with opam 2.1:
#+begin_example
opam update
opam switch create <switch_name> ocaml-variants.4.14.0~beta1+options <option_list>
#+end_example

where ~<option_list>~ is a comma separated list of ~ocaml-option-*~ packages. For instance, for a flambda and
no-flat-float-array switch:
#+begin_example
opam switch create 4.14.0~beta1+flambda+nffa ocaml-variants.4.14.0~beta1+options ocaml-option-flambda
ocaml-option-no-flat-float-array
#+end_example
All available options can be listed with ~opam search ocaml-option~.

The source code for the beta is also available at these addresses:

- https://github.com/ocaml/ocaml/archive/4.14.0-beta1.tar.gz
- https://caml.inria.fr/pub/distrib/ocaml-4.14/ocaml-4.14.0~beta1.tar.gz

*** Changes compared to the last alpha

The full list of changes for OCaml 4.14 is available at https://github.com/ocaml/ocaml/blob/4.14/Changes

**** Standard library

- *additional fixes* [[https://github.com/ocaml/ocaml/issues/10583][10583]], +[[https://github.com/ocaml/ocaml/issues/10998][10998]]: Add over 40 new functions in Seq. (FranÃ§ois Pottier and Simon Cruanes, review by NicolÃ¡s Ojeda BÃ¤r, Daniel BÃ¼nzli, NaÃ«la Courant, Craig Ferguson, Wiktor Kuchta, Xavier Leroy, Guillaume Munch-Maccagnoni, RaphaÃ«l Proust, Gabriel Scherer and Thierry Martinez)

**** Documentation

- [[https://github.com/ocaml/ocaml/issues/10397][10397]]: Document exceptions raised by Unix module functions on Windows (Martin Jambon, review by Daniel BÃ¼nzli, David Alsopp, Damien Doligez, Xavier Leroy, and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/10794][10794]]: Clarify warning 57 (Ambiguous or-pattern variables under guard) (Wiktor Kuchta, review by Gabriel Scherer)

**** Build system

- [[https://github.com/ocaml/ocaml/issues/10828][10828]] Build native-code compilers on OpenBSD/aarch64
  (Christopher Zimmermann)

- [[https://github.com/ocaml/ocaml/issues/10835][10835]] Disable DT_TEXTREL warnings on x86 32 bit architecture by passing -Wl,-z,notext in mksharedlib and mkmaindll. Fixes relocation issues, reported in [[https://github.com/ocaml/ocaml/issues/9800][9800]], making local patches in Debian, Alpine, and FreeBSD superfluous. (Hannes Mehnert with Kate Deplaix and StÃ©phane Glondu, review by Xavier Leroy)

**** Code generation

- [[https://github.com/ocaml/ocaml/issues/10719][10719]]: Ensure that build_apply respects Lambda.max_arity
  (Stephen Dolan, review by Xavier Leroy)

**** Internal/compiler-libs

- *additional fixes* [[https://github.com/ocaml/ocaml/issues/10718][10718]], +[[https://github.com/ocaml/ocaml/issues/11012][11012]]: Add "Shape" information to the cmt files. Shapes are an abstraction of modules that can be used by external tooling to perform definition-aware operations. (Ulysse GÃ©rard, Thomas Refis and Leo White, review by Florian Angeletti)
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
