<?xml version="1.0" encoding="UTF-8"?>
<cwn>
	<cwn_head>
		<cwn_date>2008.06.10</cwn_date>
		<cwn_prev>2008.06.03</cwn_prev>
		<cwn_next>2008.06.17</cwn_next>
		<cwn_date_text>June 03 to 10, 2008</cwn_date_text>
	</cwn_head>
	<cwn_body>
		<cwn_entry>
			<cwn_title>OCaml NAE release cf-0.10, nx-0.0 and iom-0.4</cwn_title>
			<cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/14abc2c0900cee63#</cwn_url>
			<cwn_who>James Woodyatt announced</cwn_who>
			<cwn_what>
My "OCaml Network Application Environment" project is not abandoned. I'm just
not as fast as we would like at producing maintenance releases when the
compiler system changes break my code. Sorry about that. Anyway, I have made
some minor updates and pushed out a new set of release files. Here are the
highlights...

	&lt;http://sourceforge.net/projects/ocnae&gt;

There's lots more unreleased in CVS, in case anyone wants to go peeking at it.
I've just released the relatively stable stuff.

===== OCaml NAE Core Foundation (cf) library =====

This distribution is the Objective Caml Network Application Environment (NAE)
Core Foundation library, which is a collection of miscellaneous extensions to
the Objective Caml standard library.

Highlighted features include:

- Functional streams and stream processors (extended).
- Functional bootstrapped skew-binomial heap.
- Functional red-black binary tree (associative array).
- Functional sets based on red-black binary tree.
- Functional real-time catenable deque.
- Functional LL(x) parsing using state-exception monad.
- Functional lazy deterministic finite automaton (DFA).
- Functional lexical analyzer (using lazy DFA and monadic parser).
- Functional substring list manipulation (message buffer chains).
- Gregorian calendar date manipulation.
- Standard time manipulation.
- System time in Temps Atomique International (TAI).
- Unicode transcoding.
- Universal resource identifier (URI) manipulation.

===== OCaml NAE Network Extensions (nx) library =====

This distribution is the Objective Caml Network Application Environment (NAE)
"Network Extensions" library, which is a set of low-level interfaces designed
for advanced network programming.

Highlights include...

- Extended socket interface (supports more options, and UDP w/multicast).
- I/O event multiplexing (with Unix.select).

===== OCaml NAE Reactive I/O Monad (iom) library =====

This distribution is the Objective Caml Network Application Environment (NAE)
Reactive I/O Monad library, which implements I/O monad functions designed to
facilitate writing of concurrent, reactive, single-threaded network
application services in a functional style.

Note: see the ISSUES file for a list of open problems in this release.

===== Required Components =====

This library requires the following external components:

- Objective Caml (v3.10.0 or newer)
- Findlib (tested with v1.1.2p1)
			</cwn_what>
		</cwn_entry>
		<cwn_entry>
			<cwn_title>Ocamlbuild: could help embedding Ocaml code into shared object?</cwn_title>
			<cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/b6d68f592c6e3569#</cwn_url>
			<cwn_who>Matthieu Dubuget asked and Romain Bardou answered</cwn_who>
			<cwn_what>
&gt; I often deliver my work as shared objects (DLL, in fact, because I'm
&gt; stuck with Windows at work).
&gt; 
&gt; I would like to have ocamlbuild take care of this, but I don't know
&gt; exactly how to do it?
&gt; 
&gt; The idea would be to split the work in two separate rules.
&gt; 
&gt; The first rule generates a shared object from the Objective Caml code:
&gt; 
&gt; rule "mloo &amp; cmx* -&gt; native.oo.o"
&gt;     ~dep:"%.mloo"
&gt;     ~prod:"%.native.oo.o"
&gt;     action_for_nativecode
&gt; 
&gt; rule "mloo &amp; cmo* -&gt; byte.oo.o"
&gt;     ~dep:"%.mloo"
&gt;     ~prod:"%.byte.oo.o"
&gt;     action_for_bytecode
&gt; 
&gt; The actions should return commands with A "-output-obj". But I do not
&gt; know how to write them. It would need a mechanism similar to the one
&gt; used for mlpack. For example, one .mloo file listing the ocaml files to
&gt; link into the output object. Dynamic dependencies are to be generated
&gt; from the content of the .mloo file.
&gt; 
&gt; Unfortunately, I have no idea how to write that?
&gt; 
&gt; The second rule would generate a shared object from the .o files.
&gt; Maybe the current clib is enough? I have to add a flag to link
&gt; the runtime engine by adding -lasmrun -lm -ldl (-lm and -ldl being
&gt; deduced from the output of ocaml* -config).
&gt; 
&gt; Am I looking in the right direction?

I know nothing about DLLs and OCaml but if I understand correctly, you need
the following.

1) How to parse a file similar to a .mllib file in a plug-in. There is an
example in the Ocamlfind plug-in on the wiki:

http://brion.inria.fr/gallium/index.php/Using_ocamlfind_with_ocamlbuild#Source

You want to look at the find_packages function.

2) How to generate dynamic dependencies. This is done by calling the second
argument of the function you give to the rule function. This is also explained
in the wiki:

http://brion.inria.fr/gallium/index.php/Making_plugins#Dynamic_dependencies

I hope it helps.
			</cwn_what>
		</cwn_entry>
		<cwn_entry>
			<cwn_title>ocamlopt generates binaries with executable stacks</cwn_title>
			<cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/761a37673bd9ebcc#</cwn_url>
			<cwn_who>Richard Jones announced</cwn_who>
			<cwn_what>
I posted a patch which should fix the issue that ocamlopt generates
binaries with executable stacks:

 http://caml.inria.fr/mantis/view.php?id=4564

Previously discussed on the list here:

 http://caml.inria.fr/pub/ml-archives/caml-list/2006/11/2678e935e05e0298cc2e5352b966c262.en.html

However this patch affects every assembly target, far more than I
could possibly test.  Could people using OCaml on non-Linux platforms
have a look at the patch, or even test it for me?
			</cwn_what>
		</cwn_entry>
	</cwn_body>
</cwn>