<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2006.08.22</cwn_date>
    <cwn_prev>2006.08.15</cwn_prev>
    <cwn_next>2006.08.29</cwn_next>
    <cwn_date_text>August 15 to 22, 2006</cwn_date_text>
  </cwn_head>
  <cwn_body>
	<cwn_entry>
	  <cwn_title>OCaml for 64 bit machines</cwn_title>
	  <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/476914d476777d41/21005a98d70ebada#21005a98d70ebada</cwn_url>
	  <cwn_who>Shivkumar Chandrasekaran asked and Xavier Leroy answered</cwn_who>
	  <cwn_what>
&gt; I know that OCaml is supported on 64 bit AMD/Intel machines running 
&gt; Linux (at least). Are there any plans to support OCaml on the new 64 bit 
&gt; Intel Apple machines running Mac OS X? 

I would expect the port to be straigthforward, but I'll need to get 
access to such a machine to see whether the application binary 
interface differs between Linux/AMD64 and MacOSX/AMD64.  So, the 
answer to your question is: MacOSX/AMD64 will be supported at some 
point, but I can't say when. 
&gt; PS: I believe there is no support for 64 bit PPC machines. Is that still 
&gt; true? 

I did a MacOSX/PPC64 port a few months ago.  That will be released as 
part of 3.10, or you can give it a try now using the CVS trunk 
sources.
	  </cwn_what>
	</cwn_entry>
	<cwn_entry>
	  <cwn_title>map implementation question</cwn_title>
	  <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/88d2d6b32313f8e1/75edcf97f915bb75#75edcf97f915bb75</cwn_url>
	  <cwn_who>Brian Hurt asked and Xavier Leroy answered</cwn_who>
	  <cwn_what>
&gt; I was just looking at the map.ml implementation, and noticed that the 
&gt; logic for when to do a rotation was: 
&gt; &gt;       if hl &gt; hr + 2 then begin 
&gt; 
&gt; Isn't this supposed to be: 
&gt;     if hl &gt;= hr + 2 then begin 
&gt; 
&gt; ?  The latter will cause more rotations, but keep the tree more 
&gt; balanced.  The worst-case access of the &gt;= version is log base 3/2, 
&gt; while the &gt; is log base 4/3, which means that the &gt;= will be about 41% 
&gt; (log(3/2)/log(4/3) ~ 1.41).  Both are correct in that they return the 
&gt; right answer and are still O(log(N)) performance, it's a question of 
&gt; performance of looking up an element in the tree vr.s the cost of 
&gt; inserting an element into the tree. 
&gt; 
&gt; Was there a reason it was done this way, or is this a (minor) bug?

No, it was a conscious decision to use height-balanced binary trees 
with an height imbalance of at most 2, rather than at most 1 as in 
standard AVL trees.  As you note, log(N) access times are still 
guaranteed, and it's a tradeoff between lookup time vs. rebalancing time. 
Light experimentation suggested that imbalance &lt;= 2 is globally more 
efficient than imbalance &lt;= 1.  Didn't try with larger imbalance bounds. 
This said, red-black trees would probably work faster anyway, but I'll 
let the algorithm experts on this list comment. 
	  </cwn_what>
	<cwn_who>j h woodyatt then added</cwn_who>
	<cwn_what>
My experience trying to tweak the red-black trees in the Cf library   
of OCaml NAE so they perform globally better than the height-balanced   
trees in the standard library has been mixed.  Some functions perform   
marginally better, but others are worse-- sometimes substantially   
worse, and I don't think there's any way around it.  (It doesn't help   
that a lot of my exercises reveal that my binary set operations need   
improvement, but there are other places where there's simply nothing   
to do.  I'll get around to fixing the binary set operators someday,   
before my next release.) 
By the way, Xavier is very correct: that "imbalance &lt;= 2" thing is   
utterly brilliant.  I'm pretty sure my red-black trees would smoke   
the standard library if it weren't for that. 

The result is that I recommend using my red-black trees only when you   
are either 1) using the other facilities in the Cf library that are   
integrated well with them, e.g. Cf_seq and such, or 2) using them in   
a [currently hypothetical] case where you have compared the   
performance with the standard library and it makes a valuable   
difference to get 15% more CPU (or one less field per tree node) out   
of your tree algorithm.
	</cwn_what>
	</cwn_entry>
	<cwn_entry>
	  <cwn_title>Camomile 0.7.1</cwn_title>
	  <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/43c1c511426df259/8db41274a5838ea4#8db41274a5838ea4</cwn_url>
	  <cwn_who>Yoriyuki Yamagata announced</cwn_who>
	  <cwn_what>
I'm pleased to announce Camomile-0.7.1, a new version of a comprehensive 
Unicode Library for OCaml. 
http://prdownloads.sourceforge.net/camomile/camomile-0.7.1.tar.bz2 

In 0.7.0, CamomileLibrary.Main module also defines Camomile module. 
When Main module is linked, this makes Camomile module try to load 
data files from default configurations.  This causes, for example, 
clean installation fail.  0.7.1 moves Camomile modules to 
CamomileLibrary.Default.Camomile to solve this problem.
	  </cwn_what>
	</cwn_entry>
	<cwn_entry>
	  <cwn_title>question about caml_get_public_method</cwn_title>
	  <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/db88604a9d6e6ff9/b1e58123d7f1463a#b1e58123d7f1463a</cwn_url>
	  <cwn_who>Michael Wohlwend asked and Jacques Garrigue answered</cwn_who>
	  <cwn_what>
&gt; if I want to connect a c++ method to a method of an ocaml class, I can 
&gt; choose between: 
&gt; a) in the initializer of the ocaml class use register_value to register a 
&gt; method (like self#some_method) and then calling an external function which 
&gt; caches the registered value and calls that method 
&gt; or 
&gt;
&gt; b) calling an external function with the ocaml object as argument and then  
&gt; use caml_get_public_method, cache the method-id of the callback methods and 
&gt; use those to make the callback. 
&gt;
&gt; Is this just a matter of taste which one to use? 

The second approach is going to be slightly simpler (no need to split
registration code between ocaml and C++, and the method ids do not
depend on the object/class.) Note that you don't really need to cache
the method itself, as caml_get_public_method is really fast.
You can also generate the method ids beforehand, avoiding need for any
cacheing. Here is a tool to do that.
http://camlcvs.inria.fr/cgi-bin/cvsweb/bazar-ocaml/lablGL/src/var2def.ml?rev=1.9
The 1st approach should work too.
	  </cwn_what>
	</cwn_entry>
</cwn_body>
</cwn>