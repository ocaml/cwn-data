<cwn>
  <cwn_head>
    <cwn_date>2024.10.29</cwn_date>
    <cwn_prev>2024.10.22</cwn_prev>
    <cwn_next>2024.11.05</cwn_next>
    <cwn_date_text>October 22 to 29, 2024</cwn_date_text>
    <cwn_extra_head></cwn_extra_head>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>HOL Light released to OPAM</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-hol-light-released-to-opam/15488/1</cwn_url>
      <cwn_who>Juneyoung Lee announced</cwn_who>
      <cwn_what>
The HOL Light interactive theorem prover written by John Harrison is released to OPAM as a package. Its first new version available on OPAM is 3.0.
It now provides ~hol.sh~ which is a script that will launch an OCaml REPL that enables interactive theorem proving. Combined with a VSCode plugin for HOL Light, this gives a nice theorem proving experience..! For more details, please visit:
- The website: https://hol-light.github.io/
- The main repo: https://github.com/jrh13/hol-light/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Could we add a tiny OCaml interpreter to Numworks graphical calculators?</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/could-we-add-a-tiny-ocaml-interpreter-to-numworks-graphical-calculators/7652/14</cwn_url>
      <cwn_who>Deep in this thread, Lilian Besson announced</cwn_who>
      <cwn_what>
So after a few hours of work, we've successfully ported the OMicroB Virtual Machine for OCaml to the Numworks calculator :tada: ! See [this part of our discussion on GitHub](https://github.com/stevenvar/OMicroB/issues/36#issuecomment-2432041168), if anyone is curious.

But we're far away from being done! Indeed, I want to be able to interpret *on the calculator* some OCaml line of code / or entire file.
I know it's probably going to be hard, if not entirely impossible, but hey we've at least progressed a bit in this direction! Thanks @borisd again for the suggestion!
@Vertmo is helping me on this issue, thanks to him.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>opam 2.3.0~beta2</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-opam-2-3-0-beta2/15496/1</cwn_url>
      <cwn_who>Kate announced</cwn_who>
      <cwn_what>
We're happy to announce the second beta release of opam 2.3.0.

As we're closing on the final release of opam 2.3.0, we'd be happy for people to test this beta and report any regression.

*** What's new?

This release consists mostly in one regression fix compared to 2.3.0~beta1:

- Fix a regression in the detection of the current terminal size that leads to opam output that tries to fit itself into 80 columns regardless of the current terminal size ([#6243](https://github.com/ocaml/opam/issues/6243))

A couple of other improvements were made.
:open_book: You can read our [blog post](https://opam.ocaml.org/blog/opam-2-3-0-beta2/) for more information, and for even more details you can take a look at the [release note](https://github.com/ocaml/opam/releases/tag/2.3.0-beta2) or the [changelog](https://github.com/ocaml/opam/blob/2.3.0-beta2/CHANGES).

*** Try it!

The upgrade instructions are pretty much the same:

For Unix systems
#+begin_example
bash -c "sh &lt;(curl -fsSL https://opam.ocaml.org/install.sh) --version 2.3.0~beta2"
#+end_example
or from PowerShell for Windows systems
#+begin_example
Invoke-Expression "&amp; { $(Invoke-RestMethod https://opam.ocaml.org/install.ps1) } -Version 2.3.0~beta2"
#+end_example

Please report any issues to [the bug-tracker](https://github.com/ocaml/opam/issues).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Editors dev-meeting #4, Thu. 31th: Search by type √† la Sherlodoc üïµÔ∏è</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-editors-dev-meeting-4-thu-31th-search-by-type-a-la-sherlodoc/15507/1</cwn_url>
      <cwn_who>vds announced</cwn_who>
      <cwn_what>
We are organizing the next public dev-meeting on next Thursday, the 31th of October at 5pm CEST (we have a local speaker). Whether you are a long time maintainer, an occasional contributor, a new comer, or simply a curious passer-by, please feel free to attend!

:sparkles: For this session,  @xvw is going to present a new Merlin feature: an alternative to polarity search that can search for values in the environment with a syntax similar as the one of the amazing [Sherlodoc](https://doc.sherlocode.com/).

https://global.discourse-cdn.com/flex020/uploads/ocaml/original/2X/2/2616c436ecefca9526d1f8bc5d106faa90c5219a.gif

:clipboard: Meeting agenda:

- A tour-de-table to allow the participants that wish to do so to present themselves and mention issues / prs they are interested in.
- Talk and Q&amp;A
- Discuss issues and pull requests that were tagged in advance or mentioned during the tour-de-table.

We‚Äôre looking forward to meeting you!

Meeting link: [meet.google.com/ncb-mnmp-kmk](meet.google.com/ncb-mnmp-kmk)

Previous meeting notes are available in [Merlin‚Äôs repository wiki ](https://github.com/ocaml/merlin/wiki/Public-dev%E2%80%90meetings).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Dune dev meeting</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-dune-dev-meeting/14994/15</cwn_url>
      <cwn_who>Etienne Marais announced</cwn_who>
      <cwn_what>
We will hold our regular Dune dev meeting tomorrow, on *Wednesday, October, 30th at 16:00 CET.* As usual, the session will be one hour long.

Whether you are a maintainer, a regular contributor, a new joiner or just curious, you are welcome to join: these discussions are opened! The goal of these meetings is to provide a place to discuss the ongoing work together and synchronise between the Dune developers :speech_balloon:  

*** :calendar: Agenda

The agenda is available on the[ meeting dedicated page](https://github.com/ocaml/dune/wiki/dev-meeting-2024-10-30). Feel free to ask if you want to add more items in it.

*** :computer: Links

- Meeting link:[ zoom](https://us06web.zoom.us/j/85096877776?pwd=cWNhU1dHQ1ZNSjZuOUZCQ0h2by9Udz09)
- Calendar event:[ google calendar](https://calendar.google.com/calendar/embed?src=c_5cd698df6784e385b1cdcdc1dbca18c061faa96959a04781566d304dc9ec7319%40group.calendar.google.com)

Wiki with information and previous notes:[ GitHub Wiki](https://github.com/ocaml/dune/wiki#dev-meetings)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Shell Completions in Dune Developer Preview</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/shell-completions-in-dune-developer-preview/15522/1</cwn_url>
      <cwn_who>Steve Sherratt announced</cwn_who>
      <cwn_what>
Support for dune shell completions for bash and zsh has just landed in the [Dune Developer Preview](https://preview.dune.build/)!

Running the [installer](https://preview.dune.build/#download) adds a snippet to your shell config (e.g. ~/.bashrc) that installs a completion handler for ~dune~. The completion script was taken from [here](https://github.com/gridbugs/dune-completion-scripts), and that page has some information about how the script was generated. Once it's installed the completions will work any time ~dune~ is typed at the start of a command, so you can still use the completions when running a version of Dune installed with Opam or your system package manager after installing the Dune Developer Preview.

Currently only command completions are supported. So you can run:
#+begin_example
$ dune c&lt;TAB&gt;
cache  clean  coq
#+end_example

...or:
#+begin_example
$ dune build -&lt;TAB&gt;
--action-stderr-on-success
--action-stdout-on-success
--always-show-command-line
--auto-promote
--build-dir
--build-info
--cache
...
#+end_example

But if you run ~dune build &lt;TAB&gt;~ then it will still suggest local files rather than build targets.

*** Try it out!

Getting started is easy:

#+begin_example
$ curl -fsSL https://get.dune.build/install | sh
$ source ~/.bashrc  # or: ~source ~/.zshrc~ or just restart your shell
$ dune &lt;TAB&gt;
build
cache
clean
coq
describe
diagnostics
exec
...
#+end_example
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocaml.org blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://blog.robur.coop/articles/dnsvizor01.html][Meet DNSvizor: run your own DHCP and DNS MirageOS unikernel]]
- [[https://tarides.com/blog/2024-10-23-looking-back-on-our-experience-at-icfp][Looking Back on our Experience at ICFP!]]
- [[https://blog.robur.coop/articles/arguments.html][Runtime arguments in MirageOS]]
- [[https://blog.robur.coop/articles/finances.html][How has robur financially been doing since 2018?]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
