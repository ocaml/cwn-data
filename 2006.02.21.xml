<?xml version="1.0" encoding="UTF-8"?>
<cwn>
<cwn_head>
  <cwn_date>2006.02.21</cwn_date>
  <cwn_prev>2006.02.14</cwn_prev>
  <cwn_next>2006.02.28</cwn_next>
  <cwn_date_text>February 14 to 21, 2006</cwn_date_text>
</cwn_head>
<cwn_body>
<cwn_entry>
	<cwn_title>Weblogs 1.2 released</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32240</cwn_url>
	<cwn_who>Richard Jones announced</cwn_who>
	<cwn_what>
We&apos;re pleased to announce version 1.2 of our weblogs library, for
importing and parsing web server logs, and much much more.

http://merjis.com/developers/weblogs
http://resources.merjis.com/developers/weblogs/Weblogs.html

This is released under GNU LGPL + OCaml linking exception.
	</cwn_what>
</cwn_entry>
<cwn_entry>
	<cwn_title>ocaml+twt v0.81</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32251</cwn_url>
	<cwn_who>Mike Lin announced</cwn_who>
	<cwn_what>
Here&apos;s a small bugfix update to &quot;The Whitespace Thing&quot; for OCaml, a
preprocessor that uses indentation instead of parenthesization to group 
multi-line expressions, like in Python and Haskell. Although the 
implementation approach I used has some limitations, I now use ocaml+twt for 
all my new code and I recommend it, if you like this code style. 

http://people.csail.mit.edu/mikelin/ocaml+twt/
	</cwn_what>
</cwn_entry>
<cwn_entry>
	<cwn_title>ocaml ncurses bindings</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32238</cwn_url>
	<cwn_who>Kai Kuehne asked, Nicolas George answered, and Paul Pelzl added</cwn_who>
	<cwn_what>
Nicolas George wrote:
&gt; Kai Kuehne wrote:
&gt; &gt; Just a question... I wan&apos;t to start programming in Ocaml but it would be great
&gt; &gt; if there were a ncurses-binding. I know ocaml-tmk, but there is no release yet
&gt; &gt; and it seems that there won&apos;t be a release-version. :)
&gt; &gt; 
&gt; &gt; Well.. is anybody here planning to implement a ncurses-binding for ocaml
&gt; &gt; or finish ocaml-tmk?
&gt; 
&gt; Hi. I am the shameful author of ocaml-tmk. I can say that for me, the
&gt; project is dead: I almost do not write Caml these times, and I have more
&gt; pressing things to do.
&gt; 
&gt; I say &quot;shameful&quot; because at least one person proposed to carry on the
&gt; project, and I procrastinated my reply. Which makes I must make apologies
&gt; for replying so late, which makes me procrastinate more. So today I force
&gt; myself to answer. I am really sorry for people who counted on me.

I think I may have offered to take over the project at one point... or
at least I considered offering.  I forget.

I maintain two projects that use a slightly-forked version of your
curses bindings:
http://www.eecs.umich.edu/~pelzlpj/orpie
http://www.eecs.umich.edu/~pelzlpj/wyrd
Since I&apos;m already maintaining that fork as part of those projects, it
wouldn&apos;t be a big deal for me to set up a minimal website and offer the
curses bindings as a separate package.

&gt; I am willing to give the project to anyone who wants it, provided he tells
&gt; me exactly what I have to do on the Savannah website to change the
&gt; ownership, including a possible licence change to include
&gt; I-do-not-remember-what Caml-specific exception to the LGPL..

If you do want to hand over the project to me, I&apos;d rather not deal with
Savannah.  I&apos;d just set up a personal site and let you link to it (&quot;this
project has moved...&quot;).

&gt; As for your immediate needs: the ncurses binding in the current state of TMK
&gt; was working and fairly complete last time I checked. As far as I remember,
&gt; the only missing parts are the scanf-like functions and the mouse parts.
&gt; What is not complete at all is the widget system on top of that, but if you
&gt; only need low-level ncurses functions, you may be lucky.
&gt; 
&gt; On the other hand, the code dates back to just before the coming of
&gt; dynalically-loaded primitives. The build system is probably broken with
&gt; regard to that aspect.

Kai, I&apos;d recommend you grab the curses bindings out of the source code
from one of the projects I linked above.  They&apos;ve got a couple of
bugfixes that are not in ocaml-tmk, and they&apos;ve been updated to work
with recent OCaml releases.
	</cwn_what>
</cwn_entry>
<cwn_entry>
	<cwn_title>What library to use for arbitrary precision decimals</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32254</cwn_url>
	<cwn_who>Deep into this thread, Richard Jones said</cwn_who>
	<cwn_what>
Before we go too far down the currency track (where I agree, using
integers is the way to go), my actual requirement is for a natural
OCaml mapping for the PostgreSQL NUMERIC/DECIMAL type:

http://www.postgresql.org/docs/current/interactive/datatype.html#DATATYPE-NUMERIC-DECIMAL

The database can define types like NUMERIC(6,4) which means 6 decimal
digits in total, 4 of them after the decimal point -- for example,
12.3456

There doesn&apos;t seem to me to be a good natural map for this type in the
stdlib.

Rich.

PS. You can find latest progress on PG&apos;OCaml here:

http://merjis.com/tmp/pgocaml-0.3.tar.gz

I&apos;ve already converted a few of our bigger programs to use this library.
	</cwn_what>
</cwn_entry>
<cwn_entry>
	<cwn_title>Menhir available under GODI</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32267</cwn_url>
	<cwn_who>Fran√ßois Pottier announced</cwn_who>
	<cwn_what>
This short note is to let you know that Menhir, the new LR(1) parser generator
for OCaml, is now available through GODI. If you have installed GODI, just run
godi_console and look for the package godi-menhir.

More information about Menhir can be found at

  http://pauillac.inria.fr/~fpottier/menhir/
	</cwn_what>
</cwn_entry>
</cwn_body>
</cwn>