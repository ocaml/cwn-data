<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2012.01.24</cwn_date>
    <cwn_prev>2012.01.17</cwn_prev>
    <cwn_next>2012.01.31</cwn_next>
    <cwn_date_text>January 17 to 24, 2012</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>otags reloaded 3.12.1 for OCaml 3.12.1</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-01/msg00154.html</cwn_url>
      <cwn_who>Hendrik Tews announced</cwn_who>
      <cwn_what>
better late than never: I would like to announce the first
release of otags reloaded for OCaml 3.12. It is available at

    http://askra.de/software/otags/

Otags reloaded generates tags tables for emacs and vi/vim.

Note that otags (by default) refuses to compile with OCaml
3.12.0, because that version contains a bug that makes otags
quite unusable.

Otags reloaded is distributed under GPL v3.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>ounit v1.1.1: Unit testing framework</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-01/msg00157.html</cwn_url>
      <cwn_who>Sylvain Le Gall announced</cwn_who>
      <cwn_what>
OUnit is a unit testing framework for OCaml, inspired by the JUnit tool for
Java, and the HUnit tool for Haskell.

More information on [HUnit](&lt;http://hunit.sourceforge.net&gt;)

In version 1.1.1:

- bracket now enforce returning unit
- update examples
- ListSimpleMake now use the provided comparator for all elements

This version is already available on oasis-db (and can be installed through
odb): 
http://oasis.ocamlcore.org/dev/view/ounit/1.1.1

Homepage:
http://ounit.forge.ocamlcore.org

Get source code:
$ darcs get http://darcs.ocamlcore.org/repos/ounit

Browse source code:
http://darcs.ocamlcore.org/cgi-bin/darcsweb.cgi?r=ounit;a=summary
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>polymorphic variants in match statements</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2012-01/msg00206.html</cwn_url>
      <cwn_who>Milan StanojeviÄ‡ asked and Jacques Garrigue replied</cwn_who>
      <cwn_what>
&gt; Hi, we're trying to understand the type inference with polymorphic
&gt; variants in match statements. This is a simplification of an actual
&gt; case that happened in practice.
&gt; 
&gt; 1)
&gt; let f i a =
&gt;  match i, a with
&gt;  | true, `A -&gt; `B
&gt;  | false, x -&gt; x
&gt; 
&gt; fails with
&gt; File "foo.ml", line 4, characters 16-17:
&gt; Error: This expression has type [&lt; `A ]
&gt;       but an expression was expected of type [&gt; `B ]
&gt;       The first variant type does not allow tag(s) `B
&gt; 
&gt; 2) changing false to _
&gt; let f i a =
&gt;  match i, a with
&gt;  | true, `A -&gt; `B
&gt;  | _, x -&gt; x
&gt; 
&gt; this succeeds with
&gt; val f : bool -&gt; ([&gt; `A | `B ] as 'a) -&gt; 'a
&gt; 
&gt; 3) changing x in (1) to _ , and using a on the right side
&gt; let f i a =
&gt;  match i, a with
&gt;  | true, `A -&gt; `B
&gt;  | false, _ -&gt; a
&gt; 
&gt; this fails in the same way as (1)
&gt; 
&gt; 4) finally adding another case to match statement
&gt; let f i a =
&gt;  match i, a with
&gt;  | true, `A -&gt; `B
&gt;  | false, x -&gt; x
&gt;  | true, x -&gt; x
&gt; 
&gt; this succeeds with the same type as (2)
&gt; 
&gt; 
&gt; So it seems there is some interaction between type inference and
&gt; exhaustivnest of the match statements.
&gt; 
&gt; Can someone shed some light on what is going on here?

Indeed. The basic idea is to close variant types when leaving them
open would make the pattern matching non-exhaustive.
Here, if we assume that a has type [`A | `B], then the pattern-matching
becomes non-exhaustive, so the type inferred is just [`A]
(i.e. the list of all constructors appearing inside the patterns at this 
position).

Actually, the theory is a bit more complicated, and the full details are
in the following paper, but you should just expect the above behavior
in practice.

        Typing deep pattern-matching in presence of polymorphic variants.
        http://www.math.nagoya-u.ac.jp/~garrigue/papers/index.html

Note that there is also another way to make (1) type, without adding
new cases

  let f i a =
    match i, a with
    | true, `A -&gt; `B
    | false, (`A as x) -&gt; x;;
  val f : bool -&gt; [&lt; `A ] -&gt; [&gt; `A | `B ] = &lt;fun&gt;

Here we have removed the connection between a and the output,
allowing `A to be combine with `B without changing the type of a.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

libsndfile:
  &lt;https://forge.ocamlcore.org/projects/libsndfile/&gt;

OCaml Submodule Pattern:
  &lt;http://www.nicollet.net/2012/01/ocaml-submodule-pattern/&gt;

OUnit 1.1.1:
  &lt;http://caml.inria.fr/cgi-bin/hump.cgi?contrib=293&gt;

Otags 3.12.1:
  &lt;http://caml.inria.fr/cgi-bin/hump.cgi?contrib=294&gt;

A puzzle about typing:
  &lt;http://math.andrej.com/2012/01/20/a-puzzle-about-typing/&gt;

Happy new year from the Ocsigen team:
  &lt;http://ocsigen.org/&gt;

1D integration:
  &lt;https://forge.ocamlcore.org/projects/integration1d/&gt;

Share your mistakes: adventures in optimization:
  &lt;http://blog.incubaid.com/2012/01/17/share-your-mistakes-adventures-in-optimization/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
