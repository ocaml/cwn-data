<?xml version="1.0" encoding="utf-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2020.03.10</cwn_date>
    <cwn_prev>2020.03.03</cwn_prev>
    <cwn_next>2020.03.17</cwn_next>
    <cwn_date_text>March 03 to 10, 2020</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Non opam workflows</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/non-opam-workflows/5232/1</cwn_url>
      <cwn_who>Manas asked</cwn_who>
      <cwn_what>
Very recently, I learnt that there is a significant chunk of users in the OCaml community that does not use opam to install packages. As a small initiative
to contribute to tooling, I want to ensure what I build is compatible with these workflows - workflows I'm not familiar with myself.

I'd love to learn more - what does it look like? How do you setup your compiler, dune and merlin (and/or soon ocamllsp)? How do you configure your editor to
find them and what would make it easier to do so?

I'm told of Duniverse as one tool that being used in these non-opam workflows. Are there any more popular ones out there?
      </cwn_what>
      <cwn_who>Th√©o Zimmermann replied</cwn_who>
      <cwn_what>
I am one of these people. I mostly rely on Nix, whose package repository nixpkgs provides package sets for all (relatively recent) versions of OCaml. These
package sets are not generally as complete as what you can find on opam, so it sometimes happens that I open a PR on the nixpkgs repository to add a new
package (and in the meantime I use my local updated copy of the nixpkgs repo).

You can see the list of available OCaml packages at: https://nixos.org/nixos/packages.html?channel=nixpkgs-unstable&amp;query=ocamlPackages
(This is for the default OCaml version, currently 4.07 in nixpkgs-unstable. Other package sets are called ~ocaml-ng.ocamlPackages_4_0X~ but are not shown in
this web search.)

Most OCaml packages are available at a single version in nixpkgs (even though you can choose your version of OCaml). To gain more flexibility on the exact
version I use in one of my project, I am planning to test Duniverse. At that point, I would rely on Duniverse for library dependencies, but I would still
rely on Nix to install OCaml, findlib, Dune, Duniverse (I'll have to take care of packaging it), utop, merlin, or ocamlformat.

Nix is pretty straightforward to use. You generally provide a ~default.nix~ at the root of your repository, and it will list the dependencies that you use.
When you want to go develop your project, you just enter a special shell (with the ~nix-shell~ command) and you are in an environment where the tools you
need are in ~PATH~ and the libraries you need are in ~OCAMLPATH~.

There's just one tool that I needed special configuration for: ~ocamlformat~ (especially because some projects use it and some do not). When I use it, my
~default.nix~ contains:

#+begin_example
shellHook = ''
  export OCAMLFORMAT_LOCATION=${ocamlformat}
'';
#+end_example

which will export an environment variable when I enter the shell.

And my ~.emacs~ contains:

#+begin_src emacs-lisp
(setq ocamlformat-location (getenv "OCAMLFORMAT_LOCATION"))
(when (> (length ocamlformat-location) 0)
 (add-to-list 'load-path (concat ocamlformat-location "/share/emacs/site-lisp"))
 (require 'ocamlformat)
 (add-hook 'tuareg-mode-hook
           (lambda () (add-hook 'before-save-hook 'ocamlformat-before-save))))
#+end_src

#+begin_quote
I want to ensure what I build is compatible with these workflows
#+end_quote

If you mean as a library author, then all you have to ensure is that you use Dune as the build system (makes the Duniverse workflow better, and makes it
easier to package your library in nixpkgs, cf. ~buildDunePackage~ documented at https://nixos.org/nixpkgs/manual/#sec-language-ocaml).
      </cwn_what>
      <cwn_who>Rwmjones also replied</cwn_who>
      <cwn_what>
You might want to check out the Fedora OCaml packages.

Unfortunately I don't have a convenient way to link to the whole list, but if you look at all the OCaml packages here:
https://koji.fedoraproject.org/koji/search?match=glob&amp;type=package&amp;terms=ocaml* and then if you substitute the ~ocaml-&lt;packagename&gt;~ in two places in this
URL: https://src.fedoraproject.org/rpms/ocaml-re/blob/master/f/ocaml-re.spec (example showing ~ocaml-re~ package), you can see how we build and package them
in the ~%prep~, ~%build~ and ~%install~ sections.

And yes, please make sure your software doesn't depend on opam.  Building everything in your home directory is not suitable for enterprise software
distribution.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>First release of metapp</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-first-release-of-metapp/5250/1</cwn_url>
      <cwn_who>Thierry Martinez announced</cwn_who>
      <cwn_what>
I am happy to announce the first release of ~metapp~, yet another preprocessor for OCaml.  Similarly to [~ppx_optcomp~](https://github.com/janestreet/ppx_optcomp), ~metapp~ is a PPX rewriter.  But instead of introducing a specific DSL for preprocessor directives, ~metapp~ provides a ~[%meta ...]~ extension, where the dots ~...~ are arbitrary OCaml expressions that are substituted at compile-time by the AST nodes they evaluate into. These expressions build AST nodes either by (anti-)quoting some code directly, or by using ~compiler-libs~ ([~Parsetree~](https://caml.inria.fr/pub/docs/manual-ocaml/compilerlibref/Parsetree.html), [~Ast_helper~](https://caml.inria.fr/pub/docs/manual-ocaml/compilerlibref/Ast_helper.html), ...).

In particular, this preprocessor is easy to use for conditional compilation, and is an alternative to [~cppo~](https://github.com/ocaml-community/cppo) and [~ppx_optcomp~](https://github.com/janestreet/ppx_optcomp).

#+begin_src ocaml
let option_get o =
  [%meta if Sys.ocaml_version >= "4.08.0" then
     [%e Option.get o]
  else
     [%e match o with
     | None -> invalid_arg "option_get"
     | Some x -> x]]
#+end_src

In this example, the code between ~[%e ... ]~ is "anti-quoted": it is the code that is inserted (conditionally) in the rewritten module.  Of course, the
anti-quoted code can contain itself some ~[%meta ...]~ code. ~[%meta ...]~ can even itself contain other levels of ~[%meta ...]~ code for multi-stage
programming.

An example of usage of ~metapp~ is the [~metaquot~](https://github.com/thierry-martinez/metaquot) package, which implements the same quoters as ~ppx_tools.metaquot~: ~[%expr ...]~, ~[%type: ...]~, etc.
These quoters are implemented by meta-programming: the meta-code introspects ~Parsetree.cmi~ from ~compiler-libs~ to generate the code matching the current
OCaml version.
      </cwn_what>
      <cwn_who>Rapha√´l Proust added</cwn_who>
      <cwn_what>
To potentially save a few second to the next readers: https://github.com/thierry-martinez/metapp seems to be the repo where it is hosted.
      </cwn_what>
      <cwn_who>Thierry Martinez then said</cwn_who>
      <cwn_what>
Thanks, @raphael-proust! The package is also available via opam: ~opam install metapp~ (and ~metaquot~ is available via opam as well).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml 4.10 released</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ocaml-4-10-released/5194/5</cwn_url>
      <cwn_who>octachron continued this thread</cwn_who>
      <cwn_what>
The Merlin team has just released a preview version of Merlin which is compatible with 4.10.0
(Merlin is an editor service that provides modern IDE features for OCaml) .

This is a preview version:

- the support for short-path is disabled
- only OCaml 4.10.0 is supported in this preview

It can be installed via opam with the usual
#+begin_src shell
opam install merlin
#+end_src
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Transept 0.1.0: Generalised Parser Combinators</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-transept-0-1-0-generalised-parser-combinators/5262/1</cwn_url>
      <cwn_who>Didier Plaindoux announced</cwn_who>
      <cwn_what>
I‚Äôm happy to announce the first release of Transept an OCaml implementation of generalized parsers combinators.

This implementation has been inspired by a 19 years old paper - written by Daan Leijen and Erik Meijer - titled ‚ÄúParsec: Direct Style Monadic Parser
Combinators For The Real World‚Äù [1]. The current implementation provides basic combinators dedicated to char, chars recognition but also conjunction,
sequence, repetition and more. Since the current design relies on the abstract definition of manipulated element most of the parsers are generic and can be
used with streams of chars or something else.

Finally, with this library, I wanted to share my love of OCaml modules ü§ó

Opam: https://opam.ocaml.org/packages/transept/transept.0.1.0/

[1] https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/parsec-paper-letter.pdf
      </cwn_what>
      <cwn_who>Didier Wenzek then said</cwn_who>
      <cwn_what>
It good to see yet another parser combinator for OCaml, even if this makes more difficult the choice of one of them. I believe this highlights how well OCaml
shines for this kind of applications where both high-level expressiveness and performance matter.

[~angstrom~](https://github.com/inhabitedtype/angstrom) is one the alternatives and provides a comparison with others. It would be good to position
~transept~ here.

There is also a more recent article with a radically new approach: [A Typed, Algebraic Approach to Parsing](https://www.cl.cam.ac.uk/~nk480/parsing.pdf) by
Neelakantan R. Krishnaswami and Jeremy Yallop - PLDI 2019. This paper proposes a [library of parser combinators](https://github.com/yallop/ocaml-asp/) for
context-free expressions, an algebraic presentation of the context-free languages. The key points are
- the use of types to statically reject any language which cannot be parsed unambiguously and linearly;
- the use of staging, with OcamlBER, to produce parsers which performance are close to those of hand-written code.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Multicore OCaml: Feb 2020 update</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/multicore-ocaml-feb-2020-update/5227/3</cwn_url>
      <cwn_who>Continuing this thread, Rwmjones asked</cwn_who>
      <cwn_what>
Hi Anil (or anyone!).  Is there a place I can find more about breaking changes that might be made to C extensions?  As you may know we have a lot of C code
which interfaces with OCaml, both as ordinary extensions written in C, but also embedding OCaml in C programs (although that's much more rare), and I'd like
a heads up about what's likely to change.
      </cwn_what>
      <cwn_who>Anil Madhavapeddy replied</cwn_who>
      <cwn_what>
Hi @rwmjones! In a nutshell: no breaking C changes. The longer version is that we implemented two different minor collectors in order to evaluate various
tradeoffs systematically:

- a concurrent minor collector that requires a read barrier and some C API changes in order to create more safe points
- a stop-the-world minor collector that doesn't require a read barrier and no extra C API changes, but would probably cause longer pauses

The good news is that our STW collector scales up much better than we expected (tested to 24 cores), and so our first domains patchset will almost certainly
use that version now.  We expect to shift to a concurrent (and possibly pauseless) collection algorithm at some future point, but in terms of upstreaming it
looks like we should be able to delay any C API changes until after the first version of multicore has landed.

Do you have any nice standalone candidate programs using the C FFI we could add to Sandmark?
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>owl 0.8.0 and 0.9.0 released</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-owl-0-8-0-and-0-9-0-released/5281/1</cwn_url>
      <cwn_who>Marcello Seri announced</cwn_who>
      <cwn_what>
We are happy to announce *two* new releases of ~owl~: a dedicated system for scientific and engineering computing in OCaml.

Since our previous announcement in July last year, there has been an [enormous amount of work](https://github.com/owlbarn/owl/blob/master/CHANGES.md) going
on to cleanup and extend owl's internals and its interfaces.

In this period we have been trying to release often and keep disruption to a minimum. Owl 0.8.0 and 0.9.0 are exceptional in this respect:

- ~owl.0.8.0~:
  - the discrepancy between ~owl-base~ (pure ocaml) and ~owl~ (links cblas/lapacke) interfaces started becoming a problem in few places. In this release many interfaces have been unified and reused. The algodiff module has undergone a similar refactoring. Although most users should be shielded from these changes, they may break existing code, requiring an upper bound on owl and some localized updates. This should mostly boil down to changes like
    #+begin_src diff
    -module CGraph_D = Owl_computation_engine.Make_Graph (Owl_computation_cpu_device.Make (Dense.Ndarray.D))
    +module CGraph_D = Owl_computation_engine.Make_Graph (Owl_computation_cpu_device.Make (Owl_algodiff_primal_ops.D))
    #+end_src
  - this is the last edition supporting OCaml compiler versions &lt; 4.10.0 (more on this later).
- ~owl.0.9.0~: the main difference between ~0.8.0~ and ~0.9.0~ is that owl now requires OCaml 4.10.0. This release of OCaml introduces *extended indexing operators*. With them we can now write things like ~x.%{0;3}~ (for indexing) and ~x.${[0:2];[2;4]}~ (for slicing) instead of the more cumbersome ~x.%{[|0;3|]}~ and  ~x.${[[0:2];[2;4]]}~.

The project is thoroughly documented at [ocaml.xyz ](http://ocaml.xyz) where you can find multiple examples of use.

A lot of work has (and is) been going into improving the documentation, you can find the results in the new [owl book](https://ocaml.xyz/book/toc.html):
https://ocaml.xyz/book/toc.html. This is currently targeting the development version of owl, so using ~master~ or ~0.9.0~ is the best bet if you want to try
the examples out.

One of the issue of the old documentation was that it was getting stale very fast: the book is reusing some of the infrastructure of RWO, so all examples get
recompiled and retested continuously to ensure their correctness.

As a final note, we would like to send a huge thank to the [OCaml Software Foundation](http://ocaml-sf.org/), see also the [announcement made on this
forum](https://discuss.ocaml.org/t/ann-the-ocaml-software-foundation/4476), which has given us some funding that will support a retreat of the maintainers
and a development sprint that will take place at the end of March.

We meant to announce the retreat and sprint for some time now, but the size and publicity of the event may depend on updates to the various governmental and
institutional recommendation in regards to COVID-19 spreading.
If a public event will be possible, we will make a separate announce on this forum.

We want to also thank all the contributors for the increasing number of comments, fixes and discussions that are helping us shape the next releases of owl.

The Owl Dev Team
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Parser combinators vs. parser preprocessors?</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/parser-combinators-vs-parser-preprocessors/5263/4</cwn_url>
      <cwn_who>Continuing this thread, yallop said</cwn_who>
      <cwn_what>
Gasche said:
#+begin_quote
Combinators also describe a grammar; they can build a representation that is then processed. I think it would be perfectly reasonable to provide combinators
to describe a L(AL)R grammar, and then a function from such a grammar to a parsing automaton, along with the result of various analyses. This would solve the
‚Äúadditional tooling‚Äù problem of typical parser generators, and also the ‚Äúlack of conflict analysis‚Äù problem of typical parser combinator libraries. But it
may require support for staging for performance reasons.
#+end_quote

Readers of this thread may be interested in the [asp](https://github.com/yallop/ocaml-asp/) (*algebraic staged parsing*) library (also described in the
[Transept post](https://discuss.ocaml.org/t/ann-transept-0-1-0-generalised-parser-combinators/5262) linked above), which is built on an approach along the
lines @gasche describes:
- combinators that describe a grammar (using context-free expressions)
- an analysis (formulated as a type system) that ensures deterministic parsing
- staging to eliminate performance overhead

The interface is pretty standard, with combinators for alternation, sequencing, etc., and performance is quite good (better than ~ocamlyacc~ on our
benchmarks).

There's a paper, [A typed algebraic approach to parsing](https://www.cl.cam.ac.uk/~jdy22/papers/a-typed-algebraic-approach-to-parsing.pdf), that describes
the design in more detail.

Chet_Murthy said:
#+begin_quote
Also, I‚Äôm personally a massive LL(1) (over LALR) bigot
#+end_quote

Grammars built using ~asp~ are essentially LL(1).  (The weasel word "essentially" isn't hiding much here, but the paper has the details.)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Dune 2.4.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-dune-2-4-0/5288/1</cwn_url>
      <cwn_who>Rudi Grinberg announced</cwn_who>
      <cwn_what>
On behalf of the dune team, I'm pleased to announce the release of dune 2.4.0. This releases features support for
[mdx](https://github.com/realworldocaml/mdx), an interesting take on the notebook paradigm by the RWO team. This release also includes a crucial fix to
polling mode which makes it usable in environments with finite memory :slight_smile:.

Happy hacking!

*** 2.4.0 (06/03/2020)

- Add ~mdx~ extension and stanza version 0.1 (#3094, @NathanReb)

- Allow to make Odoc warnings fatal. This is configured from the ~(env ...)~
  stanza. (#3029, @Julow)

- Fix separate compilation of JS when findlib is not installed. (#3177, @nojb)

- Add a ~dune describe~ command to obtain the topology of a dune workspace, for
  projects such as ROTOR. (#3128, @diml)

- Add ~plugin~ linking mode for executables and the ~(embed_in_plugin_libraries
  ...)~ field. (#3141, @nojb)

- Add an ~%{ext_plugin}~ variable (#3141, @nojb)

- Dune will no longer build shared objects for stubs if
  ~supports_shared_libraries~ is false (#3225, fixes #3222, @rgrinberg)

- Fix a memory leak in the file-watching mode (~dune build -w~)
  (#3220, @snowleopard and @aalekseyev)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Tyxml 4.4.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-tyxml-4-4-0/5290/1</cwn_url>
      <cwn_who>Gabriel Radanne announced</cwn_who>
      <cwn_what>
I have the pleasure to announce the release of [TyXML 4.4.0](https://github.com/ocsigen/tyxml/releases/tag/4.4.0), with special Reason support!

[TyXML](https://github.com/ocsigen/tyxml) is a library for building statically correct HTML and SVG documents. TyXML provides a set of combinators which use
the OCaml type system to ensure the validity of the HTML. TyXML is now a stable library and this release comes with a few newly supported elements and
attributes (such as ARIA elements) and associated bug fixes. However, the main novelty of this release is a long awaited feature: the support for [Reason‚Äôs
JSX syntax](https://reasonml.github.io/docs/en/jsx.html) in the brand new ~tyxml-jsx~ package.

See the complete announcement for code examples and details: https://drup.github.io/2020/03/06/tyxml440/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>first release of oplsr: an OCaml wrapper to the pls R package - Partial Least Squares (PLS) regression</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-first-release-of-oplsr-an-ocaml-wrapper-to-the-pls-r-package-partial-least-squares-pls-regression/5293/1</cwn_url>
      <cwn_who>UnixJunkie announced</cwn_who>
      <cwn_what>
It is my great pleasure to release one more hackish
wrapper to use some R package from within OCaml:

https://github.com/UnixJunkie/oplsr

For some background:
https://en.wikipedia.org/wiki/Partial_least_squares_regression

Cf. test.ml in the sources for a usage example.
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
