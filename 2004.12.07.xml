<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2004.12.07</cwn_date>
  <cwn_prev>2004.11.30</cwn_prev>
  <cwn_next>2004.12.14</cwn_next>
  <cwn_date_text>30 November to 07 December, 2004</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>Functional Reactive Programming in OCaml?</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200411/msg00257.html</cwn_url>
    <cwn_who>As a followup to last week&apos;s discussion, Vincenzo Ciancia said</cwn_who>
    <cwn_what>
Benjamin Pierce wrote:
&gt; The common idea in these systems is to introduce an abstraction of
&gt; &quot;signals&quot; -- roughly, functions from time to &quot;values&quot;, where the
&gt; values can be anything from real numbers (conventional
&gt; signal-processing-type signals) to two- or three-dimensional
&gt; pictures, to booleans (representing events). What&apos;s special is that
&gt; time is represented as a continuous, real-number quantity.  They do
&gt; all kinds of work behind the scenes to actually compute with
&gt; behaviors, but what shows through in the API is a very simple,
&gt; elegant, and powerful set of primitives that can be combined in
&gt; straightforward ways to achieve very complex effects.

I am surely not an expert on the subject, but I tried this at home in a 
student project at university. I wrote a library for composition of 
monomorphic signal functions. It was just a simple attempt but I found 
two things:

1. arrow composition in haskell can be very efficient - you usually 
implement your actions in terms of IO actions, and IO actions 
composition is _I suppose_ optimized somewhat by the compiler, e.g. 
inlining functions as needed to form a bigger code block. However you 
can compose as many arrows as you want without degrading performance.

Parallel or sequential arrow composition in ocaml will certainly involve 
- as in the haskell implementation - something &quot;like&quot; function 
composition, and this will result in efficiency proportional to the 
number of functions involved, which is unwanted. The performance gap 
between an event-based loop and &quot;fran-like&quot; code is discouraging for 
this reason. But you could generate bytecode at runtime and avoid this 
problem (and even beat haskell to please your language envy :)). I 
would seriously consider the second alternative if I had the time to 
work on it.

2. you are sometimes constrained to reveal implementation of your arrows 
when implementing composition, due to the value restriction - you 
certainly know this better than me, and I couldn&apos;t explain this 
anymore, the search function on the mailing list archives is not 
working or else I&apos;d find an example I posted years ago and forgot 
about :) If you are interest I&apos;ll download the raw archives and find 
it.

Hope this helps - I would be interested in an implementation of FRAN for 
ocaml even if I am not so sure that I might be of any help.
    </cwn_what>
    <cwn_who>Florian Hars added</cwn_who>
    <cwn_what>
&gt; the search function on the mailing list archives is not 
&gt; working or else I&apos;d find an example I posted years ago and forgot 
&gt; about :)

http://groups.google.com/groups?q=vincenzo%20caml-list%20arrow
works for me, at least if October 2003 qualifies as &quot;years ago&quot;.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Developing Applications with Objective CAML reviewed on Slashdot</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200412/msg00000.html</cwn_url>
    <cwn_who>Richard Jones said</cwn_who>
    <cwn_what>
http://books.slashdot.org/article.pl?sid=04/11/30/2129226&amp;tid=156&amp;tid=6
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Tools module for the Standard Lib</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200412/msg00017.html</cwn_url>
    <cwn_who>Tom Hawkins asked and Kenneth Knowles answered</cwn_who>
    <cwn_what>
&gt; Recently I&apos;ve been reorganizing my build process for Confluence -- it&apos;s 
&gt; a hardware design language implemented in OCaml.
&gt; 
&gt; A few days ago a Confluence user made an interesting suggestion: why not 
&gt; use OCaml to build OCaml applications?  He then proceeded to write an 
&gt; OCaml script to generate the lexers and parsers, compile the interfaces 
&gt; and implementations, then link everything together.

I did a similar thing with ocamlconf (currently don&apos;t have time to maintain it,
though), except it generates a Makefile from a high-level spec.  I think getting
the &quot;make&quot; logic into O&apos;Caml is the right way to go, and it&apos;ll make it easier to
experiment with different build strategies, such as the fixpoint iteration
Skaller has brought up, or some constraint-&gt;action (a la Dijkstra&apos;s guarded
commands) approach that would subsume fixpoint and traditional make.
 
&gt; Extrapolating on this idea, it would be advantageous to have a &quot;Tools&quot; 
&gt; module in the standard library to provide an interface to ocamlc, 
&gt; ocamlopt, ocamllex, ocamlyacc, ocamldep, and all the other tools.  Such 
&gt; a module would provide first-class ADTs for data that is currently 
&gt; represented in files: .ml, .mli, .mll, .cmi, .cmx, etc.  For example:
&gt; 
&gt;    let my_ml = Tools.ml_of_file &quot;my.ml&quot; in  (* or ... *)
&gt;    let gen_ml = Tools.ml_of_string &quot;print_string \&quot;hello!\&quot;&quot; in
&gt; 
&gt; With such a framework, the complexity of the build process is 
&gt; encapsulated in a program.  After your process is complete, write out 
&gt; the final executable:
&gt; 
&gt;    Tools.output_exe some_channel my_compiled_application
&gt; 
&gt; Just an idea.

Sounds like a polyvalent program:
http://www.catb.org/~esr/writings/taoup/html/ch11s07.html#id2960228

I think this is an admirably flexible way to design tools of all sorts, but it
might force too much stability on the compiler&apos;s internals.  A user could
implement this module using tempfiles and storing whole file contents in
memory.. actually I guess there&apos;d be a problem parsing reasonable exceptions
from the error messages...
    </cwn_what>
    <cwn_who>Christian Lindig added</cwn_who>
    <cwn_what>
In my experience, all serious projects have to deal with more than one 
kind of source language: besides OCaml there could be TeX for 
documentation, Troff for manual pages, input for special-purpose code 
generators like Burg, and so on. A build system must be able to deal 
with all of them. Therefore your proposal would not eliminate the need 
for a general build tool outside of OCaml.
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
