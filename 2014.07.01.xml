<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2014.07.01</cwn_date>
    <cwn_prev>2014.06.24</cwn_prev>
    <cwn_next>2014.07.08</cwn_next>
    <cwn_date_text>June 24 to July 01, 2014</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>findlib-1.5.1</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-06/msg00104.html</cwn_url>
      <cwn_who>Gerd Stolpmann announced</cwn_who>
      <cwn_what>
I just released findlib-1.5.1:

- Including the "bytes" package that is either a compat package for
  ocaml &lt; 4.02 or a fake package for ocaml &gt;= 4.02. The package aims
  at helping to support the transition to the new "bytes" type for
  mutable strings.
- Also installing findlib.cmxs if OCaml supports it.
- Allowing to disable camlp4 (in prep for OCaml-4.02).
- The "ppx" package property can be specified for constructing ppx-type 
  preprocessors.

Especially thanks to Peter Zotov who contributed several patches.

More documentation and download:
http://projects.camlcity.org/projects/findlib.html
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>ReactiveML 1.09.03</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-06/msg00106.html</cwn_url>
      <cwn_who>Louis Mandel announced</cwn_who>
      <cwn_what>
We are happy to announce the new release of ReactiveML: http://reactiveml.org
with a new lesson in the interactive tutorial: http://reactiveml.org/tryrml

ReactiveML could be easily installed using OPAM : opam install rml
or directly from the source : http://reactiveml.org/distrib/rml-1.09.03-2014-06-21.tar.gz

ReactiveML is a language similar to OCaml extended with a built-in
notion of parallel composition. It is based on the reactive
synchronous model, a cooperative concurrency model. The language is
well suited to program applications with a lot of parallel processes
which communicate and synchronize a lot such as video games or
simulation problems. ReactiveML is compiled into plain OCaml code and
thus can link or be linked to any OCaml code.

--
Louis Mandel for the ReactiveML development team
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OUPS meetings (next event, 8th of July)</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-06/msg00107.html</cwn_url>
      <cwn_who>Thomas Braibant announced</cwn_who>
      <cwn_what>
Last week, we had a very productive OCaml hacking session at IRILL.
There were around 25 active participants, and the list of things that
wre done is highly encouraging (see [1]). We look forward to organize
another session like this one!

The next OUPS meetup will be a regular meeting with talks. It will
take place at *Mozilla Paris* on the 8th of July starting at 7 pm. For
details about the location, please go [2]

The tentative program is the following one:

- Vincent Balat: Ocsigen: Web applications with Js_of_ocaml and Eliom
- Roberto Di Cosmo: Leveraging Solver Preferences to Control your
OCaml Package Manager
- Jean-Christophe Filliâtre: Lessons from the implementation of a
graph library, OCamlGraph
- Simon Cruanes: Simple and efficient iterators
- Felix S. Klock II (core dev. Rust):  An Introduction to Rust for
functional programmers (Invited talk).

There will be drinks and some food afterwards, thanks to our sponsors
for this event, LexiFi and Mozilla.

Best,
Thomas

[1] https://github.com/braibant/oups/wiki
[2] http://www.meetup.com/ocaml-paris/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Uucp 0.9.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-06/msg00113.html</cwn_url>
      <cwn_who>Daniel Bünzli announced</cwn_who>
      <cwn_what>
I'd like to announce uucp:

  Uucp is an OCaml library providing efficient access to a selection
  of character properties of the [Unicode character database][1].

  Uucp is independent from any Unicode text data structure and has no
  dependencies. It is distributed under the BSD3 license.

  [1]: http://www.unicode.org/reports/tr44/

Home page: http://erratique.ch/software/uucp
Documentation: http://erratique.ch/software/uucp/doc/Uucp
Github mirror: https://github.com/dbuenzli/uucp

It should be available shortly in opam. A few comments about the
library can be found at the end of this message.

Part of this work was sponsored by OCaml Labs, many thanks for their
support.

Best,

Daniel


A few notes.

* Having seen unwarranted sights of horror at the simple mention of 
  Unicode by fellow peers I took the time to write an absolute minimal
  introduction to Unicode in the documentation:

  http://erratique.ch/software/uucp/doc/Uucp.html#uminimal
  
  At the end of this introduction end I also give a few biased tips on
  how Unicode can be handled in OCaml.

* The data used to represent the properties is directly linked
  in your executables. In the future I will adapt the library to use
  OCaml 4.02 module aliases so that you only pay for the submodules
  you access. For now linking against the library on osx 64-bit, 
  result in a 6.4 Mo executable and on linux 32-bit a 3.7 Mo
  executable.

* If you are interested in Unicode caseless matching (equality) 
  of strings or identifiers, the documentation of the Uucp.Case module
  has sample code on how to perform that using Uutf and Uunf. This
  code may eventually be gathered in a proper module in the future.

  http://erratique.ch/software/uucp/doc/Uucp.Case.html#caseexamples

* Not all properties are exposed. Obsolete properties, deprecated
  properties and those that are specific to some unicode processing
  algorithm (bidi, segmentation, normalization, etc.) are left out.
  The reason for the latter is that these algorithm may need to devise
  their own, maybe more efficient, representations. For example the
  normalization properties are not included, as they are best stored,
  used and exposed by a module that performs normalization
  (e.g. Uunf). It is not excluded that I reverse this in the future
  and make Uunf dependent on Uucp as this could make maintenance
  easier (though Uunf sometimes uses optimized representations). 
  Also if the data needs to be used by more than one module
  this may become less wasteful than each module including its own
  data.

* Regarding the last point, the selection is subjective. If there's 
  a property you feel is useful in the wide and missing please 
  tell me (e.g. on github's issue tracker) with a good rationale and I 
  will add it. The full list of omitted properties is available here:
  
  http://erratique.ch/software/uucp/doc/Uucp.html#distrib_omit
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Book reviewers wanted (again)</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-07/msg00005.html</cwn_url>
      <cwn_who>John Whitington</cwn_who>
      <cwn_what>
I have prepared another little book about OCaml, a collection of
sixteen little algorithms, methods, and diversions, together with
Questions and Answers. Not quite as beginner-ish as "OCaml from the
Very Beginning" but not, I hope, too intimidating at all.

I've included the provisional table of contents below.

Please drop me a note by email if you can spare a little time to
review a draft, which should be ready soon. Free copies for people who
provide substantive comments, like last time, of course.

1 Unravelling "Fold"
2 Being Lazy
3 Named Tuples with Records
4 Generalized Input/Output
5 Streams of bits
6 Compressing Data
7 Labelled and Optional Arguments
8 Formatted Printing
9 Searching For Things
10 Finding Permutations
11 Making Sets
12 Playing Games
GENERATING PDF DOCUMENTS - AN EXTENDED EXAMPLE
13 Representing Documents
14 Writing Documents
15 Pretty Pictures
16 Adding Text

I'll also be forwarding a copy to caml at inria.fr like last time, so
if you're on that list, there is no need to contact me separately.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Extending Format strings</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-07/msg00001.html</cwn_url>
      <cwn_who>Gabriel Kerneis</cwn_who>
      <cwn_what>
in CIL &lt;http://cil.sf.net&gt;, the module Pretty provides a Format-like
interface with a few extensions compared to usual format strings.
Implementation-wise, it uses string_of_format and re-implements most of
the logic of the pre-4.02 Format module, with Obj.magic all over the
place.

I wondered if anyone has done something similar in their own project
(extending Format in one way or another), and if the new GADT-based
approach could provide a cleaner solution?

One thing I quite like with the current code, despite its uglyness, is
its concision. I am right in assuming that switching to GADTs would
require a lot more boilerplate?

Many thanks for any example you could provide.
      </cwn_what>
      <cwn_who>Tianyi Cui suggested and Gabriel Kerneis replied</cwn_who>
      <cwn_what>
&gt; I found https://github.com/janestreet/custom_printf quite
&gt; straightforward to understand and easy to use, if most of your types
&gt; already have sexp converters and to_string functions.

Thanks. This is a nice hack (provided you are happy to use
a pre-processor). However, if I understand correctly, it is limited to
making %s and %a more convenient to use for existing Printf functions.

I should probably have given more details in my initial request. CIL's
Pretty.dprintf [1] constructs and returns a "document" (similar to
PPrint.document, if you are more familiar with this library), to be
later formated and rendered to a given width. I am not sure
custom_printf provides that level of flexibility.

[1]
http://kerneis.github.io/cil/doc/html/cil/api/Pretty.html#VALdprintf
      </cwn_what>
      <cwn_who>Jeremie Dimino also replied and Alain Frisch added</cwn_who>
      <cwn_what>
&gt; I had a quick look at [Pretty.dprintf] and I think you could use
&gt; [CamlinternalFormat.make_printf] to implement it with 4.02. @-sequences
&gt; are already recognized by the format parser in the compiler, but it
&gt; should be compatible with [Pretty]'s syntax, you just have to interpret
&gt; the constructors differently. It should actually make the code of
&gt; [Pretty.dprintf] much simpler.

We had a very similar issue with some internal LexiFi library, also
using @-markers, and returning some structured document.  Jeremie's
suggestion works very well.

The code below won't compile, but it can give you an idea on how to proceed:


let printf_k fmt_s (acc : (unit, t) CamlinternalFormat.acc) =
  let open CamlinternalFormat in
  let l = ref empty in
  let add x = l := conc !l x in
  let stack = ref [] in
  let push x = stack := (x,!l) :: !stack; l := empty in
  let err () =
    Mlfi_isdatypes.ffailwith "Mlfi_pp.printf: invalid format string
%S" fmt_s
  in
  let pop () = match !stack with
    | (x,old) :: st -&gt; stack := st; let nl = !l in l := old; (x,nl)
    | _ -&gt; err ()
  in
  let rec k = function
    | Acc_string(p, s) -&gt; k p; add (str s)
    | Acc_char(p, c) -&gt; k p; add (str (String.make 1 c))
    | Acc_delay(p, f) -&gt; k p; add f
    | Acc_flush p -&gt; k p
    | Acc_invalid_arg (_, msg) -&gt; invalid_arg msg
    | Acc_formatting_lit (p, lit) -&gt;
        k p;
        begin match string_of_formatting_lit lit with
        | "@[" -&gt; push (`BoxLeft 2)
        | "@]" -&gt;
            begin match pop () with
            | (`BoxLeft k,u) -&gt; add (indent k u)
            | _ -&gt; err ()
            end
        | "@&lt;" -&gt; push `LineLeft
        | "@&gt;" -&gt;
            begin match pop () with
            | `LineLeft, u -&gt; add (line u)
            | _ -&gt; err ()
            end
        | s -&gt;
            add (str s)
        end
    | Acc_formatting_gen (p, _) -&gt; k p
    | End_of_acc -&gt; ()
  in
  k acc;
  if !stack &lt;&gt; [] then err ();
  !l

let printf (Format (fmt, fmt_s) : ('a, unit, t, f) format4) : 'a =
  let open CamlinternalFormat in
  make_printf (fun () acc -&gt; printf_k fmt_s acc) () End_of_acc fmt
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the OCaml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocaml.org/&gt;.

Notes on Naming:
  &lt;https://blogs.janestreet.com/notes-on-naming/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=notes-on-naming&gt;

Uucp 0.9.0:
  &lt;http://erratique.ch/software/uucp&gt;

Parametric HOAS with first-class modules:
  &lt;http://syntaxexclamation.wordpress.com/2014/06/27/parametric-hoas-with-first-class-modules/&gt;

Full Time: Software Developer (Functional Programming) at Jane Street in New York, NY; London, UK; Hong Kong:
  &lt;http://jobs.github.com/positions/0a9333c4-71da-11e0-9ac7-692793c00b45&gt;

Escaping continuations:
  &lt;http://syntaxexclamation.wordpress.com/2014/06/26/escaping-continuations/&gt;

Reading Lamport, again:
  &lt;https://blogs.janestreet.com/reading-lamport-again/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=reading-lamport-again&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
