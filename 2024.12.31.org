#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2024.12.24.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2025.01.07.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of December 24 to 31, 2024.

#+TOC: headlines 1


* Using Property-Based Testing to Test OCaml 5
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/blog-using-property-based-testing-to-test-ocaml-5/14550/2

** Jan Midtgaard announced


I've written up part 2 on our effort to utilize property-based testing to stress test the OCaml 5 run time system. Happy Christmas reading! 🎄🎅 🎁 😄

https://tarides.com/blog/2024-12-23-multicore-property-based-tests-for-ocaml-5-challenges-and-lessons-learned/
      



* First release of elm_playground
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/ann-first-release-of-elm-playground/15838/1

** Yoann Padioleau announced


It is my pleasure to announce the first release of ~elm_playground~, an OCaml package that allows you to easily create /pictures/, /animations/, and even /video games/ in a portable way using an API that really simplifies how to view the computer and its devices (the screen, keyboard, and mouse). The library offers a native backend to run the games from a terminal and a web backend to run the games in your browser.

This is a port of the excellent Elm playground package
https://github.com/evancz/elm-playground to OCaml.

You can install it via OPAM via ~opam install elm_playground~.

Here are a few examples of code using the library.

First a "picture" app:

#+begin_src ocaml
(* from https://elm-lang.org/examples/picture *)
open Playground

let app =
  picture [
    rectangle brown 40. 200.
      |> move_down 80.;
    circle green 100.
      |> move_up 100.;
  ]

let main = Playground_platform.run_app app
#+end_src

https://global.discourse-cdn.com/flex020/uploads/ocaml/optimized/2X/7/76fc1990fe116911097764df986f64fed41c28a4_2_470x500.png

Then an "animation" app:
#+begin_src ocaml
(* from https://elm-lang.org/examples/animation *)
open Playground

let view time = [
    octagon darkGray 36.
      |> move_left 100.
      |> rotate (spin 3. time);
    octagon darkGray 36.
      |> move_right 100.
      |> rotate (spin 3. time);
    rectangle red 300. 80.
      |> move_up (wave 50. 54. 2. time)
      |> rotate (zigzag (-. 2.) 2. 8. time);
  ]

let app =
  animation view

let main = Playground_platform.run_app app
#+end_src

https://global.discourse-cdn.com/flex020/uploads/ocaml/optimized/2X/e/e91563cbb6a0863570bbb19b057f5e8dae7164bf_2_470x500.png

And finally a "game" app:
#+begin_src ocaml
(* from https://elm-lang.org/examples/mouse *)
open Playground

let view _computer (x, y) = [ 
  square blue 40.
   |> move x y
 ]

let update computer (x, y) =
  (x +. to_x computer.keyboard, y +. to_y computer.keyboard)

let app = 
  game view update (0., 0.)

let main = Playground_platform.run_app app
#+end_src

https://global.discourse-cdn.com/flex020/uploads/ocaml/optimized/2X/2/24e8ffe672cda66c6a49e02013347cda0640f771_2_470x500.png

Note that you can write more complex games. For example here is a screenshot of a toy tetris app:

https://global.discourse-cdn.com/flex020/uploads/ocaml/original/2X/4/4ded1d55c9994935c5ec3786ae549ba3a71b8eb6.png

For more information, follow the README at https://github.com/aryx/ocaml-elm-playground 

And merry christmas!
      



* First release of flatunionfind
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/ann-first-release-of-flatunionfind/15847/1

** François Pottier announced


I am pleased to announce the first release of ~flatunionfind~, a small library that offers a union-find data structure, stored inside a vector.

This library is an alternative to my existing library ~unionFind~, and could be faster or slower, depending on your use case.

#+begin_example
  opam update
  opam install flatunionfind
#+end_example

For more information, see the [[https://cambium.inria.fr/~fpottier/flatunionfind/doc/flatunionfind/][documentation]].

Happy unions and finds,
FP.
      



* Serving This Article from RAM with Dream for Fun and No Real Benefit
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/serving-this-article-from-ram-with-dream-for-fun-and-no-real-benefit/15856/1

** Thomas Letan announced


I’ve been playing with my website lately, more precisely on how the contents is delivered to the readers. Before, it was merely a boring, static website delivered by Nginx; now it’s a Dream-powered HTTP server with all the pages in-memory.

[[https://soap.coffee/~lthms/posts/DreamWebsite.html][I’ve written about this fun, little project]], and you may find the article interesting. It covers several topis: fun experiments with the Dream library, HTTP arcane one cannot ignore if they want to implement a browser-friendly server, and even some Docker because why not!

Happy holidays everyone!
      



* Other OCaml News
:PROPERTIES:
:CUSTOM_ID: 5
:END:
** From the ocaml.org blog


Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://soap.coffee/~lthms/posts/DreamWebsite.html][Serving This Article from RAM with Dream for Fun and No Real Benefit]]
- [[https://tarides.com/blog/2024-12-23-multicore-property-based-tests-for-ocaml-5-challenges-and-lessons-learned][Multicore Property-Based Tests for OCaml 5: Challenges and Lessons Learned]]
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe to the [[https://sympa.inria.fr/sympa/info/caml-list][caml-list]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
