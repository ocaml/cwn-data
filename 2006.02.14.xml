<?xml version="1.0" encoding="UTF-8"?>
<cwn>
<cwn_head>
  <cwn_date>2006.02.14</cwn_date>
  <cwn_prev>2006.02.07</cwn_prev>
  <cwn_next>2006.02.21</cwn_next>
  <cwn_date_text>07 to 14 February, 2006</cwn_date_text>
</cwn_head>
<cwn_body>
<cwn_entry>
	<cwn_title>License question: tricky issue</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32155</cwn_url>
	<cwn_who>Alessandro Baretta asked and Xavier Leroy answered</cwn_who>
	<cwn_what>
&gt; Would the authors/copyright holders consider a tarball containing an Ocaml 
&gt; source tarball plus other source code and other source tarballs as a 
&gt; distribution of their software or as a derived work? The question is tricky due 
&gt; to the non-free public license adopted by Inria originally.
&gt; 
&gt; I ask this question because I would like to release a source distribution for 
&gt; Ocaml containing all source tarballs and all patches needed to build a complete 
&gt; AS/Xcaml toolchain. This includes one or more stable ocaml tarballs, an 
&gt; ocaml-cvs directory (for testing purposes), a metaocaml tarball, and a quite a 
&gt; few libraries (findlib, pcre-ocaml, ocamlnet, pxp, extlib, postgres and a bunch 
&gt; more). If I understand the QPL correctly, should this project be considered a 
&gt; derived work I would not be allowed to distribute it; whereas, if it is 
&gt; considered a distribution, Ã  la Debian, there should be no problem.
&gt; 
&gt; Notice that all modifications to other peoples code exist in my distribution in 
&gt; the form of patch files, which are automatically applied before the build 
&gt; process begins.

Sven&apos;s reply is perfectly correct: by distributing the Caml source
code unmodified, plus modifications as separate patches, you are 100%
in compliance with the letter (and the spirit) of the QPL.

(Moreover, the QPL + LGPL + exceptions combo we use for OCaml is free
software -- even the Debian legal team agrees with that :)

So, please go ahead with your distributions plans, this is exactly how
we intend the Caml source to be used.
	</cwn_what>
</cwn_entry>
<cwn_entry>
	<cwn_title>Native code generator on Intel Macs</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32094</cwn_url>
	<cwn_who>Jeff Scofield and Xavier Leroy answered</cwn_who>
	<cwn_what>
&gt; Does anybody know if/when OCaml will be able to run natively (i.e.,
&gt; generate native code) on the new Intel Macs?

Shortly after a new shiny Intel MacBook lands on my desk.  The 15&quot;
model is however too heavy for my taste; I&apos;m tempted to wait for a
smaller, lighter model.

&gt; I assume the major
&gt; building blocks are already present but the cognoscenti still need to
&gt; hook them up the right way.

Based on the PowerPC/MacOSX and PowerPC/Linux ports, I&apos;d expect the
changes to the x86 code generator to be small.  If someone has an
Intel Mac and is willing to run a test for me (basically, compile a C
file of mine to assembler and mail me the generated assembly), that
would help planning the porting work.
	</cwn_what>
</cwn_entry>
<cwn_entry>
	<cwn_title>Toplevel Wish</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32199</cwn_url>
	<cwn_who>Jonathan Roewen asked, and both Eric Cooper and Michel Mauny answered</cwn_who>
	<cwn_what>
&gt; I think it would be awesome if the toplevel would be able to spit out
&gt; the interface to a module.
&gt;
&gt; Like:
&gt;
&gt; # Printf;;
&gt; and it prints out a Module = sig ... end of the module if found.
&gt;

Or like this: (:))

# module P = Printf;;
module P :
  sig
    val fprintf : out_channel -&gt; (&apos;a, out_channel, unit) format -&gt; &apos;a
    val printf : (&apos;a, out_channel, unit) format -&gt; &apos;a
    val eprintf : (&apos;a, out_channel, unit) format -&gt; &apos;a
    val sprintf : (&apos;a, unit, string) format -&gt; &apos;a
    ...

Maybe *module _ = Printf ;;* would be slightly more elegant, but the
above does work.
	</cwn_what>
	<cwn_who>Jon Harrop added</cwn_who>
	<cwn_what>
Or if you don&apos;t want to pollute the namespace with a module called P:

# module Printf = Printf;;
module Printf :
  sig
    val fprintf : out_channel -&gt; (&apos;a, out_channel, unit) format -&gt; &apos;a
    val printf : (&apos;a, out_channel, unit) format -&gt; &apos;a
    ...
  end
	</cwn_what>	
</cwn_entry>
<cwn_entry>
	<cwn_title>Position available for O&apos;Caml programmer in Microsoft&apos;s TERMINATOR project</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32204</cwn_url>
	<cwn_who>Byron Cook announced</cwn_who>
	<cwn_what>
Research Software Development Engineer: TERMINATOR project

Project website: http://www.research.microsoft.com/terminator
Site location: Microsoft Research in Cambridge, UK
Contract length: 6 months to start, with negotiation to extend
Who to contact: Byron Cook (bycook@microsoft.com)

TERMINATOR is a program termination prover that supports C programs with
arbitrarily nested loops or recursive functions, and imperative features
such as references, functions with side-effects, and function pointers.
TERMINATOR uses a newly discovered method of counterexample-guided
abstraction refinement for program termination proofs.  The termination
argument is constructed incrementally, based on failed proof attempts.
TERMINATOR also infers and proves required program invariants on demand.
It has been successfully used on Windows device drivers of up to 35,000
lines of code.

The TERMINATOR team is looking for someone with functional programming
and formal verification experience to develop and maintain the
TERMINATOR code-base.  Candidates should have the following
qualifications:
1) MS. or Ph.D. in Computer Science
2) Experience with ML or an ML-like programming language (TERMINATOR is
written primarily in O&apos;Caml, with some C++ and Prolog)
3) Knowledge of algorithms and techniques from automatic formal
verification and compilers
4) Good communication and inter-personal skills
5) Leadership and cross-team collaboration skills
6) 2 years of industrial experience (preferred)

This position will include the following activities: Fixing bugs in the
TERMINATOR code base; providing new features in TERMINATOR; responding
to customer feature requests; improving the performance of TERMINATOR,
and improving the reliability of TERMINATOR.

This is an important position.  TERMINATOR is the first known automatic
termination prover to support real programs, and solves a problem that
is important to reactive systems (i.e. proving that they actually will
be able to react).  It has the potential to make a huge contribution to
how future developers write programs and the quality of the software
that we use.

Interested? Send a CV to Byron Cook (bycook@microsoft.com)
	</cwn_what>
<cwn_who>Goulagman asked and Josh Berdine answered</cwn_who>
<cwn_what>
&gt; I was just wondering why you didn&apos;t use Microsoft&apos;s F# language
&gt; instead of OCaml.
&gt; Have you planned to port it to F# or are you sticking with Ocaml? And
&gt; if so, why? (I don&apos;t know much about F#).

The short answer is that we use both the OCaml and F# compilers for
Terminator.  There is an answer on the FAQ:

http://research.microsoft.com/terminator/faq.htm
</cwn_what>
</cwn_entry>
<cwn_entry>
	<cwn_title>C interface style question</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31971</cwn_url>
	<cwn_who>Continuing an old thread, Olivier Andrieu asked and Damien Doligez answered</cwn_who>
	<cwn_what>
> in mlvalues.h, I have (with ARCH_ALIGN_DOUBLE undefined) :
&gt;
&gt;   #define Double_val(v) (* (double *)(v))
&gt;   #define Double_field(v,i) Double_val((value)((double *)(v) + (i)))
&gt;
&gt; so &amp;(Double_field(ml_array, 0)) looks pretty equivalent to a simple
&gt; cast to double*, no ?

You should treat those definitions as abstract.  It is purely for
efficiency reasons that they are defined as macros.

If we decide to change the representation of Caml values (admittedly
a pretty remote possibility at this point), the pointer might not
point to the first field of the array anymore.  For example. it could
point to the header, or to the second byte of the contents.
	</cwn_what>
</cwn_entry>
<cwn_entry>
	<cwn_title>(quasi FAQ) object, variants, .... Unbound type parameter [..]</cwn_title>
	<cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/32221</cwn_url>
	<cwn_who>Basile Starynkevitch asked and Jacques Garrigue answered</cwn_who>
	<cwn_what>
&gt;   class virtual [&apos;VarT,&apos;NodeT] myclass = object(self)
&gt;     method virtual v : &apos;VarT
&gt;     method virtual n : &apos;NodeT
&gt;   end;;
&gt; 
&gt;   type 
&gt;     &apos;a vart = [&gt; `NothingV | `IntegerV of int | `NodeV of &apos;a nodet ]
&gt;   and
&gt;     &apos;a nodet = Empty | LeafI of int | ObLeaf of &apos;a instancet | Node of nodet list
&gt;   and
&gt;     &apos;a instancet = (&apos;a,nodet) myclass constraint &apos;a = &apos;a vart
&gt; 
&gt; 
&gt; I&apos;m getting the following error
&gt; 
&gt; File &quot;ess.ml&quot;, line 8, characters 12-66:
&gt; Unbound type parameter [..]

There are two problems here. One is that your definition of vart is
invalid: the &quot;&gt;&quot; introduce a type variable that is bound nowhere (this
is the direct cause of the error.) Even if you correct this, another
problem is that, in mutually recursive definitions, constraints must
be repeated everywhere they are needed.
So a straightforward correction would be:

type &apos;a vart = [ `NothingV | `IntegerV of int | `NodeV of &apos;a ]

type &apos;a nodet =
    Empty | LeafI of int | ObLeaf of &apos;a instancet | Node of &apos;a nodet list
  constraint &apos;a = [&gt; &apos;a nodet vart]
and &apos;a instancet = (&apos;a,&apos;a nodet) myclass constraint &apos;a = [&gt; &apos;a nodet vart]

Now, I don&apos;t know what kind of code you are intending to write, but
depending of the kind of parameterization you are using, a functorized
version could be more natural:

type &apos;a vart = [ `NothingV | `IntegerV of int | `NodeV of &apos;a ]
module F(X : sig type &apos;a t = private [&gt; &apos;a vart] end) = struct
  type nodet =
    Empty | LeafI of int | ObLeaf of &apos;a instancet | Node of &apos;a nodet list
  and instancet = &lt;v : nodet X.t; n : nodet&gt;
  ...
end

The nice part is that individual constraints disappear: they are fully
expressed by the signature of X.
	</cwn_what>
</cwn_entry>
</cwn_body>
</cwn>