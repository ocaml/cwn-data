#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[http://alan.petitepomme.net/cwn/2019.01.22.html][Previous Week]] [[http://alan.petitepomme.net/cwn/index.html][Up]] [[http://alan.petitepomme.net/cwn/2019.02.05.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of January 22 to 29, 2019.

#+TOC: headlines 1


* ocaml-gemini 0.1
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/ann-ocaml-gemini-0-1/3221/1

** Carmelo Piccione announced


Hello, I'd like to announce the initial release of [[https://github.com/struktured/ocaml-gemini][ocaml-gemini]], a pure OCaml library that fully implements the [[http://gemini.com][Gemini]] [[https://docs.gemini.com/rest-api/][REST api]] as well  as [[https://docs.gemini.com/websocket-api/#market-data][market data]] and [[https://docs.gemini.com/websocket-api/#order-events][private order events]] websocket apis.

For those unfamiliar, Gemini is a well established cryptocurrency exchange launched by the notorious Winklevoss Twins (unfortunately the exchange is written in Go, but I digress).

The implemention depends on ~cohttp-async~, ~websocket-async~, and ~yojson~ for serialization support.  ~nocrypto~ is used for the session authentication. If there is sufficient interest by the community I can extend the code to support a ~lwt~ version.

A console interface is also provided which accepts s-expressions as parameters. It is mostly used to test the api or do quick and dirty order management.

Finally, any feedback on the api or PRs are welcome, as usual.
      



* Godbolt compiler explorer beta now has OCaml support
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/godbolt-compiler-explorer-beta-now-has-ocaml-support/3225/1

** Freyr666 announced


Feel free to test.

https://ocaml.godbolt.org/beta/
      



* Debugging memory issues
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/debugging-memory-issues/3223/1

** Sean Talts asked


I'm working on a [[https://github.com/stan-dev/stanc3][new compiler/transpiler]] written in OCaml and we've (unfortunately?) been using the Format library to emit the code that we're generating. Today I'm just starting to run it on some huge test programs and finding that it's taking up dozens of GB of memory pretty quickly and totally swamping the machine only a little ways into the program. I tried debugging with ~ocamldebug~ but I can't find any specific code that's repeating too much or anything like that - it just seems like something invisible is happening and my number one suspect is that it's the building up of these long Format strings (with nested "%a" compositional formatting). But I'd like to figure out for sure so I don't waste time switching away from the Format library or something if it's an unrelated issue.

Any help appreciated! Thanks :)
      

** Jack Feser replied


You could give spacetime (https://blog.janestreet.com/a-brief-trip-through-spacetime/) a try. It's a new ocaml memory profiler. You'll need to install a spacetime-specific compiler switch though.
      

** Simon Cruanes then said


In my experience, ~Format~ doesn't leak memory (if you use ~fprintf~ into some IO channel; if you print into a buffer then the buffer might grow, of course). It's pretty fast and very convenient. I second the idea of using some form of profiling such as spacetime to find where the leak comes from.
      

** Christian Lindig replied


I have not used it myself, but ~Obj.reachable_words~ reports the words reachable from a given value. If you suspect some value already to be responsible for the leak, you could observe it with this function.
      

** Pierre Chambart also replied


I have debugged quite a few things with https://github.com/jhjourdan/ocaml/tree/memprof . It is available in the opam repository as ocaml-variants.4.07.1+statistical-memprof you should use it with https://github.com/jhjourdan/statmemprof-emacs
      



* First release of Mssql
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/ann-first-release-of-mssql/3242/1

** Brendan Long announced


I'm happy to announce the first [[https://opam.ocaml.org/packages/mssql/][opam release]] of [[https://github.com/arenadotio/ocaml-mssql][Mssql]], our FreeTDS-based Async SQL Server client library.

We've gone to some trouble to make it safer to use than direct bindings to FreeTDS, with things like [[https://github.com/arenadotio/ocaml-mssql/blob/master/src/client.mli#L17][parameterized queries]], workarounds for [[http://pymssql.org/en/stable/freetds_and_dates.html][insane logic in FreeTDS]], and logic to throw exceptions instead of crashing when you try to do things like [[https://github.com/arenadotio/ocaml-mssql/blob/master/src/client.ml#L32][use a closed DB handle]].

We've also wrapped everything in background threads and [[https://github.com/arenadotio/ocaml-mssql/commit/d1a9ca2eaa818650368058501ad3d201f9854690][ensured that any FreeTDS calls that perform IO release the runtime lock]], so it's safe to use in an Async app without blocking everything when you do DB calls, and also ensured that if you attempt to use a connection concurrently, [[https://github.com/arenadotio/ocaml-mssql/blob/master/src/client.ml#L29][everything will just work]] (although it won't be any faster).

There's also [[https://github.com/arenadotio/ocaml-mssql/blob/master/src/client.mli#L79][a built-in thread pool]], although it has some annoying limitations since FreeTDS doesn't give us low-enough-level control to properly reset connections.

(We made this using Async since that's what we use, but contact me if you want to add support for Lwt)
      



* IFDEF conditional compilation and ocamlbuild
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/ifdef-conditional-compilation-and-ocamlbuild/3244/1

** Luc Boug√© announced


I am developing a program in Ocaml for my Programming class.This idea is to provide the students with various versions of the program, using more and more complex techniques.

I would like to design a common master, and then derive the various versions automatically using some conditional compilation facility.

I considered [[http://caml.inria.fr/pub/docs/manual-camlp4/manual002.html][camlp4 IFDEF]] but it applies to complete expressions, only. Instead, I would like to add or remove cases in long lists of ~if ... then ... else if ...~.

Also, I am using ~ocamlbuild~ and I cannot find how to define ~IFDEF~ compilation tags in the compilation chain.

Is there any IFDEF-wizard in the community? :sunglasses:
      

** Anton Kochkov replied


See https://github.com/ocaml-community/cppo + https://jbuilder.readthedocs.io/en/latest/quick-start.html#using-cppo (for dune, since using plain ocamlbuild is "an old way of doing things").
      

** Anton Kochkov then added


Note there is also https://github.com/janestreet/ppx_optcomp for using only extension points (PPX)
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[http://alan.petitepomme.net/cwn/][the archive]] or the [[http://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].

#+BEGIN_authorname
[[http://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
