#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[http://alan.petitepomme.net/cwn/2020.01.21.html][Previous Week]] [[http://alan.petitepomme.net/cwn/index.html][Up]] [[http://alan.petitepomme.net/cwn/2020.02.04.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of January 21 to 28, 2020.

#+TOC: headlines 1


* New release of Menhir (20200123)
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://sympa.inria.fr/sympa/arc/caml-list/2020-01/msg00040.html

** François Pottier announced


It is my pleasure to announce a new release of Menhir, the LR(1) parser
generator.

#+begin_example
   opam update
   opam install menhir
   opam install coq-menhirlib # if you wish to use menhir --coq
#+end_example

There are no new features, only a significant change in the manner in which
Menhir is built:

- Menhir is now built and installed by dune. This should make life easier for Menhir's developers: in particular, ~make test~ and ~make speed~ can be run straight away and do not requiring installing Menhir first. This should also make compilation much faster on multi-core machines. (Contributed by Nicolás Ojeda Bär, to whom many thanks are due.)

- There used to be a distinction between two slightly different ways of installing Menhir, namely with and without ~ocamlfind~. This distinction disappears. The command line switch ~--suggest-ocamlfind~ is deprecated and causes Menhir to print ~false~.

We hope that these changes do not break any of the code that relies on Menhir
today. Please report any problems that you might encounter. Happy hacking!
      



* Ocaml cross compiler?
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/ocaml-cross-compiler/1494/7

** Deep in this thread, Dmitry Ponyatov asked


 What about embedded targets like Cortex-M (STM32F3/F4)?
 How much memory should it have to have to run OCaml-compiled programs?
      

** Ivan Gotovchits replied


  You may find this [[http://www.algo-prog.info/ocapic/web/index.php?id=ocapic][page]] interesting. To summarize, with _a lot of work_ you can make a subset of OCaml programs runnable on a microcontroller. You will also need to rewrite OCaml's runtime and develop a new GC for it.

  In real life, no, you can't run OCaml on a microcontroller. You need at least a couple of megabytes of normal RAM with MMU.
      

** Ivan Gotovchits then added


  Hmm, found this [[https://github.com/stevenvar/OMicroB][project]], that is also quite relevant to you, it is quite alive, so maybe you have chances :)
      



* Two master internship proposals to explore social and technical aspects of the creation of the OCaml and Coq platforms
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/two-master-internship-proposals-to-explore-social-and-technical-aspects-of-the-creation-of-the-ocaml-and-coq-platforms/5073/1

** Théo Zimmermann announced


We are looking for candidates for the following two internships intended to prefigure the creation of the OCaml and Coq platforms:
- a first internship is focused on exploring technical aspects: https://www.irif.fr/_media/users/theo/internship_proposal_platform_tech.pdf
- a second internship is focused on exploring social and policy aspects: https://www.irif.fr/_media/users/theo/internship_proposal_platform_social.pdf

Please feel free to forward this announcement.
Interested students should send their resume and cover letter at [yrg@irif.fr](mailto:yrg@irif.fr) and [theo@irif.fr](mailto:theo@irif.fr).

Yann Régis-Gianas (Inria, IRIF, OCaml Foundation) and Théo Zimmermann (Inria, IRIF, Coq development team)
      



* Proper way to allocate an OCaml string from C code in OCaml 4.10?
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/proper-way-to-allocate-an-ocaml-string-from-c-code-in-ocaml-4-10/5075/1

** Rwmjones asked


Previously to allocate a string with explicit length (ie.  one which may contain \0 characters) in C code we have used:

#+begin_src c
    strv = caml_alloc_string (count);
    memcpy (String_val (strv), str, count);
#+end_src

In OCaml 4.10 this doesn't compile because String_val returns a ~const char *~.

I could change String_val to Bytes_val, but that feels wrong.  The runtime seems to use ~&Byte_u (strv, 0)~.

It's a shame there's not a caml_copy_string_len function, but what is the proper way to do this for OCaml 4.10+, especially a way that won't break in future and will be compatible with multicore?
      

** yallop suggested


 You can use [[https://github.com/ocaml/ocaml/blob/d408e58ea15ec890a2c6d98441d261db51a6735d/runtime/caml/alloc.h#L38~][~caml_alloc_initialized_string~]]:

#+begin_src c
 CAMLextern value caml_alloc_initialized_string (mlsize_t len, const char *);
#+end_src
      



* OCaml 4.10.0, second beta
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/ocaml-4-10-0-second-beta/5083/1

** octachron announced


The release of OCaml 4.10.0 is near. We have released a second beta
version to help you adapt your softwares and libraries to the new features
ahead of the release.

This new beta contains an update to the internal runtime API that
should make it easier to maintain compatibility across version
for expert users; and a small fix for the analysis of recursive
values.

The source code is available at these addresses:

 https://github.com/ocaml/ocaml/archive/4.10.0+beta2.tar.gz \\
 https://caml.inria.fr/pub/distrib/ocaml-4.10/ocaml-4.10.0+beta2.tar.gz

The compiler can also be installed as an OPAM switch with one of the
following commands.
#+begin_src shell
opam switch create ocaml-variants.4.10.0+beta1 --repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_src
or
#+begin_src shell
opam switch create ocaml-variants.4.10.0+beta1+<VARIANT> --repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_src
where you replace <VARIANT> with one of these:
- afl
- flambda
- fp
- fp+flambda

For a better experience, you can use the opam alpha repository provided by:
#+begin_src shell
opam repository add alpha git://github.com/kit-ty-kate/opam-alpha-repository.git
#+end_src
This repository contains a handful of temporary patched packages, that you can use
while waiting for the packages to be properly patched.
This repository should not be used in production and you probably want to install
it only for the beta switch.

We want to know about all bugs. Please report them here:

 https://github.com/ocaml/ocaml/issues
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[http://alan.petitepomme.net/cwn/][the archive]] or the [[http://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].

#+BEGIN_authorname
[[http://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
