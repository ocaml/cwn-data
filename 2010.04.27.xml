<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2010.04.27</cwn_date>
    <cwn_prev>2010.04.20</cwn_prev>
    <cwn_next>2010.05.04</cwn_next>
    <cwn_date_text>April 20 to 27, 2010</cwn_date_text>
  </cwn_head>
	<cwn_body>
    <cwn_entry>
      <cwn_title>polymorphic (&lt;)</cwn_title>
      <cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/b45266905862cb1b#</cwn_url>
      <cwn_who>Jacques Le Normand asked and Martin Jambon replied</cwn_who>
      <cwn_what>
&gt; Hello caml-list, 
&gt; Why doesn't (&lt;) check for physical equality before traversing the 
&gt; structures? 

If I remember correctly it used to be the case in older versions of OCaml, but 
it changed because of the standard behavior expected from NaN float values. 
The comparison of a NaN value with any other float should always return false, 
and therefore the structural comparison of any data structure containing a NaN 
with itself should also return false: 

# let x = Some [ nan ];; 
val x : float list option = Some [nan] 

# x = x;; 
- : bool = false 

# x == x;; 
- : bool = true 

The solution to your problem is to use Pervasives.compare instead of the 
comparison operators: 

# compare x x;; 
- : int = 0 
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Module type of a structure returned by functor</cwn_title>
      <cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/75a8815a6b511e72#</cwn_url>
      <cwn_who>Dawid Toton asked and Vincent Aravantinos replied</cwn_who>
      <cwn_what>
&gt; I've found that I have more fundamental problem. What is the exact meaning 
&gt; of the following line?
&gt; 
&gt; module type Foo = functor (X:X) -&gt; sig val foo : X.t end
&gt; 
&gt; (1) Foo is not a functor, but it is a type of some functors that map modules 
&gt; to modules
&gt; (2) Foo is a mapping from modules to module types
&gt; 
&gt; Currently I think that it (1) is true and (2) is false. Let me know if I'm 
&gt; wrong.

You're right.

&gt; It means that there is no easy way to get module type of what results from
&gt; functor application. I think that the solution is to separately define
&gt; signature of results of the functor and use "with type" clauses to recreate
&gt; all result module types that are needed.

That's exactly the way to go (BTW is it such a pain? maybe your "with type" is
easily inferred but not easily written?)

&gt; This is not very bad, but I'm still wondering if "module type of..." of 3.12
&gt; will provide elegant solution for this.

I can't remember this point...
      </cwn_what>
      <cwn_who>Andreas also replied</cwn_who>
      <cwn_what>
That's right. A construct for (2), sometimes referred to as "parameterized 
signatures", does not exist in OCaml directly. However, you can encode it 
using a functor with a nested signature in its result: 

  module FooOf (X : X) = 
  struct 
    module type S = sig val foo : X.t end 
  end 

Now, for example: 

  module F (X : X) (Y : FooOf(X).S) = ... 
      </cwn_what>
      <cwn_who>Jacques Garrigue also replied</cwn_who>
      <cwn_what>
You are mixing two things: the signature of a functor (which cannot be
applied to anything, since it is a signature, not a functor), and a
functor returning a signature.
Using ocaml 3.11, you have to wrap the returned signature inside a
structure:

(* Signature wrapped inside a structure *)
module MakeEdgeSig (Big : Big) = struct
 module type S = sig val foo : Big.t option end
end
module MakeEdge (Big : Big) = struct let foo = None end

module Add_boilerplate (Small:Small) =
 struct type t = Small.t type u = t end

module ConvenientEdgeSig (Small:Small) = MakeEdgeSig (Add_boilerplate (Small))
module ConvenientEdge (Small:Small) = MakeEdge (Add_boilerplate (Small))

module SmallX = struct type t = int end
module EdgeX = ConvenientEdge (SmallX)
(* Build the corresponding signature *)
module type EdgeX = ConvenientEdgeSig(SmallX).S

module Algorithm (EdgeX : EdgeX) = struct let doit = EdgeX.foo end

&gt; 3. Will the "module type of..." feature of 3.12 help with this? I can
&gt; imagine e.g.:
&gt;
&gt; module type EdgeX = (module type of (ConvenientEdge (SmallX)))

Indeed, if your only goal is to obtain this specific signature, this
does the trick. But if you want to specify signatures independently of
implementations, you can also use the new destructive substitution
mechanism.

(* Requires ocaml 3.12 *)
(* New signature Edge, parameterized with t *)
module type Edge = sig type t val foo : t option end

(* Edge with type t := Big.t  ==  sig val foo : Big.t option end *)
module MakeEdge (Big : Big) : Edge with type t := Big.t =
 struct let foo = None end

module Add_boilerplate (Small:Small) =
 struct type t = Small.t type u = t end

module ConvenientEdge (Small:Small) : Edge with type t := Small.t =
 MakeEdge(Add_boilerplate (Small))

module SmallX = struct type t = int end
module EdgeX = ConvenientEdge (SmallX)
(* Build the result signature by instantiating Edge signature *)
module type EdgeX = Edge with type t := SmallX.t
(* Alternative approach, obtain the same signature from EdgeX itself *)
module type EdgeX' = module type of EdgeX

module Algorithm(EdgeX : EdgeX) = struct let doit = EdgeX.foo end
      </cwn_what>
    </cwn_entry>
	  <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

Is OCamlâ€™s standard library its weakest link?:
  &lt;http://www.wisdomandwonder.com/article/4730/is-ocamls-standard-library-its-weakest-link&gt;

React 0.9.2:
  &lt;http://erratique.ch/software/react&gt;

Properly Bound:
  &lt;http://alaska-kamtchatka.blogspot.com/2010/04/properly-bound.html&gt;

Slides up for the OCaml Users Conference 2010:
  &lt;http://rwmj.wordpress.com/2010/04/23/slides-up-for-the-ocaml-users-conference-2010/&gt;

The elusive Binary Search:
  &lt;http://alaska-kamtchatka.blogspot.com/2010/04/elusive-binary-search.html&gt;

transparently open compressed files ocaml (now with bz2 support):
  &lt;https://mancoosi.org/~abate/transparently-open-compressed-files-ocaml-now-bz2-support&gt;

CUFP 2010 is coming!:
  &lt;http://ocaml.janestcapital.com/?q=node/76&gt;

Effective ML:
  &lt;http://ocaml.janestcapital.com/?q=node/75&gt;

RHEL 6 public beta 1:
  &lt;http://rwmj.wordpress.com/2010/04/21/rhel-6-public-beta-1/&gt;

Random art in Python:
  &lt;http://math.andrej.com/2010/04/21/random-art-in-python/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>