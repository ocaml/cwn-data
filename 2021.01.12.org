#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[http://alan.petitepomme.net/cwn/2021.01.05.html][Previous Week]] [[http://alan.petitepomme.net/cwn/index.html][Up]] [[http://alan.petitepomme.net/cwn/2021.01.19.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of January 05 to 12, 2021.

#+TOC: headlines 1


* Marshal determinism and stability
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/marshal-determinism-and-stability/7041/28

** Continuing this thread, David Allsopp said


A couple of notes on ~Marshal~, which I don't think have been covered
- Although the guarantee is only between identical versions of OCaml, the implementation actually goes to considerable lengths to maintain backwards compatibility (so a value _written_ by older OCaml remains _readable_ in newer OCaml). Our own testsuite, for example, indirectly [[https://github.com/ocaml/ocaml/blob/trunk/testsuite/tests/lib-hashtbl/compatibility.ml][includes a test which unmarshals a 3.12.1 value]]. I don't know exactly how far back the support goes.
- As it happens, the change which affected Unison in 4.08 was the first breaking change to Marshal since either 4.00 or 4.01. The fact that it doesn't break often (and that the two code paths - at least at present - are small) meant I have suggested a few months back that we could in future add an additional flag in the style of ~Compat_32~ to allow values to be written in a way which should be readable on older versions of OCaml. Indeed, it's small enough that flags could be added for the changes in 4.08 ([[https://github.com/ocaml/ocaml/pull/1683][PR#1683]]) and in 4.11 ([[https://github.com/ocaml/ocaml/pull/8791][PR#8791]]).
- Neither point undermines using alternative formats either for network serialisation or persistent storage, for the many reasons discussed above!
      



* Sedlex + Menhir parser for both tty and file parsing
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/sedlex-menhir-parser-for-both-tty-and-file-parsing/7055/1

** Bernard Sufrin announced


I am a great fan of Menhir, and have used it in several private language projects, using the ulexing
scanner generator to provide Unicode-capable scanners.

Alarmed by the obsolescence of ulexing, and needing a utf8-capable  scanner in a hurry I decided to
(teach myself to) use Sedlex. On the whole the experience was very satisfactory,
and I found it straightforward to produce a variant of the sedlexing library which supports
buffers with variable chunk sizes, thereby enabling efficient lexing on channels connected to
files as well as  immediately responsive lexing on channels connected to terminals.

I also wanted to teach myself how to use the error-reporting, incremental, interfaces to
Menhir-generated parsers. In the hope that it might be useful to others facing the same learning task,
or the problem of adapting Sedlex for efficient interactive use, I have placed the example
mock-S-Expression parser that resulted from this excursion in:

[[https://github.com/sufrin/InteractiveSedlexMenhirExample][Git Repository: github.com/sufrin/InteractiveSedlexMenhirExample]]
      



* First release of awa-ssh
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/ann-first-release-of-awa-ssh/7057/1

** Hannes Mehnert announced


I'm happy to announce that ~awa-ssh~ (https://github.com/mirage/awa-ssh) has just been merged into
opam-repository. It is a pure OCaml implementation of the ssh (secure shell,
https://en.wikipedia.org/wiki/SSH_(Secure_Shell)) protocol.

This is the initial release, please report issues you encounter.

It was initially developed by Christiano Haesbaert in 2016, and revived mid-2019 by myself and in 2020
it was migrated to the MirageOS organization on GitHub for further development and maintenance.

Both client and server code are present in the library (pure code in the main awa package), though the
awa-lwt package implements only a server, and the awa-mirage package implements only a client. Tests
and examples are in the test subdirectory.

The MirageOS client has been successfully used to clone git repositories (on private servers, on
GitHub, etc.). It supports apart from RSA keys also ED25519 keys (and key exchanges).
      



* Introducing Feather: A lightweight shell-scripting library for OCaml
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/introducing-feather-a-lightweight-shell-scripting-library-for-ocaml/7059/1

** Charles announced


I wrote a shell scripting library called [[https://hg.sr.ht/~etc/feather][Feather]]. I like idea of
writing bash-like code quickly, later being able to intersperse OCaml to add more typeful components as
needed. It's kind of like [[https://github.com/janestreet/shexp/][Shexp]] but without the monadic
interface and with Async support. ([[https://hg.sr.ht/~etc/feather_async][Feather_async]])

There's a tutorial and some examples in the link above but here's a quick taste:

#+begin_src ocaml
open Feather

let lines = find "." ~name:"*.ml"
  |. tr "/" "\n"
  |. map_lines ~f:String.capitalize
  |. sort
  |. process "uniq" [ "-c" ]
  |. process "sort" [ "-n" ]
  |. tail 4
  |> collect_lines
in
String.concat ~sep:", " lines |> print_endline
#+end_src
Let me know if you have any feedback! And feel free to file bug reports
[[https://todo.sr.ht/~etc/feather][here]]. Hope it ends up being useful, entertaining, or both!
      



* postdoc researcher and research engineer positions for CHERI and Arm verification
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://sympa.inria.fr/sympa/arc/caml-list/2021-01/msg00023.html

** Peter Sewell announced


We are looking for postdoctoral researchers and postdoctoral or
postgraduate research engineers to help develop semantics and verification
to improve the foundations and security of mainstream computer systems, for
CHERI and Arm system software verification, at the University of
Cambridge.  OCaml expertise to help develop verification tools will be
especially welcome. Closing date 13 January 2021 - see the advert
http://www.jobs.cam.ac.uk/job/28012/.
      



* First ocb (OCaml Badgen) release
:PROPERTIES:
:CUSTOM_ID: 6
:END:
Archive: https://discuss.ocaml.org/t/ann-first-ocb-ocaml-badgen-release/7073/1

** zapashcanon announced


A few days ago, I released [[https://github.com/ocamlpro/ocb][ocb]]. It's a library and a command-line
tool to generate SVG badges.

To get started quickly:

#+begin_src shell
ocb --label Hello --color green --style flat --labelcolor white --status Goodbye
#+end_src

Will gives this result: [[https://raw.githubusercontent.com/OCamlPro/ocb/master/example/cli.svg][SVG
example]].

My first use case was [[https://github.com/ocaml-toml/To.ml][To.ml]] where I'm using
[[https://github.com/aantron/bisect_ppx][bisect_ppx]] to generate and deploy a [[https://ocaml-toml.github.io/To.ml/coverage/][coverage
report]]. I wanted to display the coverage percentage in
the README and tried existing tools but wasn't fully satisfied as they didn't work or were failing
randomly. Now, [[https://github.com/ocaml-toml/To.ml/blob/6ac580848ad1d34ec3032da8672bbd9aca203cc4/.github/workflows/deploy.yml#L34][I'm generating the badge directly in a GitHub
action]].

The project was inspired by [[https://github.com/badgen/badgen][badgen]]. I still have to add support for
icons and to improve the documentation but it's usable.
      



* Release of OCaml-Git v3.0 and co
:PROPERTIES:
:CUSTOM_ID: 7
:END:
Archive: https://discuss.ocaml.org/t/ann-release-of-ocaml-git-v3-0-and-co/7076/1

** Ulugbek Abdullaev announced


We, the [[https://github.com/mirage/ocaml-git][~ocaml-git~]] team, are happy to announce a new major
release of ~ocaml-git v3.0~ and related libraries.

*** Release Notes

**** OCaml-Git v3.0

[[https://github.com/mirage/ocaml-git][*OCaml-Git*]] is a library that implements  ~git~ format and
protocol implementation in pure OCaml. The library is used by libraries such as
[[https://github.com/mirage/irmin][~irmin~]], a git-like distributed database, or
[[https://github.com/dinosaure/pasteur][~pasteur~]], a MirageOS unikernel-based snippet storage service.

***** Changes

The main goal behind this major release was to get better compatibility with various platforms,
including [~MirageOS~](mirage.io), 32-bit platforms, and ~js_of_ocaml~. In order to achieve that, we
broke down ~ocaml-git~ into several components, which are represented as sub-libraries. We will
describe some of those components later in this post.

Along with better support for various platforms, ~ocaml-git 3.0~  also comes with SSH support for
~fetch/push~ and various bug fixes.

The rest of the changes are mostly internal and pave a way for interesting features such as a
full-blown ~git~ [[https://git-scm.com/docs/git-gc][garbage collector]] and wire protocol v2
([[https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html][announcment]] and
[[https://github.com/git/git/blob/master/Documentation/technical/protocol-v2.txt][spec]]).

*References:*

- Full [[https://github.com/mirage/ocaml-git/blob/master/CHANGES.md][changes list]]
- [[https://github.com/mirage/ocaml-git/pull/395][PR]] that introduced the major rewrite of ~ocaml-git~

---

In the new version of ~ocaml-git~, we try to have better separation of concerns by breaking some of the
~ocaml-git~ components into sub-libraries, which do not contain ~git~-specific logic and can be reused
for other purposes.

**** Carton

Git uses [[https://github.com/git/git/blob/master/Documentation/technical/pack-format.txt][PACK files]]
to store old git objects such as commits and transfer objects over wire using git's wire protocols
(~git-nss~ library mentioned below implements
[[https://github.com/git/git/blob/master/Documentation/technical/pack-protocol.txt][v1]] of the protocol;
[[https://github.com/git/git/blob/master/Documentation/technical/protocol-v2.txt][v2]] implementation is
in progress).

[[https://github.com/mirage/ocaml-git/tree/master/src/carton][*Carton*]] is a library to work with PACK
files. The library does not contain git-specific code, so one can easily reuse the library and PACK
format for non-git objects. One can see how ~ocaml-git~ uses ~carton~ for its purposes
[[https://github.com/mirage/ocaml-git/tree/master/src/carton-git][here]].

*References:*

- [[https://github.com/mirage/ocaml-git/issues/375][PR]] that introduces ~carton~

**** Git-NSS (Not So Smart)

When one wants to synchronize with a remote repository using git, they need to use ~git fetch/push~.
Communication and synchronization/negotiation is defined by git *wire protocol*, which has two
versions: older version 1 and newer leaner version 2. The protocols are defined for four wire
transports: HTTP(S), SSH, and ~git://~ (TCP).

[[https://github.com/mirage/ocaml-git/tree/master/src/not-so-smart][~Not-So-Smart~]] library is a library
that allows for such synchronization based on the git wire protocols but without git-specific code,
meaning that files being fetched do not need to be git objects or that there is no assumptions on the
"repository" that one is synchronizing with. So, as well as ~carton~, the library aims to be reusable
for other purposes.

This release features support for SSH using [[https://github.com/mirage/awa-ssh][awa-ssh]] by @hannesm
(see [[https://discuss.ocaml.org/t/ann-first-release-of-awa-ssh/7057][the release]]), support for
[[https://git-scm.com/docs/partial-clone][partial-clone]] (of various ~depth~), and memory consumption
fixes for unikernels.

*Note 1:* The library's name "Not so smart" is a play on the git's "smart" protocol, a part of wire
protocol v1 over HTTP(S) transport.

*Note 2:* only client side logic is implemented for wire protocols. The server-side is planned but not
yet implemented. One can use ~git~ as the server for now.

**** Mimic

[[https://github.com/mirage/ocaml-git/tree/master/src/mimic][*Mimic*]] is a small reimplementation of
[[https://github.com/mirage/ocaml-conduit][~conduit~]], a library that helps to abstract over a transport
protocol such as HTTP(S) or SSH. In other words, the code using ~mimic~ can deal not with different
types that represent an HTTP or SSH connection, but just deal, e.g., read from or write to, with a
~flow~ value, which hides protocol-specific details under its hood.

---

There are several independent libraries that were upgraded along with ~ocaml-git 3.0~.

**** Duff v0.3

[[https://github.com/mirage/duff][*Duff*]] is a library that implements git's
[[http://www.xmailserver.org/xdiff-lib.html][~libXdiff~]] (~xdiff~ algorithm) in OCaml. PACK files use a
binary diff algorithm, ~xdiff~, to compress binary data. More on the project
[[https://github.com/mirage/duff][page]] and release
[[https://discuss.ocaml.org/t/ann-ocaml-git-2-0/2740][notes]] for ~ocaml-git 2.0~.

***** Changes

This release fixes the support for 32-bit architecture platforms.

**** Encore v0.7

[[https://github.com/mirage/encore][*Encore*]] is a library that can create an encoder/decoder based on
the format given. It also ensures isomorphism by construction.

***** Changes

Extensive changes to the API. See the project page.

**** Decompress v1.2.0

[[https://github.com/mirage/decompress][*Decompress*]] is an OCaml implementation of certain
decompression algorithms such as ~Zlib~, ~Gzip~, etc.

***** Changes

~ocaml-git 3.0~ uses new version of ~decompress~ with extensive performance improvements documented in
*Tarides's* blog [[https://tarides.com/blog/2019-08-26-decompress-the-new-decompress-api][API changes]]
and [[https://tarides.com/blog/2019-09-13-decompress-experiences-with-ocaml-optimization][performance
improvements]].

We'd be happy to get your feedback or questions! :-)
      



* Other OCaml News
:PROPERTIES:
:CUSTOM_ID: 8
:END:
** From the ocamlcore planet blog


Here are links from many OCaml blogs aggregated at [[http://ocaml.org/community/planet/][OCaml Planet]].

- [[https://seb.mondet.org/b/0010-delphi-challenge-post-vivum.html][How We Lost at The Delphi Oracle Challenge]]
- [[https://tarides.com/blog/2020-12-14-tarides-sponsors-the-oxbridge-women-in-computer-science-conference-2020][Tarides sponsors the Oxbridge Women in Computer Science Conference 2020]]
- [[https://coq.inria.fr/news/coq-8-12-2-is-out.html][Coq 8.12.2 is out]]
- [[https://frama-c.com/fc-plugins/metacsl.html][First release of MetAcsl plugin]]
- [[https://mirage.io/blog/announcing-mirage-310-release][Announcing MirageOS 3.10]]
- [[https://rescript-lang.org/blog/bucklescript-release-8-4][ ReScript 8.4]]
- [[https://coq.inria.fr/news/coq-8-13beta1-is-out.html][Coq 8.13+beta1 is out]]
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[http://alan.petitepomme.net/cwn/][the archive]] or the [[http://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].

#+BEGIN_authorname
[[http://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
