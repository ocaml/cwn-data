<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2018.09.04</cwn_date>
    <cwn_prev>2018.08.28</cwn_prev>
    <cwn_next>2018.09.11</cwn_next>
    <cwn_date_text>August 28 to September 04, 2018</cwn_date_text>
    <cwn_extra_head></cwn_extra_head>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>mwt initial release - Medium weight (preemptive) threads for Lwt</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-mwt-initial-release-medium-weight-preemptive-threads-for-lwt/2489/1</cwn_url>
      <cwn_who>Hezekiah Carty announced</cwn_who>
      <cwn_what>
I'm happy to announce mwt 0.1.0, a library providing preemptive thread pools for use from Lwt.

[mwt](https://github.com/hcarty/mwt) supports interaction between Lwt and
OCaml's native ~Thread.t~ threads. It is similar to ~Lwt_preemptive~, but with
user-managed pools of threads. A program may create an arbitrary number of
pools. Each thread in a pool has a (potentially unit/meaningless) state which
persists for the life of the thread. This state can be useful, for example, when
working with bindings to a C library which requires initialization, use and
disposal of some value withing a single system thread.

API documentation is available [here](https://hcarty.github.io/mwt/mwt/Mwt/index.html).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Interesting OCaml Articles</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/interesting-ocaml-articles/1867/29</cwn_url>
      <cwn_who>Yotam Barnoy announced</cwn_who>
      <cwn_what>
Two great OPAM articles by @Khady:

https://khady.info/opam-sandbox.html \\
https://khady.info/opam-npm.html
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Good tool to find dead code?</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/good-tool-to-find-dead-code/2497/1</cwn_url>
      <cwn_who>Perry E. Metzger asked</cwn_who>
      <cwn_what>
I'm cleaning up an older piece of OCaml code as I work on it. The author
included a huge personal library (basically their own giant stdlib++) and it
isn't obvious what parts of it are and aren't relevant to the code I'm actually
using.

Are there any good tools for figuring out what code is and isn't live in a program?
      </cwn_what>
      <cwn_who>Christian Lindig replied</cwn_who>
      <cwn_what>
I haven’t used it but this looks promising: [Dead Code Analyzer](https://github.com/LexiFi/dead_code_analyzer).
      </cwn_what>
      <cwn_who>Guillaume Bury also replied</cwn_who>
      <cwn_what>
There was a presentation at ICFP17 about a refactoring tool for ocaml : https://icfp17.sigplan.org/event/ocaml-2017-papers-rotor-first-steps-towards-a-refactoring-tool-for-ocaml
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>FoCaLiZe 0.9.2 released</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2018-09/msg00000.html</cwn_url>
      <cwn_who>François Pessaux announced</cwn_who>
      <cwn_what>
It is my pleasure to announce the new release for FoCaLiZe (the 0.9.2 version).

As for previous releases, some bugs have been fixed in the focalizec compiler.
This version introduces the Dedukti backend written by Raphaël Cauderlier, taking benefits from Zenon_modulo to ease proofs.
The Coq backend now generates Coq code compatible with Coq 8.8. A complete description of changes / new features can in found in the CHANGES file of the distribution.
A complete description of changes / new features can in found in the CHANGES
file of the distribution.

The 0.9.2 release is available from http://focalize.inria.fr at
http://focalize.inria.fr/download/focalize-0.9.2.tgz
Uncompress, extract, then read the INSTALL file in the newly created
directory focalize.0.9.2 and follow the simple instructions written there.


A public GIT repository is also available on GitHub (https://github.com/pessaux-f/focalize),
allowing to fetch the latest development state of FoCaLiZe. However, its content
is not bullet-proof and may be unstable at some times. It reflects the real-time
state of FoCaLiZe and may bring fixes and features not available in previous
releases and that will be part of the next release.
To join people and discussions write to focalize-users@inria.fr.
Implementors also listen to suggestions (and compliments if some ^_^) at the
mail address: focalize-devel@inria.fr.

Enjoy.

For the entire FoCaLiZe implementation group,

François Pessaux.

September 2018

What is it FoCaLiZe ?
---------------------

FoCaLiZe is an integrated development environment to write high integrity
programs and systems. It provides a purely functional language to formally
express specifications, describe the design and code the algorithms.
Within the functional language, FoCaLiZe provides a logical framework to
express the properties of the code. A simple declarative language provides
the natural expression of proofs of properties them from within the program
source code.

The FoCaLiZe compiler extracts statements and proof scripts from the source
file, to pass them to the Zenon proof generator to produce Coq proof terms
that are then formally verified.

The FoCaLiZe compiler also generates the code corresponding to the
program as an Objective Caml source file. This way, programs developed in
FoCaLiZe can be efficiently compiled to native code on a large variety of
architectures.

Last but not least, FoCaLiZe automatically generates the documentation
corresponding to the development, a requirement for high evaluation
assurance.

The FoCaLiZe system provides means for the developers to formally express
their specifications and to go step by step (in an incremental approach) to
design and implementation, while proving that their implementation
meets its specification or design requirements. The FoCaLiZe language offers
high level mechanisms such as inheritance, late binding, redefinition,
parametrization, etc. Confidence in proofs submitted by developers or
automatically generated ultimately relies on Coq formal proof verification.

FoCaLiZe is a son of the previous Focal system. However, it is a completely
new implementation with vastly revised syntax and semantics, featuring a
rock-solid infrastructure and greatly improved capabilities.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Introducing Sketch.sh: An interactive sketchbook for OCaml and ReasonML</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/introducing-sketch-sh-an-interactive-sketchbook-for-ocaml-and-reasonml/2465/7</cwn_url>
      <cwn_who>Khoa Nguyen announced</cwn_who>
      <cwn_what>
Quick update: converting between ReasonML and OCaml has been deployed to main website. Now when changing language, the code will be converted automatically.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>HTTP/2 framing</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-http-2-framing/2515/1</cwn_url>
      <cwn_who>Anurag Soni announced</cwn_who>
      <cwn_what>
I have completed the implementation of parsers and serializers for HTTP/2 frame
types. It uses Angstrom/Faraday for the implementation. My first goal was to
just focus on a working implementation, so there will be room for improvement
for the API when it comes to simplicity, good OCaml style and/or performance, so
feedback is welcome about that.

https://github.com/anuragsoni/h2
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Ocaml Github Pull Requests</cwn_title>
      <cwn_who>Gabriel Scherer and the editor compiled this list</cwn_who>
      <cwn_what>
Here is a sneak peek at some potential future features of the Ocaml
compiler, discussed by their implementers in these Github Pull Requests.

- [[https://github.com/ocaml/ocaml/pull/2010][Improve stdlib support for ~bool~]]
- [[https://github.com/ocaml/ocaml/pull/2011][Improve stdlib support for ~int~]]
- [[https://github.com/ocaml/ocaml/pull/2016][Private items in structures and signatures]]
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[http://ocaml.org/community/planet/][OCaml Planet]].

- [[http://jobs.github.com/positions/9e8ba450-e72e-11e7-926f-6ce07b7015c8][Full Time: Compiler Engineer at Jane Street in New York &amp; London]]
- [[http://jobs.github.com/positions/0a9333c4-71da-11e0-9ac7-692793c00b45][Full Time: Software Developer (Functional Programming) at Jane Street in New York, NY; London, UK; Hong Kong]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
