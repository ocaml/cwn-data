<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2018.10.02</cwn_date>
    <cwn_prev>2018.09.25</cwn_prev>
    <cwn_next>2018.10.09</cwn_next>
    <cwn_date_text>September 25 to October 02, 2018</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Dune 1.3.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-dune-1-3-0/2621/1</cwn_url>
      <cwn_who>Rudi Grinberg announced</cwn_who>
      <cwn_what>
It is my pleasure to announce the release of Dune 1.3.0. This release does not contain many features, but it does contain a few important bug fixes. Everyone is encouraged to upgrade.

Happy Hacking.

*** 1.3.0 (23/09/2018)

- Support colors on Windows (#1290, @diml)

- Allow ~dune.configurator~ and ~base~ to be used together (#1291, fix
  #1167, @diml)

- Support interrupting and restarting builds on file changes (#1246,
  @kodek16)

- Fix findlib-dynload support with byte mode only (#1295, @bobot)

- Make ~dune rules -m~ output a valid makefile (#1293, @diml)

- Expand variables in ~(targets ..)~ field (#1301, #1320, fix #1189, @nojb,
  @rgrinberg, @diml)

- Fix a race condition on Windows that was introduced in 1.2.0
  (#1304, fix #1303, @diml)

- Fix the generation of .merlin files to account for private modules
  (@rgrinberg, fix #1314)

- Exclude the local opam switch directory (~_opam~) from the list of watched
  directories (#1315, @dysinger)

- Fix compilation of the module generated for ~findlib.dynload~
  (#1317, fix #1310, @diml)

- Lift restriction on ~copy_files~ and ~copy_files#~ stanzas that files to be
  copied should be in a subdirectory of the current directory.
  (#1323, fix #911, @nojb)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>llpp v29</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2018-09/msg00044.html</cwn_url>
      <cwn_who>moosotc announced</cwn_who>
      <cwn_what>
New version of llpp (tagged v29) is now available at:
- http://repo.or.cz/w/llpp.git
- https://github.com/moosotc/llpp/

*** Blurb

llpp is a graphical PDF pager, which aims to superficially resemble
less(1)

*** Links
videos - https://www.youtube.com/watch?v=qNszKpCUXhQ&amp;list=PLLAukRknwSgFhpYsDKHY0 \\
bug tracker - https://github.com/moosotc/llpp/issues

*** Changes (relative to v28(aka llipposuction))

- Make things build with macOS 10.14
- Ensure that things build/work with mupdf 1.14.0-rc1
- Cosmetics
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Jupyter -- a better UTop?</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/jupyter-a-better-utop/2633/1</cwn_url>
      <cwn_who>nil announced</cwn_who>
      <cwn_what>
I recently figured out how to get an alternative REPL which has some things that UTop doesn't. It's the Jupyter console, which runs in a terminal (and is less well-known than the Jupyter notebook).

Here's how to set it up:
- install jupyter by a method that works for your OS.
- ~opam install jupyter~
- set up ocaml as a kernel for jupyter, as explained in the package doc: ~jupyter kernelspec install --name ocaml-jupyter "$(opam config var share)/jupyter"~
- in ~jupyter kernelspec list~ find the new kernel directory and edit the JSON file there, for instance to include a custom ~.ocamlinit~. In mine I added ~#use topfind;;~
- enable vi edit mode by ~echo "c.ZMQTerminalInteractiveShell.editing_mode='vi'" &gt;&gt; ~/.jupyter/jupyter_console_config.py~ (entirely non optional ;) )

Then start your new REPL by ~jupyter console --kernel=ocaml-jupyter~. Thanks to
the cool ocaml jupyter [package](https://github.com/akabe/ocaml-jupyter) it will
use Merlin to autocomplete and it will have a ~vi~ mode!
You can also use various editor plugins to send code cells to the kernel
directly from an editing buffer. Right now, it's missing the
~UTop.set_create_implicits~ but that not a huge problem. Overall, pretty neat in
my book!
      </cwn_what>
      <cwn_who>Carmelo Piccione replied</cwn_who>
      <cwn_what>
Interesting!

As a (k)ubuntu linux user at least, I had to add ~--user~ to step #3 to avoid running as ~sudo~. I also had to manually create the ~~/.jupyter~ directory before running the ~echo~ command.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>ocamlearlybird 0.1.0 - make OCaml debugging less sucks</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-ocamlearlybird-0-1-0-make-ocaml-debugging-less-sucks/2646/1</cwn_url>
      <cwn_who>文宇祥 announced</cwn_who>
      <cwn_what>
I'm happy to announce the first release of *[ocamlearlybird](https://github.com/hackwaly/ocamlearlybird)*.

~ocamlearlybird~  is a debug adapter purely written in OCaml. Currently it has these features:

- Auto discover sources heuristically
- Line breakpoints and column breakpoints
- Basic  ~next~ ,  ~step in~ ,  ~step out~  and  ~continue~  commands
- Inspect stack frames, local variables, closure variables and global variables

You can use ~ocamlearlybird~ in VS Code by install [ocaml-debugger extension](https://marketplace.visualstudio.com/items?itemName=hackwaly.ocaml-debugger).

https://user-images.githubusercontent.com/540298/46250923-fbd51c00-c477-11e8-9feb-73e1265df899.gif

Enjoy!
      </cwn_what>
      <cwn_who>Christian Lindig asked and 文宇祥 replied</cwn_who>
      <cwn_what>
&gt; Could you talk a bit about how it works?

It use env CAML_DEBUG_SOCKET and [debugger.h](https://github.com/ocaml/ocaml/blob/trunk/runtime/caml/debugger.h) to talk to the debugger in vm.

&gt; Does it work with native code?

It only work with bytecode with debug information - compiled with -g option.

&gt; How does it hook into the execution of a program?

Mostly same as the [ocamldebug's implementation](https://github.com/ocaml/ocaml/tree/trunk/debugger)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Ocaml Github Pull Requests</cwn_title>
      <cwn_who>Gabriel Scherer and the editor compiled this list</cwn_who>
      <cwn_what>
Here is a sneak peek at some potential future features of the Ocaml
compiler, discussed by their implementers in these Github Pull Requests.

- [[https://github.com/ocaml/ocaml/pull/2073][Asm_directives and Target_system]]
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[http://ocaml.org/community/planet/][OCaml Planet]].

- [[http://jobs.github.com/positions/0a9333c4-71da-11e0-9ac7-692793c00b45][Full Time: Software Developer (Functional Programming) at Jane Street in New York, NY; London, UK; Hong Kong]]
- [[http://jobs.github.com/positions/9e8ba450-e72e-11e7-926f-6ce07b7015c8][Full Time: Compiler Engineer at Jane Street in New York &amp; London]]
- [[https://coq.inria.fr/news/147.html][Coq 8.8.2 is out]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
