<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2004.08.24</cwn_date>
  <cwn_prev>2004.08.17</cwn_prev>
  <cwn_next>2004.08.31</cwn_next>
  <cwn_date_text>17 to 24 August, 2004</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>CFG Parsers</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200408/msg00290.html</cwn_url>
    <cwn_who>Continuing the thread from last week, Alex Cowie added</cwn_who>
    <cwn_what>
Christian Lindig&apos;s  lexer (lc) and parser (pc,pc2) combinators are also
included in the Tony XML parser package
(http://www.st.cs.uni-sb.de/~lindig/src/) available via the Caml Humps,
although it is not obvious from the package description!
    </cwn_what>
    <cwn_who>Christian Lindig also said</cwn_who>
    <cwn_what>
Diego Olivier Fernandez Pons wrote:
&gt;- Christian Lindig _lexer_ combinators
&gt;http://caml.inria.fr/caml-list/0870.html
&gt;The library doesn&apos;t seem to be available from Lindig&apos;s pages anymore

That&apos;s true but you can still find them here:

http://www.cminusminus.org/rsync/qc--linux-x86/cllib/
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Objective Caml version 3.08.1</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200408/msg00292.html</cwn_url>
    <cwn_who>Damien Doligez announced</cwn_who>
    <cwn_what>
This is to announce the availability of Objective Caml 3.08.1.

This is mainly a bug-fix release; see below for the list of changes.
In addition to bug fixes, we have slightly relaxed the licencing
conditions, and clarified the licence for the emacs (*.el) files.
These changes, prompted by discussions with the Debian legal team,
consist in the removal of two problematic clauses in the QPL. This
new licence is thus slightly less constraining than the old version.

Only the source is available at the moment.  We will provide some
binaries in the near future.

It is available at http://caml.inria.fr/ocaml/distrib.html

-- Damien Doligez for the Caml Team


Objective Caml 3.08.1:
----------------------

Licence:
- The emacs files are now under GPL
- Slightly relaxed some conditions of the QPL

Bug fixes:
- ld.conf now generated at compile-time instead of install-time
- fixed -pack on Windows XP (PR#2935)
- fixed Obj.tag (PR#2946)
- added support for multiple dlopen in Darwin
- run ranlib when installing camlp4 libraries (PR#2944)
- link camlp4opt with -linkall (PR#2949)
- camlp4 parsing of patterns now conforms to normal parsing (PR#3015)
- install camlp4 *.cmx files (PR#2955)
- fixed handling of linefeed in string constants in camlp4 (PR#3074)
- ocamldoc: fixed display of class parameters in HTML and LaTeX
(PR#2994)
- ocamldoc: fixed display of link to class page in html (PR#2994)
- Windows toplevel GUI: assorted fixes (including PR#2932)

Misc:
- added -v option to ocamllex
- ocamldoc: new -intf and -impl options supported (PR#3036)
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Programming with modules</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200408/msg00318.html</cwn_url>
    <cwn_who>Erik de Castro Lopo asked</cwn_who>
    <cwn_what>
Say I have a module (main.ml) and an interface (main.mli) which
defines a type maintype.

However, main.ml is getting a little large and I&apos;d like to split
some of the functionality out into another file, but still have
access to maintype in the new file. Unfortunately, Ocaml doesn&apos;t
allow mutual dependancies across acoss files.

Does anybody have any suggestions on how to get around this?
    </cwn_what>
    <cwn_who>Richard Jones answered</cwn_who>
    <cwn_what>
Preprocessing with /lib/cpp is possible:

-------------------------------------------------- main.ml
#include &quot;main-part1.ml&quot;
#include &quot;main-part2.ml&quot;

-------------------------------------------------- main-part1.ml
let v1 = 1

-------------------------------------------------- main-part2.ml
let v2 = v1 + 1;;
print_endline (&quot;v2 = &quot; ^ string_of_int v2);;



$ ocamlc -pp /lib/cpp main.ml
$ ./a.out
v2 = 2
    </cwn_what>
    <cwn_who>Benjamin Geer added</cwn_who>
    <cwn_what>
Or you can use modules:

-------------------------------------------------- main.ml
type maintype = Mytypes.maintype ;;
let foo = Helper.foo ;;

-------------------------------------------------- mytypes.ml
type maintype = int list ;;

-------------------------------------------------- helper.ml
let foo x y = x + y ;;
    </cwn_what>
    <cwn_who>Brian Hurt suggested</cwn_who>
    <cwn_what>
Push maintype down the module heirarchy- up to an including creating a
special module which only contains maintype (and some supporting
functions), which everything depends upon.

More generally, refactor your code.  Find hunks of code which are already
mostly independent and consider how to make them more independent, so you
can cut them out into their own modules.  Limit interactions between
different parts of the code, and develop interfaces for those interactions
which are necessary.  This actually leads to more maintainable code.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Some logo for your OCaml related websites</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200408/msg00330.html</cwn_url>
    <cwn_who>Olivier Grisel announced</cwn_who>
    <cwn_what>
Some time ago, there was a thread [1] on this list about setting up a
community website for OCaml users/developers. Richard was planning to
setup a wiki and a gforge server. In the mean time, here is my little
contribution to the branding of such a website: a set of logo proposals
based on the classical gif file (the camel face with sun glasses):
http://champi.champiland.homelinux.org/~olivier/ocaml-logos.html
I provide the SVG source file so that anybody can further enhance this
early proposal.

[1] http://caml.inria.fr/archives/200405/msg00412.html
    </cwn_what>
    <cwn_who>Benjamin Geer said and Olivier Grisel answered</cwn_who>
    <cwn_what>
Benjamin Geer wrote:
&gt;Olivier Grisel wrote:
&gt;
&gt;&gt;I feel very sorry butI wasn&apos;t aware of the origin of this &quot;Joe Camel&quot;
&gt;&gt;think.
&gt;
&gt;
&gt;It was a huge, very controversial advertising campaign... a lot of
&gt;people were (and still are) very angry about it, all over the world.
&gt;
&gt;&gt;I can remove the grass bit to try to break the association with the
&gt;&gt;Joe Camel.
&gt;&gt;
&gt;&gt;What do you think ?
&gt;
&gt;
&gt;I don&apos;t think it would help.  The shape of the camel face (even without
&gt;the sunglasses) is what makes it Joe Camel.  This was the intention of
&gt;the OCaml team when they chose this logo, apparently as a joke (in very
&gt;bad taste, I think).
&gt;
&gt;I think OCaml needs a completely new logo.
&gt;
&gt;The problem of how to make it different from the Perl logo is
&gt;interesting.  Actually O&apos;Reilly has a trademark on the use of a camel to
&gt;represent a programming language:
&gt;
&gt;http://perl.oreilly.com/usage
&gt;
&gt;I asked them about this last year, and they said they currently had no
&gt;position on the use of a camel to represent the OCaml language.  I don&apos;t
&gt;know whether they might eventually cause trouble.  You might want to ask
&gt;them about it.
&gt;
&gt;Another alternative would be to make a logo that doesn&apos;t represent a
&gt;camel at all.

I agree. Anybody has a better idea ? What could symobolize the ocaml
programming language ? OReilly seems to think a horse[1] might do, but
I&apos;m  not quite so sure :o)

[1] http://web.linuxfr.org/2001/03/05/2585.html
    </cwn_what>
    <cwn_who>Damien Doligez suggested</cwn_who>
    <cwn_what>
&gt;Another alternative would be to make a logo that doesn&apos;t represent a
&gt;camel at all.

A pearl in its oyster?
    </cwn_what>
    <cwn_who>William D. Neumann delivered</cwn_who>
    <cwn_what>
&gt; A pearl in its oyster?

Heh.  I thought this suggestion was funny enough that I decided to whip something together to see
how it looks.  Being somewhat pleased with the results, I decided to let you guys have a peek if you
want.  The images are located at http://www.unm.edu/~wdnx/camlpearl.html .
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Continuations</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200408/msg00246.html</cwn_url>
    <cwn_who>Sébastien Hinderer asked and Nathaniel Gray answered</cwn_who>
    <cwn_what>
&gt; Is there a good tutorial or bibliographic reference about programming
&gt; with continuations around ?
&gt; I would be interested even by documentations dealing with continuations in
&gt; general (that is, not with Ocaml in particular).

I wrote a &quot;simple&quot; tutorial on continuations that you might try
reading.  You can find it here:
   http://mojave.caltech.edu/papers/cont-tut.ps

Let me know if there is anything that you think could be improved in
terms of clarity.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>ocamllex tutorial (ver 0.1)</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200408/msg00360.html</cwn_url>
    <cwn_who>SooHyoung Oh announced</cwn_who>
    <cwn_what>
If one doesn&apos;t have knowledge for lexcial analyzer or parsing theory, it&apos;s
not sufficient for an user to use &quot;ocamllex&quot; and &quot;ocamlyacc&quot; after reading
manuals of these utilities only.

One has to read &quot;lex&quot;/&quot;flex&quot; manual and &quot;yacc&quot;/&quot;bison&quot; manual before using
&quot;ocamllex&quot; and &quot;ocamlyacc&quot;.

So, I thought it would be helpful if ocaml community has &quot;ocamllex&quot; and
&quot;ocamlyacc&quot; tutorials.

This is my first contribute to &quot;ocamllex tutorial&quot; and I&apos;m preparing the
companion &quot;ocamlyacc tutorial&quot;, too.

Any comment will be appreciated.

--- Abstract ---

This is a tutorial on how to use ocamllex which is distributed with Ocaml
language.

This tutorial borrowed lots of part from flex manual, and some part from
Chap. 12 Lexer and parser generators (ocamllex, ocamlyacc).

The companion tutorial for ocamlyacc will be available in one or two weeks
later.

Please mail all comments and suggestions to &lt;shoh at compiler dot kaist dot
ac dot kr&gt;

This tutorial is work-in-progress. The latest version can be found at
http://pllab.kaist.ac.kr/~shoh/ocaml/ocamllex_ocamlyacc/ocamllex-tutorial/index.html .

Last updated: 2004-08-24
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
