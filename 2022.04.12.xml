<?xml version="1.0" encoding="utf-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2022.04.12</cwn_date>
    <cwn_prev>2022.04.05</cwn_prev>
    <cwn_next>2022.04.19</cwn_next>
    <cwn_date_text>April 05 to 12, 2022</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>LexiFi is hiring!</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/job-fulltime-internship-paris-lexifi-is-hiring/9648/1</cwn_url>
      <cwn_who>Alain Frisch announced</cwn_who>
      <cwn_what>
üì¢ [LexiFi](https://www.lexifi.com) is hiring!

‚úîÔ∏è Software Engineer (full-time): https://lnkd.in/evhkxTg

‚úîÔ∏è Software Development Internship: https://lnkd.in/gb-bdDA9

LexiFi is a software editor, based in Paris. We have been happily using OCaml üê™ for more than 20 years in our entire
software stack, from backend components to UI (web &amp; native) front-end, and we contribute back to the OCaml community
(check out our blog post : https://www.lexifi.com/blog/ocaml/ocaml-open-source/)

Don't hesitate to contact me directly if you want to learn more about the positions before applying!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>D√©veloppeur principal √† plein temps d'Alt-Ergo chez OCamlPro</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/job-fulltime-paris-developpeur-principal-a-plein-temps-dalt-ergo-chez-ocamlpro/9660/1</cwn_url>
      <cwn_who>Fabrice Le Fessant announced</cwn_who>
      <cwn_what>
Alt-Ergo est l'un des solveurs SMT les plus efficaces pour la v√©rification formelle de code. Il est ainsi utilis√©
derri√®re des ateliers tels que Why3, Frama-C et Spark. Initialement d√©velopp√© par Sylvain Conchon au LRI, il est
aujourd'hui maintenu par OCamlPro, gr√¢ce aux financements du Club Alt-Ergo (AdaCore, Trust-in-Soft, Thal√®s, MERCE,
CEA List), √† des contrats bilat√©raux d'√©volution et √† des projets collaboratifs.

OCamlPro souhaite aujourd'hui recruter un d√©veloppeur principal √† temps plein pour Alt-Ergo, pour compl√©ter son
√©quipe m√©thodes formelles et acc√©l√©rer l'√©volution d'Alt-Ergo.  Disposant d'une exp√©rience dans les m√©thodes
formelles, ses missions seront :

- de d√©couvrir le projet Alt-Ergo et tous ses composants (prouveur, interface graphique, etc.) et d'en comprendre le fonctionnement √† travers l'exploration du code et la lecture d'articles scientifiques;
- d'√©laborer la roadmap de maintenance √©volutive d'Alt-Ergo, en collaboration avec les membres du Club Alt-Ergo, et de proposer des am√©liorations qui pourront √™tre financ√©es au travers de contrats bilat√©raux ou de projets collaboratifs;
- de participer avec l'√©quipe √† la maintenance corrective d'Alt-Ergo et de fournir du support aux membres du Club Alt-Ergo;
- de participer √† l'encadrement de stages et de th√®ses CIFRE autour d'Alt-Ergo et des solveurs SMT en g√©n√©ral;
- de suivre l'actualit√© des solveurs SMTs et des travaux scientifiques connexes, et de maintenir des collaborations avec les experts acad√©miques du domaine;

Int√©gr√© au sein de l'√©quipe M√©thodes Formelles d'OCamlPro, il b√©n√©ficiera de leur exp√©rience et leur fera b√©n√©ficier
de son expertise croissante dans l'utilisation d'Alt-Ergo. Outre la maintenance d'Alt-Ergo, l'√©quipe M√©thodes
Formelles d'OCamlPro participe √† diverses activit√©s:

- D√©veloppement d'outils open-source pour les m√©thodes formelles, tels que Dolmen, Matla, etc.
- Expertises sur WhyML, TLA, Coq, et autres langages de sp√©cification et de v√©rification;
- Certification de logiciels pour les Crit√®res Communs (EAL6 et plus)
- Sp√©cification et v√©rification formelle de smart contracts (Solidity, etc.)

Les bureaux d'OCamlPro sont dans le 14√®me arrondissement de Paris (Al√©sia). L'entreprise est connue pour son √©quipe
sympathique, son excellence technique, sa productivit√©, ses valeurs et son √©thique.

Si ce poste vous int√©resse, n'h√©sitez pas √† envoyer votre CV √†:

contact@ocamlpro.com

Pour plus d'informations sur OCamlPro:

https://www.ocamlpro.com/

Pour plus d'informations sur Alt-Ergo:

https://alt-ergo.ocamlpro.com/

Pour plus d'informations sur le Club Alt-Ergo:

https://www.ocamlpro.com/club-alt-ergo
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Using an external JavaScript file in js_of_ocaml</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/using-an-external-javascript-file-in-js-of-ocaml/9661/1</cwn_url>
      <cwn_who>John Whitington asked</cwn_who>
      <cwn_what>
I am a beginner at both Javascript and ~js_of_ocaml~, so I may be mixing up all sorts of mistakes and misconceptions
here.

I have compiled up an existing project, my command line PDF tools, using ~js_of_ocaml~, and all is well:

#+begin_example
$ node cpdf.js -info hello.pdf
Encryption: Not encrypted
Permissions:
Linearized: false
Version: 1.1
Pages: 1
#+end_example

Like magic! But I had to comment out the parts of my code which use external C code of course - that is zlib and some
encryption primitives. So now I wish to bind javascript libraries for those. I am experimenting with a simple library
of my own, first, which is given on the command line to ~js_of_ocaml~ as ~foomod.js~:

#+begin_src js
foo = 42;
#+end_src

I can get to this global variable easily from OCaml:

#+begin_src ocaml
let foo = Js.Unsafe.global##.foo
#+end_src

But now I want to do things better, and I change ~foomod.js~ to:

#+begin_src js
exports.foo = 42;
#+end_src

How can I get to that? Giving ~foomod.js~ on the ~js_of_ocaml~ command line includes the contents of ~foomod.js~ in
some way, but does not contain the string ~foomod~, so I'm not sure how to get to the foomod's variables and
functions. How to I access them? In the node REPL, I can simply do:

#+begin_src js
> foomod = require('./foomod.js');
{ foo; 42 }
> foomod.foo;
42
#+end_src

I have read the ~js_of_ocaml~ help page on how to bind JS modules:

https://ocsigen.org/js_of_ocaml/latest/manual/bindings

I imagine if I could get over this hump, all the rest of the information I need will be there.
      </cwn_what>
      <cwn_who>Nicol√°s Ojeda B√§r replied</cwn_who>
      <cwn_what>
Not exactly what you asked, but if you just want to provide a JS version of some C primitive

#+begin_src ocaml
external foo : unit -> int = "caml_foo"
#+end_src

you can do this by writing the following in your ~.js~ file:

#+begin_src js
//Provides: caml_foo
function caml_foo() {
  return 42;
}
#+end_src

Then ~js_of_ocaml~ will automatically replace calls to the external function by a call to its JS implementation.

This is the same mechanism used by ~js_of_ocaml~ to implement its own JS version of the OCaml runtime, see eg

https://github.com/ocsigen/js_of_ocaml/blob/3850a67b1cb00cfd2ee4399cf1e2948062884b92/runtime/bigarray.js#L328-L335
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>diskuvbox: small set of cross-platform CLI tools</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-diskuvbox-small-set-of-cross-platform-cli-tools/9663/1</cwn_url>
      <cwn_who>jbeckford announced</cwn_who>
      <cwn_what>
*TLDR*:
#+begin_example
$ opam update
$ opam install diskuvbox

$ diskuvbox copy-dir --mode 755 src1/ src2/ dest/
$ diskuvbox copy-file --mode 400 src/a dest/b
$ diskuvbox copy-file-into src1/a src2/b dest/
$ diskuvbox touch-file x/y/z

$ diskuvbox find-up . _build
Z:/source/_build

$ diskuvbox tree --max-depth 2 --encoding=UTF-8 .
.
‚îú‚îÄ‚îÄ CHANGES.md
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ _build/
‚îÇ   ‚îú‚îÄ‚îÄ default/
‚îÇ   ‚îú‚îÄ‚îÄ install/
‚îÇ   ‚îî‚îÄ‚îÄ log
#+end_example

*Problem*: When writing cram tests, Dune rules and Opam build steps, often we default to using GNU binaries
(~/usr/bin/*~) available on Linux (ex. ~/usr/bin/cp -R~). Unfortunately these commands rarely work on Windows, and as
a consequence Windows OCaml developers are forced to maintain Cygwin or MSYS2 installations to get GNU tooling.

*Solution*: Provide some of the same functionality for Windows and macOS that the GNU binaries in ~/usr/bin/*~ do in
Linux.

~diskuvbox~ is a single binary that today provides an analog for a very small number of binaries that I have needed
in the Diskuv Windows OCaml distribution. It is liberally licensed under Apache v2.0. *With your PRs it could emulate
much more!*

~diskuvbox~ has CI testing for Windows, macOS and Linux. Usage and help are available in the diskuvbox README:
https://github.com/diskuv/diskuvbox#diskuv-box

*~diskuvbox~ also has a OCaml library, but consider the API unstable until version 1.0.*

Alternatives:
- There are some shell scripting tools like [shexp](https://github.com/janestreet/shexp) and [feather](https://github.com/charlesetc/feather) that give you POSIX pipes in OCaml-friendly syntax. I feel these complement Diskuv Box.
- Dune exposes ~(copy)~ to copy a file in Dune rules; theoretically more operations could be added.

Internally ~diskuvbox~ is a wrapper on the excellent [bos - Basic OS
interaction](https://erratique.ch/software/bos/doc/Bos/index.html) library.

*** Acknowledgements

The first implementations of Diskuv Box were implemented with the assistance of the [OCaml Software Foundation
(OCSF)](http://ocaml-sf.org), a sub-foundation of the [INRIA Foundation](https://www.inria.fr).

Two OCaml libraries ([bos](https://erratique.ch/software/bos) and [cmdliner](https://erratique.ch/software/cmdliner))
are essential to Diskuv Box; these libraries were created by [Daniel B√ºnzli](https://erratique.ch/profile)
(@dbuenzli) .

*** Examples

The following are examples that have been condensed from the [diskuvbox README.md](https://github.com/diskuv/diskuvbox#diskuv-box) ...

**** Using in Dune cram tests

#+begin_example
  $ install -d a/b/c/d/e/f
  $ install -d a/b2/c2/d2/e2/f2
  $ install -d a/b2/c3/d3/e3/f3
  $ install -d a/b2/c3/d4/e4/f4
  $ install -d a/b2/c3/d4/e5/f5
  $ install -d a/b2/c3/d4/e5/f6
  $ touch a/b/x
  $ touch a/b/c/y
  $ touch a/b/c/d/z

  $ diskuvbox tree a --max-depth 10 --encoding UTF-8
  a
  ‚îú‚îÄ‚îÄ b/
  ‚îÇ   ‚îú‚îÄ‚îÄ c/
  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ d/
  ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ e/
  ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ f/
  ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ z
  ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ y
  ‚îÇ   ‚îî‚îÄ‚îÄ x
  ‚îî‚îÄ‚îÄ b2/
      ‚îú‚îÄ‚îÄ c2/
      ‚îÇ   ‚îî‚îÄ‚îÄ d2/
      ‚îÇ       ‚îî‚îÄ‚îÄ e2/
      ‚îÇ           ‚îî‚îÄ‚îÄ f2/
      ‚îî‚îÄ‚îÄ c3/
          ‚îú‚îÄ‚îÄ d3/
          ‚îÇ   ‚îî‚îÄ‚îÄ e3/
          ‚îÇ       ‚îî‚îÄ‚îÄ f3/
          ‚îî‚îÄ‚îÄ d4/
              ‚îú‚îÄ‚îÄ e4/
              ‚îÇ   ‚îî‚îÄ‚îÄ f4/
              ‚îî‚îÄ‚îÄ e5/
                  ‚îú‚îÄ‚îÄ f5/
                  ‚îî‚îÄ‚îÄ f6/
#+end_example

**** Using in Opam ~build~ steps

#+begin_example
build: [
  ["diskuvbox" "copy-file-into" "assets/icon.png" "assets/public.gpg" "%{_:share}%"]
]
#+end_example

**** Using in Dune rules

#+begin_src lisp
(rule
 (targets diskuvbox.corrected.ml diskuvbox.corrected.mli)
 (deps
  (:license %{project_root}/etc/license-header.txt)
  (:conf    %{project_root}/etc/headache.conf))
 (action
  (progn
   (run diskuvbox copy-file -m 644 diskuvbox.ml  diskuvbox.corrected.ml)
   (run diskuvbox copy-file -m 644 diskuvbox.mli diskuvbox.corrected.mli)
   (run headache -h %{license} -c %{conf} %{targets})
   (run ocamlformat --inplace --disable-conf-files --enable-outside-detected-project %{targets}))))
#+end_src
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
