<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2005.10.11</cwn_date>
  <cwn_prev>2005.10.04</cwn_prev>
  <cwn_next>2005.10.18</cwn_next>
  <cwn_date_text>04 to 11 October, 2005</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>ocamldap 2.1.5</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/30679</cwn_url>
    <cwn_who>Eric Stokes announced</cwn_who>
    <cwn_what>
I am pleased to announce the immediate availability of Ocamldap 2.1.5.

(NOTE to hump maintainers, since 2.0 Ocamldap has been a native Ocaml  
library,
   it should no longer be categorized as a binding to a C library)

Ocamldap is a toolkit for working with LDAP directory services,  
features include
- A full featured, high performance LDAP client library
     - A set of low level primitives similar to the C library
     - A high level object oriented interface
     - Schema aware local object representations
     - An experimental library for account management
     - An experimental implementation of transactions  
(draft_zeilenga_ldaptxn)
- A library for constructing LDAP servers
- An rfc2252 schema checker
- An LDIF v1 parser and pretty printer (including change records)
- An ldap filter parser and pretty printer
- An ldap dn parser and pretty printer

Major Changes Since the Last Announce
- Major improvement in the documentation
- I spent a lot of time with Apple's excellent Shark tool, and was  
able to get a 2.5x decoder speedup (Parsing 4.0 Mb/s of BER on an  
800Mhz G4). Based on the data I'm seeing from Shark I do not expect  
any further major performance increases in the decoder, but given the  
level of performance it is currently at, and the age of my hardware,  
I see no reason to care.
- Experimental implementation of transactions across multiple objects
- Some bug fixes

Ocamldap is available on GODI, and via http://ocamldap.sourceforge.net
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Automatic interfacing of ocaml to c?</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/30685</cwn_url>
    <cwn_who>Chris Campbell asked and Jon Harrop answered</cwn_who>
    <cwn_what>
&gt; Has anyone done any work on this?

camlidl

&gt; I'm in the process of attempting a 
&gt; semi autogenerated binding to opengl using the mesa xml specifications
&gt; of the interface and lablgl.

Have you seen Isaac Trott's idlgl bindings, written using camlidl?

&gt; This is very early days; so far all I've 
&gt; done is map the flat (a portion of the) gl enumeration space to a set
&gt; of types and values, then auto generate tables mapping the ml variants
&gt; to gl enumeration values ala lablgl.
&gt;
&gt; I have a good idea of what it will do and am just looking for advice
&gt; from anyone who has done this sort of thing before (if any).

I have tried and failed to write bindings to the more complicated (read 
"hideous") parts of OpenGL and GLU, specifically the GLU tesselator.

&gt; The main 
&gt; problems so far arise from the flat gl space and wanting to split that
&gt; up into a more friendly set of types and modules.

There are also problems with typing, e.g. sets of related functions that 
handle polymorphic metadata of the same type between each of the functions. 
This could be implemented using functors, records of functions or objects. 
I'm not sure if it would be better to do more on the OCaml side using Obj or 
to use C.

&gt; In fact, I will only 
&gt; be generating the mundane stuff as some of this mapping is quite
&gt; tricky and using that as a base.  Many of the opengl functions are
&gt; trivially mapped to OCaml but those that don't will be hand coded.

I'm keen to see your results! :)
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>the shootin is not the shootout</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/30692</cwn_url>
    <cwn_who>Jack Andrews announced</cwn_who>
    <cwn_what>
you may have noticed the 'shootin' mentioned  
somewhere.  http://shootin.sourceforge.net/ is like  
'the great computer language shootout' but your  
solutions are not restricted by the 'same-way'  
criterium.  you can implement solutions with any  
algorithm as long as it produces the same results.

even this criterium may be loosened to include  
'almost the same' solutions.

the first and current spec is here:

   http://shootin.sourceforge.net/spec/200510.html

the topic is 'automated stock market trading' and  
the spec is still under development.

i hope this grabs your interest
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Looking for a configuration file library</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/30612</cwn_url>
    <cwn_who>Continuing the thread from last week, Richard Jones said</cwn_who>
    <cwn_what>
&gt; For easy configuration of my programs, I'm looking for some OCaml code
&gt; to read and write a user configuration file.
[...]

This is probably not directly relevant to you, but we have had a lot
of success using comma-separated values (CSV) files for configuration.
Our "configuration" requirements consist mainly of long lists of
advertising campaigns and targets, so obviously CSV files make a bit
of sense here.  Our campaign manager edits the CSV files using Excel.
The CSV files translate into in-memory 'string list list' structures
and are thus simple to iterate over and generate.

http://merjis.com/developers/csv
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>where is GMain and ...</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/30716</cwn_url>
    <cwn_who>Deep into this thread, Jeremy O'Donoghue said and T. Kurt Bond added</cwn_who>
    <cwn_what>
&gt; Your first message suggests that you are compiling for Windows, which
&gt; means that you're in for a tough ride. Lablgtk2 is an Ocaml binding
&gt; for Gtk 2.x, which is a popular Linux/Unix widget set. There is a
&gt; Windows port, but it is quite painful to install (I should know, I did
&gt; it a couple of weeks back...)
&gt; 
&gt; Go to http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/lablgtk.html and
&gt; download lablgtk-2.4.0.tar.gz. Note that you cannot use the Windows
&gt; binary package if you want to compile with ocamlopt.
&gt; 
&gt; Unzip and untar, and read README and (especially) README.win32 carefully.
&gt; 
&gt; Go to http://www.gimp.org/~tml/gimp/win32/downloads.html and download
&gt; the required binary installer packages (there are a lot of them). You
&gt; will need both runtime and developer files.

I find it much less painful to get all the Win32 Gtk+ development libraries
from the distribution the Gaim folks publish, since they package them
up in one tar.gz:

    http://gaim.sourceforge.net/win32/build.php
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
