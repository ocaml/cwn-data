<?xml version="1.0" encoding="utf-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2020.10.06</cwn_date>
    <cwn_prev>2020.09.29</cwn_prev>
    <cwn_next>2020.10.13</cwn_next>
    <cwn_date_text>September 29 to October 06, 2020</cwn_date_text>
    <cwn_extra_head></cwn_extra_head>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>vue-jsoo 0.2</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-vue-jsoo-0-2/6522/1</cwn_url>
      <cwn_who>levillain.maxime announced</cwn_who>
      <cwn_what>
I'd like to announce the second release of vue-jsoo (vue-jsoo.0.2). A js_of_ocaml binding and helpers
to use the vue-js framework with js_of_ocaml.
      </cwn_what>
      <cwn_who>Xavier Van de Woestyne added</cwn_who>
      <cwn_what>
Here is the link: https://gitlab.com/o-labs/vue-jsoo

(Congratulation!)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Rehabilitating packs using functors and recursivity, part 2</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/rehabilitating-packs-using-functors-and-recursivity-part-2/6525/1</cwn_url>
      <cwn_who>OCamlPro announced</cwn_who>
      <cwn_what>
Following the publication of [the first
part](https://www.ocamlpro.com/2020/09/24/rehabilitating-packs-using-functors-and-recursivity-part-1/)
of our blogpost about the redemption of packs in the OCaml ecosystem, we are pleased to share
"[Rehabilitating packs using functors and recursivity, part
2.](https://www.ocamlpro.com/2020/09/30/rehabilitating-packs-using-functors-and-recursivity-part-2/)"

#+begin_quote
This blog post and the previous one about functor packs covers two RFCs currently developed by
OCamlPro and Jane Street. We previously introduced functor packs, a new feature adding the possiblity
to compile packs as functors, allowing the user to implement functors as multiple source files or
even parameterized libraries.

In this blog post, we will cover the other aspect of the packs rehabilitation: allowing anyone to
implement recursive compilation units using packs (as described formally in the RFC#20). Our previous
post introduced briefly how packs were compiled and why we needed some bits of closure conversion to
effectively implement big functors. Once again, to implement recursive packs we will need to encode
modules through this technique, as such we advise the reader to check at least the introduction and
the compilation part of functor packs.
#+end_quote
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Clap 0.1.0 (Command-Line Argument Parsing)</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-clap-0-1-0-command-line-argument-parsing/6544/1</cwn_url>
      <cwn_who>rbardou announced</cwn_who>
      <cwn_what>
I am happy to announce the first release of Clap.

Clap is a library for command-line argument parsing. Clap works by directly consuming arguments in an
imperative way. Traditionally, argument parsing in OCaml is done by first defining a specification (an
OCaml value defining the types of arguments), and then parsing from this specification. The "impure"
approach of Clap skips the need to define a specification and results in code which is quite simple in
practice, with limited boilerplate.

Clap is available as an opam package (~opam install clap~).

Source code, API documentation and a full commented example are available at:
https://github.com/rbardou/clap/
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
