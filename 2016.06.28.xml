<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2016.06.28</cwn_date>
    <cwn_prev>2016.06.21</cwn_prev>
    <cwn_next>2016.07.05</cwn_next>
    <cwn_date_text>June 21 to 28, 2016</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Pla v1.0 - pxx for making templates</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2016-06/msg00091.html</cwn_url>
      <cwn_who>Leonardo Laguna Ruiz announced</cwn_who>
      <cwn_what>
Pla is a simple library and ppx syntax extension to create composable templates
based on verbatim strings.

You can find the code and a quick description of it’s features

https://modlfo.github.io/pla/

In a nutshell, the ppx transforms quoted strings in the form {pla| …. |pla} to
templates. Inside templates it’s possible to add markers whose contents is
replaced by other templates, for example:

let name = Pla.string “pla” ;;
let t = {pla|The library name is &lt;#name#&gt;|pla} ;;

will produce “The library name is Pla”

When compiled, the markers are type-safe.

Pla does not provide advanced pretty-printing features but it produces fast
functions to create large amounts of text.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>ppx_deriving 4.0, ppx_deriving_yojson 3.0, ppx_deriving_protobuf 2.5</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2016-06/msg00108.html</cwn_url>
      <cwn_who>whitequark announced</cwn_who>
      <cwn_what>
I'm glad to announce new releases of ppx_deriving, ppx_deriving_protobuf
and ppx_deriving_yojson. They are already available via OPAM.

Changes:

ppx_deriving 4.0
----------------

  * Show, eq, ord, map, iter, fold: add support for `Result.result`.
  * Ppx_deriving.Arg: use Result.result instead of polymorphic variants.
  * Ppx_deriving.sanitize: parameterize over an opened module.
  * Add support for `[@@deriving]` in module type declarations.
  * Add support for loading findlib packages instead of just files in
    ppx_deriving_main.
  * Treat types explicitly qualified with Pervasives also as builtin.
  * Compatibility with statically linked ppx drivers.

ppx_deriving_protobuf 2.5
-------------------------

  * Compatibility with statically linked ppx drivers.

ppx_deriving_yojson 3.0
-----------------------

  * Use Result.result in generated code.
  * OCaml 4.03 compatibility.
  * Compatibility with statically linked ppx drivers.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at OCaml Planet,
&lt;http://ocaml.org/community/planet/&gt;.

Full Time: Software Developer (Functional Programming) at Jane Street in New York, NY; London, UK; Hong Kong
 &lt;http://jobs.github.com/positions/0a9333c4-71da-11e0-9ac7-692793c00b45&gt;

Fourteenth OCaml compiler hacking evening at Citrix
 &lt;http://ocamllabs.github.com/compiler-hacking/2016/06/26/summer-at-citrix&gt;

Camlzip 1.06 released
 &lt;http://forge.ocamlcore.org/forum/forum.php?forum_id=935&gt;

Let syntax, and why you should use it
 &lt;https://blogs.janestreet.com/let-syntax-and-why-you-should-use-it/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
