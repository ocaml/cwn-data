<?xml version="1.0" encoding="UTF-8"?>
<cwn>
	<cwn_head>
		<cwn_date>2008.05.13</cwn_date>
		<cwn_prev>2008.05.06</cwn_prev>
		<cwn_next>2008.05.20</cwn_next>
		<cwn_date_text>May 06 to 13, 2008</cwn_date_text>
	</cwn_head>
	<cwn_body>
		<cwn_entry>
			<cwn_title>Core godi package</cwn_title>
			<cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/3d0ebba55dc20cb4#</cwn_url>
			<cwn_who>N. Owen Gunden announced</cwn_who>
			<cwn_what>
There is now a package "godi-janestreet-core" in GODI (version 3.10
only).

It has been only minimally tested, and there is one known issue: you
must provide "-thread" to the compiler when you link against it.  In
OCamlMakefile-speak, this means set THREADS = yes.  To get the toplevel
to work:

# #use "topfind";;
- : unit = ()
Findlib has been successfully loaded. Additional directives:
 #require "package";;      to load a package
 #list;;                   to list the available packages
 #camlp4o;;                to load camlp4 (standard syntax)
 #camlp4r;;                to load camlp4 (revised syntax)
 #predicates "p,q,...";;   to set these predicates
 Topfind.reset();;         to force that packages will be reloaded
 #thread;;                 to enable threads

- : unit = ()
# #thread;;
/home/godi/root/lib/ocaml/std-lib/threads: added to search path
/home/godi/root/lib/ocaml/std-lib/unix.cma: loaded
/home/godi/root/lib/ocaml/std-lib/threads/threads.cma: loaded
# #require "core";;
/home/godi/root/lib/ocaml/std-lib/bigarray.cma: loaded
/home/godi/root/lib/ocaml/pkg-lib/res: added to search path
/home/godi/root/lib/ocaml/pkg-lib/res/res.cma: loaded
/home/godi/root/lib/ocaml/std-lib/nums.cma: loaded
/home/godi/root/lib/ocaml/pkg-lib/num-top: added to search path
/home/godi/root/lib/ocaml/pkg-lib/num-top/num_top.cma: loaded
/home/godi/root/lib/ocaml/pkg-lib/num: added to search path
/home/godi/root/lib/ocaml/pkg-lib/sexplib: added to search path
/home/godi/root/lib/ocaml/pkg-lib/sexplib/sexplib.cma: loaded
/home/godi/root/lib/ocaml/pkg-lib/bin_prot: added to search path
/home/godi/root/lib/ocaml/pkg-lib/bin_prot/bin_prot.cma: loaded
/home/godi/root/lib/ocaml/pkg-lib/core: added to search path
/home/godi/root/lib/ocaml/pkg-lib/core/core.cma: loaded

If you don't have threads enabled, you'll get one of a number of obscure
error messages.

We hope to make the thread stuff get pulled in automatically in the next
version, but we haven't quite figured out the right findlib incantation
yet.  Pointers would be appreciated.
			</cwn_what>
		</cwn_entry>
		<cwn_entry>
			<cwn_title>GODI Search: Includes now sources</cwn_title>
			<cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/f3206c96900f571b#</cwn_url>
			<cwn_who>Gerd Stolpmann announced</cwn_who>
			<cwn_what>
I've just deployed another extension of GODI Search. The corpus now also
includes the sources the GODI packages are built from, and not only the
installed files ("binaries"). This is especially useful if the installed
documentation is not complete enough, or to check the details of the
implementation.

The search is available at &lt;http://docs.camlcity.org&gt;.

It is also possible to browse the sources. As a special feature, it is
tried to aggregate binary and source modules into a single view.

For example, here is the view on the installed Png modules of
camlimages:

http://docs.camlcity.org/docs/godipkg/3.10/godi-camlimages/lib/ocaml/pkg-lib/camlimages/png.mli

Just click on the "Sources" tab to see possible source files this module
could be built from (GODI Search doesn't track that, so we can only
guess). Usually, the source files are now only two clicks away from the
binary files.

This release also includes numerous smaller fixes. Especially, the AJAX
feature works now for older Internet Explorers (man, this was a fight).
			</cwn_what>
		</cwn_entry>
		<cwn_entry>
			<cwn_title>uint64lib release (again), plus help request</cwn_title>
			<cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/b2c283ba445c62f0#</cwn_url>
			<cwn_who>Jeff Shaw announced</cwn_who>
			<cwn_what>
The good news is that I have my little library for machine-native 64-bit 
unsigned integers hosted at OCaml Forge now! 

http://forge.ocamlcore.org/frs/?group_id=23 

The bad news is that despite my best attempts I am unable to get it to 
link with programs compiled with ocamlopt. If anyone would like to help 
please let me know and I can give you SVN access.
			</cwn_what>
		</cwn_entry>
	</cwn_body>
</cwn>