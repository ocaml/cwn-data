<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2011.07.12</cwn_date>
    <cwn_prev>2011.07.05</cwn_prev>
    <cwn_next>2011.07.19</cwn_next>
    <cwn_date_text>July 05 to 12, 2011</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Priority queues, reloaded</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2011-07/msg00064.html</cwn_url>
      <cwn_who>Deep in this thread, Jon Harrop asked about heaps and priority queues in Ocaml and James Woodyatt replied</cwn_who>
      <cwn_what>
I released this years ago.  It's stable, meaning I use it all the
time, and I never touch it.

   &lt;https://bitbucket.org/jhw/oni&gt;

From the README in the Cf library:

&gt;&gt; Highlighted features include:
&gt;&gt; 
&gt;&gt; - Functional streams and stream processors (extended).
&gt;&gt; - Functional bootstrapped skew-binomial heap.
     *******************************************
&gt;&gt; - Functional red-black binary tree (associative array).
&gt;&gt; - Functional sets based on red-black binary tree.
&gt;&gt; - Functional real-time catenable deque.
&gt;&gt; - Functional LL(x) parsing using state-exception monad.
&gt;&gt; - Functional lazy deterministic finite automaton (DFA).
&gt;&gt; - Functional lexical analyzer (using lazy DFA and monadic parser).
&gt;&gt; - Functional substring list manipulation (message buffer chains).
&gt;&gt; - Gregorian calendar date manipulation.
&gt;&gt; - Standard time manipulation.
&gt;&gt; - System time in Temps Atomique International (TAI).
&gt;&gt; - Unicode transcoding.
&gt;&gt; - Universal resource identifier (URI) manipulation.
&gt;&gt; - Extended socket interface (supports more options, and UDP w/multicast).
&gt;&gt; - I/O event multiplexing (with Unix.select).
&gt;&gt; - Functional XML stream parsing and generation
&gt;&gt; - Functional MIME stream parsing and generation

Among other treasures, it has priority queues built with the bootstrapped 
skew-binomial heaps.

  &lt;https://bitbucket.org/jhw/oni/src/ef09a44a61ea/cf/cf_pqueue.mli&gt;
  &lt;https://bitbucket.org/jhw/oni/src/ef09a44a61ea/cf/cf_sbheap.mli&gt;

Nobody knows about my Oni project because I rarely put any effort into 
promoting it, but its Cf library is an excellent alternative to the OCaml 
standard library in many ways.  There is a GODI package for it, of course, 
but the OCaml With Batteries people settled on a more popular alternative 
(and who can blame them) so again nobody knows about it.  Nevertheless, if 
you need the complete array of functional data structures in OCaml, you 
should look at the Cf library I wrote.  It's pretty good.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Atdgen 1.2.0 + tutorial, OMake/Make support</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2011-07/msg00050.html</cwn_url>
      <cwn_who>Martin Jambon announced</cwn_who>
      <cwn_what>
I have the pleasure to officially announce this new release of Atdgen.
Atdgen is a tool that generates optimized OCaml code from type
definitions, primarily for data serialization:

  http://oss.wink.com/atdgen/

Atdgen supports one text format, JSON, and one binary format, Biniou,
which retains most properties of JSON.

  JSON specification: http://json.org
  Biniou specification: http://martin.jambon.free.fr/biniou-format.txt


What's new
----------

* a tutorial: http://mylifelabs.github.com/atdgen-tutorial.html

* new command-line modes (-t, -b, -j, -v) and new conventions that make
it easier to split groups of type definitions into multiple files and
OCaml modules. Existing users of Atdgen are encouraged to switch to this
new model, described in the tutorial.

* a validator mode (-v) which produces code that calls user-specified
validators on the nodes of data structures to validate.

* OMake support: https://github.com/MyLifeLabs/atdgen-omake

* GNU Make support: https://github.com/MyLifeLabs/atdgen-make


Development status
------------------

Atdgen is being developed at MyLife (&lt;http://www.mylife.com&gt;) where we use
it routinely to process and serve terabytes of rich data.

The source repository is publicly hosted on GitHub:

  https://github.com/MyLifeLabs/atdgen


Technology used
---------------

* type definition parsing (atd package): ocamllex + menhir
* JSON parsing (yojson package): ocamllex, some Obj
* Biniou parsing (biniou package): handwritten OCaml, some Obj
* pretty-printing (atd, yojson, biniou): easy-format, relying on Format
* not-too-ugly-printing OCaml code (atdgen) uses simple technique
implemented here:
    https://github.com/MyLifeLabs/atd/blob/master/atd_indent.mli
    https://github.com/MyLifeLabs/atd/blob/master/atd_indent.ml

(Atdgen does not use Camlp4)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

Stacks and other stuff:
  &lt;http://gaiustech.wordpress.com/2011/07/10/stacks-and-other-stuff/&gt;

Why:
  &lt;http://gaiustech.wordpress.com/2011/07/08/why-open-source/&gt;

type-conv:
  &lt;https://forge.ocamlcore.org/projects/type-conv/&gt;

OCamlDuce 3.12.1.0:
  &lt;https://forge.ocamlcore.org/forum/forum.php?forum_id=798&gt;

Batteries 1.4.0 released:
  &lt;https://forge.ocamlcore.org/forum/forum.php?forum_id=797&gt;

Was running into this problem, fixed by disabling that setting....:
  &lt;http://blog.dbpatterson.com/post/7328412041&gt;

How to organize Ocsigen projects to compile to a native code binary (and why this is not good).:
  &lt;http://blog.dbpatterson.com/post/7327834768&gt;

OCamlspotter 1.3.0:
  &lt;http://caml.inria.fr/cgi-bin/hump.cgi?contrib=660&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
