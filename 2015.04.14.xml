<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2015.04.14</cwn_date>
    <cwn_prev>2015.04.07</cwn_prev>
    <cwn_next>2015.04.21</cwn_next>
    <cwn_date_text>April 07 to 14, 2015</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Reduce Inequality and Program in OCaml!</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-04/msg00028.html</cwn_url>
      <cwn_who>Trevor Smith announced</cwn_who>
      <cwn_what>
I recently started at Pegged Software, an early stage company looking to
transform and equalize how people are hired. We're hiring engineers! I am
thrilled to be working on a mission doing social good, and to have the
opportunity to build out a team that will use, and contribute to, OCaml. I
have pasted the pain-text job description below and have a pdf version here:
https://s3.amazonaws.com/public-bucket-pegged/PeggedEngineeringPost.pdf

Excited to hear from you.

Trevor

Software Engineer
-------------------------

Pegged is seeking passionate, collaborative, entrepreneurial engineers to help
us transform and equalize how people are hired. We’re a small, early-stage,
high-growth company that cares about producing a valuable product, growing
together and using the right tool for the job. If this sounds like you, please
contact us at jobs+engineering@peggedsoftware.com. We’re hiring at all levels
of experience.

Pegged Software is fixing how people get hired. We do this by applying modern
data science to build predictive models that match individuals with roles
where they can excel. We use traditional application data in some very
innovative ways, and we’ve built our own data-gathering platforms in the form
of applicant screenings. We’ve started by focusing our technology on the
healthcare industry, and plan on expanding to other industries, and then to a
direct-to-consumer product that will help individuals and companies find one
another.

At the hospitals we work with, employee turnover is a major problem. This
churn costs our clients thousands of dollars that could be better spent
improving patient care. We’ve reduced employee turnover at our client
hospitals by 45 to 75 percent, which has resulted in improved patient
experience, company performance, and employee engagement.

This is just the beginning of a revolution in how employers use data to make
better HR decisions, and how individuals are able to find fulfilling work
beyond the bounds of bias. We have doubled in size over the last year, just
completed a $7.5M round of financing, and are growing even more quickly in
2015.

What We Believe In
-------------------------
* Empathy with one another and our users. Inclusiveness, communication and
collaboration are core tenets of how we work.
* Contribution to the open source community. We are built on open source
technologies and we give back.
* Small feedback loops are critical to developing product and technology.
* Ownership gives individuals the agency to grow, and aligns outcomes.

What We Use
-------------------
We are pragmatic and use whatever tool is best to get the job done. That being
said, we most enjoy programming in OCaml on top of AWS, and make use of Python
to glue things together.

Responsibilities
---------------------
* Write server-side code for web-based applications and APIs.
* Create robust high-volume production applications and develop prototypes
quickly.
* Work with Data Scientists to create a data pipeline that supports offline
analysis, and online experimentation.
* Write automation code to deploy, monitor and alert to support your
application.

Must Have
---------------
* An entrepreneurial mindset -- you have a track record of easily learning new
technologies. You are a self-directed learner who can adapt quickly to new
tools to solve problems.
* A demonstrated ability to produce and support quality production code.
* Excellent communication skills.
* A collaborative approach to working on a team.
* A passion about making the world a better place.

Nice to Have
------------------
* Experience with Amazon Web Services (AWS)
* Experience with OCaml or functional programming in any environment
* Experience building highly available, fault tolerant systems
* Experience building a data pipeline (bonus points for knowing about the
Lambda Architecture).

Perks
--------
* The mission, the people and the work.
- The mission: work on a project that is making the world a better place.
- The people: work for a high growth company, and learn in an environment
where people care about growth and work/life balance.
- The work: pragmatically use amazing technology.
* Competitive salary, benefits and equity.
      </cwn_what>
      <cwn_who>Trevor Smith later added</cwn_who>
      <cwn_what>
Sorry for the double post -- I forgot to include: we are based in Baltimore
and NYC. We are plan on mostly building our tech team in NYC but are happy to
hire for both offices.
      </cwn_what>
      <cwn_who>Amir Chaudhry then asked and Trevor Smith replied</cwn_who>
      <cwn_what>
&gt; Is the company already using OCaml? If so, would you be able to submit a
&gt; PR to the Companies page on ocaml.org [1, 2]?
&gt; 
&gt; The description just needs to be brief and it's better to mention
&gt; where/how OCaml is being used. You can look through the other examples to
&gt; get an idea of what to include.
&gt; 
&gt; [1] https://ocaml.org/learn/companies.html
&gt; [2] https://github.com/ocaml/ocaml.org/blob/master/site/learn/companies.md

We are already using OCaml in production! I will submit a PR later this week.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Core Suite 112.24</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-04/msg00040.html</cwn_url>
      <cwn_who>Thomas Refis announced</cwn_who>
      <cwn_what>
I am pleased to announce the 112.24 release of the Core suite.

The following packages were upgraded:

- async
- async_extended
- async_extra
- async_kernel
- async_ssl
- async_unix
- bignum
- bin_prot
- core
- core_extended
- core_kernel
- custom_printf
- jenga
- ocaml_plugin
- pa_ounit
- pa_test
- patdiff
- patience_diff
- rpc_parallel
- sexplib
- typerep

Files for this release are available on our website and all packages
are in opam:

  https://ocaml.janestreet.com/ocaml-core/112.24/files

Here is the list of changes for this version:

## 112.24.00

### async

Keep up to date with interface changes in `Async_kernel`, `Async_extra` and
`Async_unix`.

### async_extended

- Fixed misspelling in `Command_rpc.Connection`, renaming `propogate_stderr` as
  `propagate_stderr`.

### async_extra

- Changed `Log` to not eagerly run the rotation loop when an
  `Output.Rotating_file` is created.
- Changed `Log.Output.combine` to write log outputs in sequence rather than
  parallel, to give the correct semantics when the same output is included
  multiple times in `Log.create`.

  This fixed a test that was failing in `lib_test/log_test.ml`.

- Remove `Log.Rotation.t_of_sexp`.
- Made `Command.async*` functions flush `stdout` and `stderr` before calling
  shutdown, to avoid timeouts causing data to be dropped.

  For now, we're making this change in `Command` rather than `Writer`.
  `Writer` already has `at_shutdown` handlers.  We've observed that they
  don't behave well for command-line programs w.r.t. stderr.  So, the
  thinking of this feature is to try out a different `at_shutdown`
  behavior, just for `Command` executables and just for `stdout` and
  `stderr`.  If it works out, maybe we move it into `Writer` proper.
  Putting the change in `Command` for now reduces the scope of what is
  affected by the experiment, and hopefully correlates well with where
  the change is likely to help.

- In `Rpc`, catch exceptions raised by blocking-RPC implementations.

- Added functionality to `Versioned_typed_tcp.Repeater`.

  Added to `create` an argument `is_client_allowed : Client_name.t -&gt; bool`.

  Added to `start` an argument:

      on_connecting_error  : (client_name    : Client_name.t
                              -&gt; server_name : Server_name.t
                              -&gt; Error.t -&gt; unit)

- Fixed a race in `Versioned_typed_tcp` in which a message can be dropped
  between `Server.create` and `Server.listen`

- Simplified the implementation of `Rpc`.

  Rpc has an internal Response_handler module, which is just a record containing
  a response-handling function and an `already_removed` boolean field.  It turns
  out that this is unnecessary:  `already_removed` is set to true when the
  function returns ``remove`, but if it returns ``remove` then it will also be
  removed from a hash table, and we only call the function immediately after
  looking it up in that hash table.

  This wasn't always pointless:  this function used to return deferred
values and
  run inside a throttle.  The simplification is only possible because we made it
  synchronous a while ago.

- Added `Tcp.Server.num_connections` function.

- Added creation functions for `Versioned_rpc` menus, for use in clients of an
  RPC proxy.

  In `Menu`:

      val create : Implementation.Description.t list -&gt; t

  In `Connection_with_menu`:
      val create_directly : Connection.t -&gt; Menu.t -&gt; t

  These are for use in clients of an RPC proxy, which can't use the
  regular menu mechanism since they each need to have many menus (one
  for each potential target) but should only need to have one connection
  (to the proxy).

- Added to `Rpc` expert submodules, `Implementations.Expert` and `Rpc.Expert`,
  with low-level access for implementing a proxy that can handle queries without
  knowing their names, types, etc. in advance.

- Renamed `Rpc.Implementation.Description` as `Rpc.Description`.

- Added `Rpc.{Rpc,Pipe_rpc,State_rpc}.description` accessor functions.

- Added `Rpc.Implementation.descriptions`, which returns all RPCs in an
  `Rpc.Implementations.t`.
  This was needed for the `rpc_discovery` library: given an
`Implementations.t` we want to advertise at

      prefix/&lt;rpc_name&gt;/&lt;rpc_version&gt;/host_and_port = &lt;host_and_port&gt;

- Added combinators to `Rpc.Implementations`: `lift`, `add`, `add_exn`.

### async_kernel

- Now depends on `Core_kernel` instead of `Core`.

  `Async_kernel.Clock` uses `Core_kernel.Time_ns` and
  `Core_kernel.Timing_wheel_ns` rather than `Core.Time` and
  `Core.Timing_wheel_float`.

- Added `Async_kernel.Types` module to deal with the mutual recrsion of
  `Async_kernel`'s types.

  This should help eliminate the complexity and make it easier to make changes
  without running into as many constraints due to module/type ordering.

  Merged `Types.Jobs` into `Types.Scheduler`.

- Improved the performance of `Deferred.bind`, eliminating an allocation in
  `Ivar.connect`.

- Optimized `Deferred.bind`, removing a closure allocation by inlining
  `Deferred.create`.

- Added `Pipe.interleave_pipe`, which is like `interleave`, but takes a pipe
  rather than a list.

### async_ssl

- By default OpenSSL ignores the result of certificate validation, so we need to
  tell it not to.

- Expose session details such as checked certificates and negotiated version.
  Add session resumption.

### async_unix

- Made `Process.env` type equal `Core.Std.Unix.env` type, effectively adding the
  ``Replace_raw` variant.
- Renamed `Process.wait` as `collect_output_and_wait`, and added a `wait`
  function that is a thin wrapper around `waitpid`.

  Also renamed:

      wait_stdout       --&gt; collect_stdout_and_wait
      wait_stdout_lines --&gt; collect_stdout_lines_and_wait

- Added `Unix.getgrouplist`, a wrapper around the eponymous function in core
- Change the Async scheduler to run external actions immediately upon
  dequeueing them, rather than first enqueueing them in the normal job queue.

  Also, made external actions be jobs rather than closures.

- Changed `Unix.Inet_addr.of_string_or_gethostbyname` to not use a sequencer.

  We had used a sequencer to workaround bugs in winbind, which we don't
  use anymore.

  Reported on github: https://github.com/janestreet/async_unix/issues/4

### bignum

- Fixed exception raised by `Bignum.sexp_of_t` when the denominator is zero.

### bin_prot

Minor commit: comments.

### core

- Renamed `Dequeue` as `Deque`.
- Added `Fdeque`, a functional deque (a double-ended `Fqueue`, or a
functional `Deque`).
- Changed `Fqueue`'s bin-io format, and added a stable type.

  Deprecated deque-like functions in favor of `Fdeque`.

- Added `Fheap`, a functional heap implementation based on pairing heaps.
- Reverted the change to `Or_error`'s bin-io format made in 112.17, going back
  to the format in 112.16 and before.
- Added to `Unix.env` type a ``Replace_raw` variant, as used in `exec` and
  `fork_exec`.
- Added `Array.Permissioned` module, which has a permissioned array type and
  permissioned versions of all the regular array functions.
- Added `Date.week_number : t -&gt; int`.
- Added values to `Day_of_week`: `of_int_exn`, `iso_8601_weekday_number`,
  `weekdays`.

       val of_int_exn : int -&gt; t
       val iso_8601_weekday_number : t -&gt; int
       val weekdays : t list (- [ Mon; Tue; Wed; Thu; Fri ] *)

- Switched `Float` IEEE functions to use `Int63.t` for the mantissa rather than
  `int`, so they work on 32-bit platforms.
- Added a `length` field to the `Map.t` record, making `Map.length` `O(1)`
  rather than `O(n)`.
- Moved a fragment of `Time_ns` from `Core` to `Core_kernel`, enough so that
  `Async_kernel` can use `Core_kernel.Time_ns` and ultimately only depend on
  `Core_kernel`.
- Fixed compilation of `Time_ns` 32-bit Linux.
- Added `Bounded_int_table.clear`.
- Fixed the `module_name` passed to `Identifiable.Make` for a number of modules.

  The module name must be an absolute module path.

  Reported here: https://github.com/janestreet/core/issues/52

- Added `Tuple.Binable` functor, for making binable tuples.
- Sped up a `Time_stamp_counter` unit test.

  `Time_stamp_counter` unit test has an 18s unit test, which seems
  excessive.  Take a couple of orders of magnitude off the number of
  iterations.

- Added `Time_ns.pause`, whose implementation is the same as `Time.pause`.

  This involved moving the `nanosleep` C code from `Core` to
  `Core_kernel`.

  This was necessary so that `Async_kernel` can pause without introducing
  a dependence of Async on Core.

- Made `Core_kernel.Time_ns.Alternate_sexp` use a similar format to
`Core.Time_ns`.

  This was needed so that `Async_kernel` can use a nice sexp format for
  time spans.

- Changed `Timing_wheel` implementation to use `Time_ns`, and moved to
  `Core_kernel.Timing_wheel_ns`; made `Core.Timing_wheel` a wrapper around
  `Timing_wheel_ns`.

  Generalized the timing-wheel interface to be parametric in `Time`, so
  that one interface applies to both `Timing_wheel` and
  `Timing_wheel_ns`.

  Generalized the timing-wheel unit tests to a functor,
  `Timing_wheel_unit_tests.Make`, that is used to test both
  `Timing_wheel_ns` and `Timing_wheel_float`.  Moved a few tests that
  depend on `Time` and `Date` from the functor into
  `timing_wheel_float_unit_tests.ml`.

  Split out `Timing_wheel.Debug` into a separate functor,
  `Timing_wheel_debug.Make`.

  This was done in so that `Async_kernel` can depend only on
  `Core_kernel` and not `Core`.

- Added optional arguments to `Command.group`: `?body` and
  `?preserve_subcommand_order`.

  `preserve_subcommand_order : unit` causes subcommands to be in the order
  they are specified, rather than sorted.

  `body : (path:string list -&gt; unit)` is called when no additional
  arguments are passed.

- Added accessor function `Command.summary : t -&gt; string`.
- Fixed a bug in `Time.Span` robust comparison.
- Changed `Command`'s tab-completion bash code so that it is possible for
  programs to return completions containing spaces.

  Actually knowing when and how to do so is difficult, because of
course there's escaping to
  worry about. Adding helper functions to make that sort of thing
manageable is left for
  future work.

- In `Command`, made the `-version` and `-build-info` flags work at the top
  level when there are subcommands.
- Added `Sequence.interleaved_cartesian_product`, which implements cartesian
  product of potentially infinite sequences.

### core_extended

- Added to `Shell.set_defaults` a `?preserve_euid:bool` argument, which causes
  `Shell` to use `bash -p`.
- Removed `Array.Access_control`, now that there is
  `Core.Std.Array.Permissioned`.
- Removed `Fast_int_div`.

### core_kernel

- Added `Time_ns` module.

  A fragment of `Core.Std.Time_ns` is now in `Core_kernel.Std.Time_ns` such that
  `Async_kernel` can use `Time_ns` and only depend on `Core_kernel`.

- Renamed `Dequeue` as `Deque`.
  `Dequeue` remains for backward compatibility, but should not be used anymore.
  Use `Deque` instead.

- Added `Fdeque` module, a functional version `Deque`.
  Deprecate deque-like functions in `Fqueue`.

### custom_printf

- Added syntax to use `Sexp.to_string_mach` rather than `Sexp.to_string_hum`.

  Added syntax `%{sexp#mach:&lt;type&gt;}`, which is like `%{sexp:&lt;type&gt;}`,
  except it calls `Sexplib.Sexp.to_string_mach` instead of
  `Sexplib.Sexp.to_string_hum`.

  In fact, you can put any identifier after the `sexp#` and it will call
  `Sexplib.Sexp.to_string_&lt;that identifier&gt;`; however, there are no other
  such functions right now.

### jenga

- Interns strings, significantly reducing memory use.

### ocaml_plugin

Minor update: follow Async evolution.

### pa_ounit

- Added `-verbose` switch to time unit tests, so we can easily see which ones
  are taking a long time.

### pa_test

- Reduce code generated by `pa_test` in favor of more code in `pa_test_lib`.
  + Less generated code means less time spent compiling it.
  + Reducing code in `pa_test.ml` is good, because:
      a) Staging semantics make this code hard to understand.
      b) This code is written using the less familiar revised OCaml syntax.
      b) We get less code to migrate to syntax extensions.

- Re-used location code in `pa_here`; side benefit that we get full path names
  in (Loc...) instead of just the file's basename.

### patdiff

Minor update: doc.

### patience_diff

Update references to `Core.Std.Dequeue` to refer to `Core.Std.Deque`

### rpc_parallel

- Added `Parallel.State.get` function, to check whether `Rpc_parallel` has been
  initialized correctly.
- Added `Map_reduce` module, which is an easy-to-use parallel
map/reduce library.

  It can be used to map/fold over a list while utilizing multiple
cores on multiple machines.

  Also added support for workers to keep their own inner state.

- Fixed bug in which  zombie process was created per spawned worker.

  Also fixed shutdown on remote workers

- Made it possible for workers to spawn other workers, i.e.  act as masters.

- Made the connection timeout configurable and bumped the default to 10s.

### sexplib

Minor update: documentation.

### typerep

- Remove unused "bin_proj" rewriter.

--
Thomas Refis, for the Core team
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the OCaml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocaml.org/&gt;.

Yes, ocp-memprof (s)can(f) !:
  &lt;http://www.ocamlpro.com/blog/2015/04/13/ocp-memprof-memory-leaks-scanf.html&gt;

Building a lower-latency GC:
  &lt;https://blogs.janestreet.com/building-a-lower-latency-gc/&gt;

Coq 8.4pl6 is out:
  &lt;https://coq.inria.fr/news/124.html&gt;

Faster OCaml to C calls:
  &lt;https://blogs.janestreet.com/faster-ocaml-to-c-calls/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
