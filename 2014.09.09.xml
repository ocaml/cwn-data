<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2014.09.09</cwn_date>
    <cwn_prev>2014.09.02</cwn_prev>
    <cwn_next>2014.09.16</cwn_next>
    <cwn_date_text>September 02 to 09, 2014</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>capnp-ocaml 2.0.1</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-09/msg00021.html</cwn_url>
      <cwn_who>Paul Pelzl announced</cwn_who>
      <cwn_what>
I'm pleased to announce the release of capnp-ocaml 2.0.1. It is
available in OPAM as package "capnp", or from the project website:
https://github.com/pelzlpj/capnp-ocaml

capnp-ocaml is a code generator plugin for the Cap'n Proto
serialization framework. Cap'n Proto's distinguishing feature is that
there is no explicit parsing/serialization step: the on-the-wire
message format is also designed to serve as an efficient in-memory
data structure representation.
http://kentonv.github.io/capnproto/

Aside from important bugfixes, this release brings a larger and
better-designed I/O support library for moving messages across various
types of channels. Performance has also been significantly improved;
I've written a blog post about the benchmarking and optimization
experience.
http://pelzlpj.github.io/capnp-ocaml/2014/09/02/capnp-ocaml-2.0/

An excerpt from the change log follows. Enjoy,

Paul

=== Backwards-incompatible changes
* Module `Codecs`: change API to accept the more natural
`BytesMessage.Message.t`
instead of `Bytes.t list`.
* Module `Codecs`: change API to accept a `compression` specifier,
instead of using
separate functions and separate types for compressed and uncompressed
streams.
* Module `Message`: `to_storage` now returns a list of (storage,
length) pairs.

=== Other changes
* Module `Codecs`: fix incorrect encoding of framing headers (for
example,
as generated by `serialize`).
* Module `Codecs`: fix infinite loop in `PackedStream` decoding.
* Module `Codecs`: reduce serialized message sizes, by omitting unused
allocation
regions from the serialized messages.
* Instantiate `BytesMessage = Message.Make(BytesStorage)`, so the user
doesn't always
need to. (Implementation is furthermore defunctorized for improved
performance.)
* New module `IO`: functions for moving message data through various
types of I/O
channels.
* Compiler now says something about files it created.
* Corrected compilation errors when using 4.02 `-safe-string`.
* Significant performance improvements across the board.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Ocaml 4.02.0: Dead Code Elimination and Core</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-09/msg00029.html</cwn_url>
      <cwn_who>Jacques Garrigue replied to this request from Goswin von Brederlow</cwn_who>
      <cwn_what>
&gt; Note: an example using oasis would be the best. :)

I just gave a presentation at the ML workshop about that.
There is no oasis code, but the slides explain well how to call the compiler,
and the impact on dependencies.

http://www.math.nagoya-u.ac.jp/~garrigue/papers/index.html
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>ppx_deriving 0.3</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-09/msg00047.html</cwn_url>
      <cwn_who>Peter Zotov announced</cwn_who>
      <cwn_what>
I'm glad to announce the 0.3 release of ppx_deriving[1],
which is available for installation via OPAM.

0.3
---

  * Show, Eq, Ord, Iter, Fold: handle ref.
  * Show: include break hints in format strings.
  * Show: pull fprintf into local environment.
  * Show: add [@polyprinter] and [@opaque].

[1]: https://github.com/whitequark/ppx_deriving
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>ppx_deriving_yojson 1.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-09/msg00069.html</cwn_url>
      <cwn_who>Peter Zotov announced</cwn_who>
      <cwn_what>
I'd like to announce the initial release of ppx_deriving_yojson[1],
a ppx_deriving[2] plugin that generates Yojson serializers and
deserializers from type definitions.

It is available for installation via OPAM.

[1]: https://github.com/whitequark/ppx_deriving_yojson
[2]: https://github.com/whitequark/ppx_deriving
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the OCaml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocaml.org/&gt;.

Concatenation of a list of strings:
  &lt;http://shayne-fletcher.blogspot.com/2014/09/concatenation-of-list-of-strings.html&gt;

OCaml 4.02.0 available:
  &lt;http://wodi.forge.ocamlcore.org/2014/09/04/ocaml-4.02.0.html&gt;

Terms With Variables (C++):
  &lt;http://shayne-fletcher.blogspot.com/2014/08/terms-with-variables-c.html&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
