<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2014.10.07</cwn_date>
    <cwn_prev>2014.09.30</cwn_prev>
    <cwn_next>2014.10.14</cwn_next>
    <cwn_date_text>September 30 to October 07, 2014</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>slacko-0.9.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00011.html</cwn_url>
      <cwn_who>Marek Kubica announced</cwn_who>
      <cwn_what>
I'd like to announce the first public release of Slacko, a REST API
binding to Slack &lt;https://slack.com/&gt;. I'm looking for input on it, so
I can publish a 1.0 soon.

The source code can be found on GitHub,
&lt;https://github.com/Leonidas-from-XIV/slacko&gt; and it is already
uploaded in OPAM &lt;http://opam.ocaml.org/packages/slacko/slacko.0.9.0/&gt;.

More information can be found on my blog,
&lt;http://xivilization.net/~marek/blog/2014/10/01/introducing-slacko/&gt;.
      </cwn_what>
      <cwn_who>Malcolm Matalka then said and Marek Kubica replied</cwn_who>
      <cwn_what>
&gt; I would either change the 'apierror' type to normal variants, or
&gt; spread out the apierror to multiple types.  Can every API function
&gt; really return every one of those errors?  The value of polymorphic
&gt; variants is they are module, and you can share the constructors
&gt; across types.

You're right, there is a common set of errors that most functions return
and then there are some specific errors.

Originally I didn't want to create such a huge type but have every
function have its own polymorphic variants that apply to it, so users
of the API know exactly what errors might be thrown and have to handle
these. The huge type is a direct result of the "validate" function
&lt;https://github.com/Leonidas-from-XIV/slacko/blob/bc6be47cca8d2088d3d7cfb9af0603a350ab0215/src/slacko.ml#L79&gt;
which tests all cases.

I tried specifying a smaller subset of polymorphic variants, but the
compiler always selected the full set. I don't know how to fix this,
because on the one hand side I don't want to have a big monolithic
error type but on the other hand, I don't want to duplicate a subset of
the validate function in every function.

Looking forward for ideas on how to solve this in a more elegant way.

&gt; I would also structure the API calls in terms of the Result.t type in
&gt; Core.  Right now success is part of the error type.

If I understand you correctly, this should do the trick with the
current code:

type result = Success of Yojson.Basic.json | Error of apierror

For future releases I plan to replace the strings in the signatures
with proper types (so, some "string" turn into a "token" types, others
into timestamp types) and to process the resulting JSON into some more
convenient data structures. But for now, I hope to get the error
handling right and then build upon this.
      </cwn_what>   
      <cwn_who>Gabriel Scherer then suggested</cwn_who>
      <cwn_what>
Re. the "validate" function, you can do it using the ability to
pattern-match on a named subset of the polymorphic variants.

Let's consider a simplification of your problem with only two classes
of errors (taken from your code):

  type error_cant_kick = [
  | `Cant_kick_from_general
  | `Cant_kick_from_last_channel
  | `Cant_kick_self
  ]

  type error_cant_invite = [
  | `Cant_invite
  | `Cant_invite_self
  ]

  type 'a error = [
  | `Success of 'a
  | error_cant_kick
  | error_cant_invite
  ]

The `validate` function indeed processes all cases, returning an
everything-possible error type:

  let validate : _ -&gt; _ error = function
    | `String "cant_invite_self" -&gt; `Cant_invite_self
    | `String "cant_invite" -&gt; `Cant_invite
    | `String "cant_kick_self" -&gt; `Cant_kick_self
    | `String "cant_kick_from_general" -&gt; `Cant_kick_from_general
    | `String "cant_kick_from_last_channel" -&gt; `Cant_kick_from_last_channel

But you can refine its result if you know (from the informal
API specification) that it can only be some subset, using the #foo
syntax. In the example below, `kick` and `invite` have been refined
with distinct subsets:

  let api_mismatch err =
    failwith ("API mismatch: unexpected error " (*^ to_string err *))

  let kick f =
    f ()
    |&gt; validate
    |&gt; function
      | `Success v -&gt; `Success v
      | #error_cant_kick as err -&gt; err
      | other -&gt; api_mismatch other

  let invite f =
    f ()
    |&gt; validate
    |&gt; function
      | `Success v -&gt; `Success v
      | #error_cant_invite as err -&gt; err
      | other -&gt; api_mismatch other

`kick` now returns a [&gt; error_cant_kick | `Success of 'a ], while `invite`
returns [&gt; error_cant_invite | `Success of 'a ].
      </cwn_what>
      <cwn_who>Marek Kubica then said and Jacques Garrigue replied</cwn_who>
      <cwn_what>
&gt; Thank you for this idea, I was actually looking for a way to define
&gt; subsets of polymorphic variants, I didn't know that I can just put them
&gt; into other types and was unaware of the # syntax. Now my functions
&gt; return just the possible error variants, not all of them anymore.
&gt; 
&gt; I've reworked the code to get rid of the huge apierror type (which I
&gt; suppose I can throw away completely, since a user of the API will never
&gt; need it anyway), but it lead to quite huge blow-up of signatures:
&gt; 
&gt; &lt;https://github.com/Leonidas-from-XIV/slacko/blob/37c3626bb9574bc99325267fb4c9f9c3c4f4730c/src/slacko.mli&gt;
&gt; 
&gt; I am going to simplify these subsets a bit (since e.g. all history
&gt; methods use the same polymorphic variants and some possible error types
&gt; imply other error types) but it kinda looks very verbose now - any hints
&gt; on what can be done?

I don’t think it’s particularly verbose.
You have documented all the possible errors for each function, which is
valuable information, and it would take the same space (or more) if you
were to write this in comments.
If you think this is hard to read, you can try some factorization, but I’m not
sure it would help. Also, from a stylistic point of view I would write variant
definitions on a single line, since there are never more than 3 cases.

This said, there is always a tension between safety an complexity.
If in practice static checking of possible errors doesn’t matter that much,
it would be easier to write this code using normal variants.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Feedback on -safe-string migration attempts</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00019.html</cwn_url>
      <cwn_who>Gabriel Scherer said</cwn_who>
      <cwn_what>
I recently converted Extlib to work with safe-string ( the patch can
be found in the ocaml-lib-devel archives,
http://sourceforge.net/p/ocaml-lib/mailman/message/32877133/ ), and
while it mostly went smoothly, there was a pain point that I think
would be worth discussing.

The question is, when converting an existing library interface, how to
decide whether any given part of the API should remain a "string" or
be moved to "bytes" (
http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bytes.html ) -- or
maybe provide two functions, one for each type.

# The problem

The new distinction between bytes and string, added in 4.02, actually
plays on two different intuitions:
- bytes represents (1) mutable (2) sequences of bytes
- string represents (1) immutable (2) end-user text (which happen to
be represented as sequence of bytes, but we could think of
representing them as eg. Javascript strings in the future and with
js_of_ocaml, or with ropes, etc.)

The problem is that aspects (1) and (2) are somewhat orthogonal. I
don't think we're interested in mutable end-user texts, but I
encountered a few notable cases of (1) immutable (2) sequences of
bytes. The problem is: should those be typed as string, or bytes?

(There may be a difference between functions that assume their
arguments are immutable, and function that simply guarantee that they
won't themselves mutate their arguments. For now I'll assume those two
cases count as "immutable sequences of bytes").

Right now, the standard library itself does a strange job of making a
choice. The Marshal module (
http://caml.inria.fr/pub/docs/manual-ocaml/libref/Marshal.html )
appears to favor the choice of "bytes" for non-mutated byte sequences
(eg. data_size, total_size), while the Digest module (
http://caml.inria.fr/pub/docs/manual-ocaml/libref/Digest.html )
remained in the land of strings.


# An ideal solution

In an ideal world, I claim the best solution would be the following.
Given that it is clear (to me) that mutable byte sequences and
immutable byte sequences share the same representation, we should use
phantom type to distinguish them:

  type mut
  type immut
  type 'a bytes

  val get : 'a bytes -&gt; int -&gt; char
  val set : mut bytes -&gt; int -&gt; char
  Digest.t = immut bytes

Using phantom types had been considered at the time of the
bytes/string split, but rejected because suddenly adding polymorphism
to string literals and string functions broke a lot of code ("The type
of this expression, ..., contains a type variable that cannot be
generalized", or suddenly-polymorphic method return types). More
importantly, we do not want to enforce string and bytes to always have
the same underlying representation. Neither arguments hold for
mutable/immutable bytes.


# Going forward

It is probably a bit too late to change the "bytes" type in the
compiler standard library. (Well, feel free to disagree on this.)
And maybe we don't need to: just as more featureful, higher-level
libraries have been developed outside the OCaml distribution, we could
think of having a safer, higher-level phantom representation of byte
sequences, as an external library.

Regardless of what we do about this, I would recommend that immutable
byte sequences (things that are, by design, not text) be represented
as "bytes" rather than "string"¹. If/whenever a consensus on a safer
phantom representation appear, it will be possible to convert to it
without changing the representation.
Similarly, if your bytes-taking function does not mutate or capture
its input, you should mention it informally in its
specification/documentation (and maybe express this with a phantom
type later): this is important to reason about, for example, (un)safe
conversions on those byte sequences.

¹: a dissenting opinion could suggest that it is more important to get
the type-checker help re. mutability than expose the distinction
between byte-level data and text (which should be an abstract type in
some UTF8 library anyway), and thus immutable anything should rather
be "string". I think the phantom type approach is superior, and we
should design interfaces with it in mind.
      </cwn_what>
      <cwn_who>Jacques Garrigue replied</cwn_who>
      <cwn_what>
I think this is an interesting proposal.
We didn’t consider it when adding the -safe-string option, but I do
not think it is too late to change things in the compiler:
keeping compatibility with pre-4.02 code is essential, but Bytes
itself is still experimental, so changing the bytes type should be ok.

Actually, I think no decision was reached whether the ability to have
different internal representations for string and bytes is really important.
This may matter when you use javascript as backend, but otherwise?
If we decided to keep the same representation by default, then a
reasonable approach would be to adopt your proposal with the following
extra twist:

* in safe-string mode, string is an alias for immut bytes
	type 'a bytes
	type string = immut bytes
* in legacy mode, bytes is an alias for string
	type string
	type 'a bytes = string

To keep good compatibility, the functions in the String module would
only have monomorphic types.
The notation "s.[n]" is a subtle case, but a solution could be to have it
expanded to the monomorphic String.get in legacy mode, and to the polymorphic
Bytes.get in safe-string mode. This would allow to keep the "s.[n] &lt;- e”
notation too.

I think this would be more comfortable to use than the current state.
      </cwn_what>
      <cwn_who>Alain Frisch then said</cwn_who>
      <cwn_what>
I think it's good to keep the freedom to change the representation of
immutable text.  This could simplify some migration path towards
Unicode and/or allow using more clever representations (such as ropes,
strings with lazy concatenation, etc).

Generally speaking, I agree with Gabriel that the distinction between
strings and bytes is more about "text" vs "compact byte array" data,
than between immutable vs mutable.  I'm not sure about the need to
track immutability (or read-only permission) on "byte array", though.
Why would this be more important than on other kind of arrays?   In
particular, for numerical code, it would be equally useful to specify
immutability of vectors/matrices.  Do we want to go into this
direction of tracking mutation of arrays?

Actually, I think it would be interesting to introduce a module type
"ARRAY" for arrays with a fixed type "elt" of elements, add a Make
functor to the Array module, and arrange so that "Bytes" is a subtype
of "ARRAY with type elt = char" (in particular, it's "t" type
shouldn't be more parametric than the one in the ARRAY signature).  We
could similarly provide a compact "BoolArray" implementation, and if
we ever decide to drop the automatic runtime unboxing of float arrays,
we would of course provide a "FloatArray" replacement. "Polymorphic"
algorithms on arrays could be parametrized by a first-class ARRAY
module argument (and this would possibly work nicely with modular
implicits, and possibly with a more aggressive inliner).

This is quite independent from the current discussion, but perhaps it
shows that we shouldn't treat "Bytes" too specifically compared to
other kinds of arrays.
      </cwn_what>
      <cwn_who>Gabriel Scherer also replied</cwn_who>
      <cwn_what>
I'm strongly convinced that allowing a difference in representation is
the right choice. I'm not actively pushing for using another
representation, but in my experience thinking of them as distinct is
a very good thought-experiment to design better interfaces.

I would compare this to the idea that "data created at an immutable
type might be allocated in read-only memory": I'm not pushing for this
to be implemented, but it's an excellent thought-experiment to explain
why certains use of Obj.magic are assuredly wrong.

(In my experience so far working with the stdlib, Extlib and
Batteries, I have not felt that the distinct representations were
painful. In particular, I needed Bytes.get rarely enough that the lack
of s.[n] syntax was never an issue.)


I would thus rather suggest the following interfaces:
  type 'a bytes (* = string  under -unsafe-string *)
  type string

An interesting interface change would be the conversion functions. We
currently have:

  Bytes.of_string : string -&gt; bytes
  Bytes.to_string : bytes -&gt; string

  Bytes.copy : bytes -&gt; bytes

  (* see Bytes documentation *)
  Bytes.unsafe_of_string : string -&gt; bytes
  Bytes.unsafe_to_string : bytes -&gt; string

We could instead have something like the following:

  Bytes.immut_of_string : string -&gt; immut bytes
  Bytes.immut_to_string : immut bytes -&gt; string

  Bytes.copy : 'a bytes -&gt; 'b bytes

  (* same usage restrinction than Bytes.unsafe_{of,to}_string,
     see the documentation *)
  Bytes.unsafe_mut : immut bytes -&gt; mut bytes
  Bytes.unsafe_immut : bytes bytes -&gt; immut bytes

with the aliases

  Bytes.of_string : string -&gt; 'a bytes
  of_string s = copy (immut_of_string s)

  Bytes.to_string : 'a bytes -&gt; string
  to_string s = immut_to_string (copy s)

  Bytes.unsafe_to_string : mut bytes -&gt; string
  unsafe_to_string s = immut_to_string (unsafe_immut s)

(unsafe_of_string could go away: it can only be correctly used if the
resulting bytes is used immutably, so it is superseded by the safe
immut_of_string function.)
      </cwn_what>
      <cwn_who>Gerd Stolpmann also replied to the original post</cwn_who>
      <cwn_what>
&gt; # The problem
&gt; 
&gt; The new distinction between bytes and string, added in 4.02, actually
&gt; plays on two different intuitions:
&gt; - bytes represents (1) mutable (2) sequences of bytes
&gt; - string represents (1) immutable (2) end-user text (which happen to
&gt; be represented as sequence of bytes, but we could think of
&gt; representing them as eg. Javascript strings in the future and with
&gt; js_of_ocaml, or with ropes, etc.)

Well, I think there are different views on this: In the OCaml stdlib
there is no distinction between character and byte, and it is left to
the user how to represent text (e.g. to use multibyte UTF-8 text). From
that point of view it is clear that "string" is for immutable data, no
matter weather text or bytes, and "bytes" is for mutable data of either
kind. However, as you found out this is sometimes impractical. If you
have some data you don't want to draw a somewhat arbitrary line between
mutable and immutable appearances of it.

I also will have to convert a fairly amount of code, and esp. for
Ocamlnet I really don't see how to do this cleanly, because the kind of
data suddenly changes. For instance the HTTP client reads bytes into a
bytes buffer, but the HTTP headers have more the characteristics of
text.

&gt; The problem is that aspects (1) and (2) are somewhat orthogonal. I
&gt; don't think we're interested in mutable end-user texts, but I
&gt; encountered a few notable cases of (1) immutable (2) sequences of
&gt; bytes. The problem is: should those be typed as string, or bytes?
&gt; 
&gt; (There may be a difference between functions that assume their
&gt; arguments are immutable, and function that simply guarantee that they
&gt; won't themselves mutate their arguments. For now I'll assume those two
&gt; cases count as "immutable sequences of bytes").
&gt; 
&gt; Right now, the standard library itself does a strange job of making a
&gt; choice. The Marshal module (
&gt; http://caml.inria.fr/pub/docs/manual-ocaml/libref/Marshal.html )
&gt; appears to favor the choice of "bytes" for non-mutated byte sequences
&gt; (eg. data_size, total_size), while the Digest module (
&gt; http://caml.inria.fr/pub/docs/manual-ocaml/libref/Digest.html )
&gt; remained in the land of strings.

I also noticed that some functionality is now available over two
interfaces. In particular, there are now functions for writing from a
bytes buffer and for writing from a string buffer (e.g. Unix.write and
Unix.write_substring). My thinking is that all stdlib functions should
now be provided in that manner.

&gt; # An ideal solution
&gt; 
&gt; In an ideal world, I claim the best solution would be the following.
&gt; Given that it is clear (to me) that mutable byte sequences and
&gt; immutable byte sequences share the same representation, we should use
&gt; phantom type to distinguish them:
&gt; 
&gt;   type mut
&gt;   type immut
&gt;   type 'a bytes
&gt; 
&gt;   val get : 'a bytes -&gt; int -&gt; char
&gt;   val set : mut bytes -&gt; int -&gt; char
&gt;   Digest.t = immut bytes
&gt; 
&gt; Using phantom types had been considered at the time of the
&gt; bytes/string split, but rejected because suddenly adding polymorphism
&gt; to string literals and string functions broke a lot of code ("The type
&gt; of this expression, ..., contains a type variable that cannot be
&gt; generalized", or suddenly-polymorphic method return types). More
&gt; importantly, we do not want to enforce string and bytes to always have
&gt; the same underlying representation. Neither arguments hold for
&gt; mutable/immutable bytes.

A new variant! The problem is still that it introduces polymorphisms.

For OCamlnet I was more thinking of providing all internal string
functionality also with string_reader interface. A string_reader is a
little abstraction on top of string/bytes/char bigarray that abstracts
the representation, and provides the most needed functions (at least
what String/Bytes have, plus extensions like searching, conversions,
maybe even regexps). I think that's the missing piece to make the
"bytes" change acceptable:

module String_reader : sig
  type t
  val for_string : string -&gt; t
  val for_bytes : bytes -&gt; t
  val for_memory : (char,...,...) Bigarray.Array1.t -&gt; t

  val get : t -&gt; int -&gt; char
  val sub_string : t -&gt; int -&gt; int -&gt; string
  val sub_bytes : t -&gt; int -&gt; int -&gt; bytes
  val blit_to_bytes : t -&gt; int -&gt; bytes -&gt; int -&gt; int -&gt; unit
  val blit_to_memory : t -&gt; int -&gt; (char,...) Bigarray.Array1.t -&gt; int
-&gt; int -&gt; unit

  val index : t -&gt; char -&gt; int

  val search_leftmost : t -&gt; t -&gt; int -&gt; int
  val search_rightmost : t -&gt; t -&gt; int -&gt; int

  val get_int32_le : t -&gt; int -&gt; int32
  val get_int32_be : t -&gt; int -&gt; int32
  val get_int64_le : t -&gt; int -&gt; int64
  val get_int64_be : t -&gt; int -&gt; int64

  (* plus more ... not sure yet what to cover exactly *)

end
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Thoughts on targeting windows</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00020.html</cwn_url>
      <cwn_who>Anil Madhavapeddy announced, continuing this old thread</cwn_who>
      <cwn_what>
At a recent compiler hacking session in Cambridge, Don Syme pointed
out a great Travis-like service for running regular Windows builds
called Appveyor(.com).  In order to get more familiar with the Windows
toolchain, I ported some of Thomas Braibant's instructions for
compiling OPAM on Windows using it here:

Cygwin scripts: https://github.com/ocaml/opam/blob/master/appveyor.yml
Build output:   https://ci.appveyor.com/project/avsm/opam/build/1.0.38

Appveyor can be used much like Travis and build every Git checkin on
Windows, except that they unfortunately overwrite each other's status
flags (the green tick or red cross against each commit), so they
cannot be simultaneously used on one GitHub repository right now.
I contacted GitHub support and they indicated that they are adding
support for multiple CI tools into the UI, but do not have a time
estimate for when that would be ready.

In the meanwhile though, I hope Appveyor comes in useful for anyone
wanting to automate Windows testing via a free hosted service.  Pull
requests to improve OPAM's Appveyor scripts in this regard (for MinGW
or Cygwin or ideally testing them both) would be welcome.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the OCaml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocaml.org/&gt;.

Recursive list:
  &lt;http://shayne-fletcher.blogspot.com/2014/10/recursive-list.html&gt;

Ocsigen: releases of Js_of_ocaml, Eliom, Server, Macaque, Tyxml:
  &lt;http://ocsigen.org/&gt;

Senior Software Engineer at McGraw-Hill Education (Full-time):
  &lt;http://functionaljobs.com/jobs/8744-senior-software-engineer-at-mcgraw-hill-education&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
