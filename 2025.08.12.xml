<cwn>
  <cwn_head>
    <cwn_date>2025.08.12</cwn_date>
    <cwn_prev>2025.08.05</cwn_prev>
    <cwn_next>2025.08.19</cwn_next>
    <cwn_date_text>August 05 to 12, 2025</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Slipshow!</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-slipshow/16337/9</cwn_url>
      <cwn_who>Paul-Elliot announced</cwn_who>
      <cwn_what>
It is with some /bitter/ joy that I‚Äôm announcing the 0.4.1 version of Slipshow [on opam](https://github.com/ocaml/opam-repository/pull/28181):

*** The slides strike back

The main improvements of this version are the introduction of arguments to actions, a frontmatter, and improvements to slides.

All together, they allow to easily design presentations the slides way:

https://github.com/user-attachments/assets/844754a7-7731-45a8-8cc5-97a315d5cd92

#+begin_example
---
toplevel-attributes: {children:slide children:enter="~duration:0"}
---

# Slide 1

Content

---

# Slide 2

Content

---

# Slide 3

You get it
#+end_example

So, why ‚Äú‚Äã/bitter/ joy‚Äù?

I was reluctant to add good support for traditional slide-based presentation. There are already very good and mature solutions for this, including some with similar technical foundations as Slipshow. I was more interested in developping the new things: Slips!

However, Slipshow starts to have useful features that competitor don‚Äôt always have (for instance: a self-contained html output! But more, and more to come). Also, for people who already have slide-based presentations, it makes it easier to migrate them, and use a single tool for old and new presentations!

Finally, I wanted to make Slipshow a bit more versatile and added attributes, frontmatter, and a new options: ~toplevel-attributes~. The proper slide support is actually just a nice consequence of this versatility! ü•≥

Here is the full changelog:

- Fix ~children:~ not working sometimes
- Add ~--toplevel-attributes~ to control the attributes on the toplevel
  container
- Render slide titles as slide titles
- Add arguments to actions
- Add frontmatter 

  You can now do

  #+begin_example
  ---
  theme: vanier
  dimension: 16:9
  css: my_pres.css
  ---
  
  The content here.
  #+end_example

*** OCaml-specific notes on action arguments

In this release, I add the ability to give arguments to actions. For instance, an action can be to focus on a specific element:

#+begin_example
{#my_element}
Some content

{focus="my_element"}
#+end_example

The "positional" arguments is the list of IDs that must be focused. To add other kind of arguments , they need to be named:

#+begin_example
{#my_element}
Some content

{focus="~duration:2 ~margin:5 my_element"}
#+end_example

It was fun to integrate OCaml syntax in slipshow ;) This way, people coming to OCaml after learning slipshow will feel familiar with the syntax!
      </cwn_what>
      <cwn_who>Paul-Elliot later announced</cwn_who>
      <cwn_what>
The Slipshow development intensifies... It is with external pleasure that I announce the [0.5.0](https://github.com/panglesd/slipshow/releases/tag/v0.5.0) release of slipshow [on opam](https://github.com/ocaml/opam-repository/pull/28308).

Warning: External files have invaded our world! They raise dead formats like PDF into the liveliness of Slipshow presentations!

*** Slipshow 0.5.0: Plan 9 from External Files

As subtly hinted by the title, this slipshow release focuses on the integration of external files in a presentation. Rest assured, a compiled Slipshow presentation stays a standalone HTML file!

In effect, you can now include PDFs, videos and audios files in your presentations! Here is a demo:

https://github.com/user-attachments/assets/bf7d5933-9b29-4e52-ac2a-c4a9a87d9dc6

With the simple source:

#+begin_src md
{#title}
# Plan 9 from External Files

{pause play-media=mp4}
## Video demo

![](plan9.mp4){#mp4 style="width:100%"}

{pause up}

## PDF demo

![](plan9.pdf){#pdf}

{focus=pdf}

{change-page="~n:all pdf"}

{unfocus up=title}
#+end_src

Here is the full changelog:

**** Compiler

- Add support for pdfs
- Add support for audios and videos
- Fix ~enter~ action being added to blockquotes

**** Language

- Add a carousel type and a ~change-page~ action
- Add a ~play-media~ action

**** Engine

- Fix compatibility of slipshow and editable content
- Fix scroll bar appearing in drawing toolbox
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Miou, a simple scheduler for OCaml 5</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-miou-a-simple-scheduler-for-ocaml-5/12963/16</cwn_url>
      <cwn_who>Calascibetta Romain announced</cwn_who>
      <cwn_what>
I am pleased to announce the release of [miou.0.4.0](https://github.com/robur-coop/miou), the documentation was just updated [here](https://docs.osau.re) and the book to learn about Miou is still available [here](https://robur-coop.github.io/miou). This version mainly consolidates our experiments with other libraries, notably: [~ocaml-dns~](https://github.com/mirage/ocaml-dns), [~happy-eyeballs~](https://github.com/robur-coop/happy-eyeballs), [~mirage-crypto~](https://github.com/mirage/mirage-crypto), [~ocaml-tls~](https://github.com/mirleft/ocaml-tls), [~httpcats~](https://github.com/robur-coop/httpcats), [~carton~](https://github.com/robur-coop/carton), [~sendmail~](https://github.com/mirage/colombe) and [~caqti~](https://github.com/paurkedal/ocaml-caqti).

This consolidation of the API allows us to go further and, in particular, to start offering the [development of unikernels with OCaml 5](https://github.com/robur-coop/miou-solo5/blob/main/slides/retreat.md). To this end, you can follow projects such as [miou-solo5](https://github.com/robur-coop/miou-solo5) or [chaos](https://git.robur.coop/robur/chaos). An overview is available [on my blog](https://blog.osau.re/articles/last_mirageos_retreat.html) (which presents the latest Mirage retreat in May).

We would also like to continue improving [Vif](https://github.com/robur-coop/vif) and [Hurl](https://github.com/robur-coop/hurl) ([a tutorial](https://robur-coop.github.io/vif/) has just been published on this subject).

Other projects are still in the experimental phase, such as: [~notty~ / ~nottui~](https://github.com/robur-coop/notty-miou), [~blaze~](https://github.com/dinosaure/blaze), [~multipart_form~](https://github.com/dinosaure/multipart_form) or [~awa-ssh~](https://github.com/mirage/awa-ssh).

Finally, we would like to thank everyone who has participated directly or indirectly in this project and to its integration into the OCaml ecosystem.

Happy hacking!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Dream development open video call</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/dream-development-open-video-call/17053/6</cwn_url>
      <cwn_who>Continuing this thread, Anton Bachin announced</cwn_who>
      <cwn_what>
For those interested in minutes/notes, providing a brief summary :slight_smile: 

We had a chat about how to maintain Dream as a community, added several people to the repo (master branch is locked for security), and worked through what we can do immediately on several PRs. I showed how I maintain Dream on those PRs, and several others contributed their thoughts and ideas.

At the end we talked off-topic a bit about the future of Dream and bigger projects in it and around it to tackle.

It‚Äôs difficult to write out minutes as it was a lot of detailed talk and work ‚Äì adding specific people, dealing with specific issues. One can see the recent activity in the [Dream repo](https://github.com/aantron/dream) to see our guinea pig PRs :slight_smile:
      </cwn_what>
      <cwn_who>Anton Bachin later added</cwn_who>
      <cwn_what>
We‚Äôre going to have the next dev meeting this coming Friday, and weekly thereafter.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocaml.org blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://ocaml.org/events][Upcoming OCaml Events]]
- [[https://patrick.sirref.org/irmin-retro/][Irmin Retrospective]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
