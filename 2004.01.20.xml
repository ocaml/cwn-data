<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2004.01.20</cwn_date>
  <cwn_prev>2004.01.13</cwn_prev>
  <cwn_next>2004.01.27</cwn_next>
  <cwn_date_text>13 to 20 January, 2004</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>mod_caml 1.0.6 - includes security patch</cwn_title>
    <cwn_who>Richard Jones announced</cwn_who>
    <cwn_what>
A security problem has been found in mod_caml 1.0.5 and earlier which
could lead to a SQL insertion attack on PostgreSQL databases.
mod_caml normally escapes strings before inserting them into
PostgreSQL queries.  However a bug was found in this escaping
function.  This would allow attackers to craft arbitrary SQL commands
to run against the database.

This is fixed in version 1.0.6, along with some other minor bugfixes,
or you can apply the source patch at the end of this message.

Because savannah.nongnu.org continues to be partially unavailable,
version 1.0.6 is available here:

http://www.annexia.org/tmp/mod_caml-1.0.6.tar.gz (about 74K)

Rich.

----------------------------------------------------------------------

From: http://www.merjis.com/developers/mod_caml/

What is mod_caml?

mod_caml is a set of Objective CAML (OCaml) bindings for the Apache
API. It allows you to run CGI scripts written in OCaml directly inside
the Apache webserver. However, it is much much more than just that:

    * Bind to any part of the Apache request cycle.
    * Read and modify internal Apache structures.
    * Share modules of code between handlers and scripts.
    * CGI library and templating system (allows separation of
      code and presentation).
    * Works with Apache 1.3 and Apache 2.0.
    * DBI library for simple database access.
    * DBI library can use Perl DBDs (database drivers) [requires
      Perl4Caml &gt;= 0.3.6]

----------------------------------------------------------------------
diff -u -r1.11 dbi_postgres.ml
--- dbi_postgres.ml     23 Nov 2003 14:24:57 -0000      1.11
+++ dbi_postgres.ml     15 Jan 2004 13:34:04 -0000
@@ -42,11 +42,16 @@
 (* Damn. [Postgres] module doesn&apos;t export the PQescapeString function, so
  * I&apos;ve had to write it myself.
  *)
-let escape_string s =
-  String.concat &quot;&quot; [ &quot;&apos;&quot;;
-                    (Pcre.replace ~pat:&quot;&apos;&quot; ~templ:&quot;&apos;&apos;&quot; s);
-                    &quot;&apos;&quot; ]
+let escape_string =
+  let re1 = Pcre.regexp &quot;&apos;&quot; in         (* Double up any single quotes. *)
+  let sub1 = Pcre.subst &quot;&apos;&apos;&quot; in
+  let re2 = Pcre.regexp &quot;\\\\&quot; in      (* Double up any backslashes. *)
+  let sub2 = Pcre.subst &quot;\\\\&quot; in
+  fun s -&gt;
+    let s = Pcre.replace ~rex:re1 ~itempl:sub1 s in
+    let s = Pcre.replace ~rex:re2 ~itempl:sub2 s in
+    &quot;&apos;&quot; ^ s ^ &quot;&apos;&quot;                      (* Surround with quotes. *)

 (* PCRE regular expressions for parsing timestamps and intervals. *)
 let re_timestamp =
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Pattern match on regexs</cwn_title>
    <cwn_who>Brian Hurt said and Yutaka Oiwa answered</cwn_who>
    <cwn_what>
&gt; What I&apos;d like to see is to be able to pattern match on regexs, like:

&gt; match str with
&gt;  | /ab+/ -&gt; ...
&gt;  | /foo(bar)*/ -&gt; ...
&gt;
&gt; etc.

My camlp4-macro named Regexp/OCaml may solve most of the requests:
try it from http://www.yl.is.s.u-tokyo.ac.jp/~oiwa/caml/ .

Using Regexp/OCaml, you can write the code like

    Regexp.match str with
      &quot;^(\d+)-(\d+)$&quot; as f : int, t : int -&gt;
        for i = f to t do
          printf &quot;%d\n&quot; i
        done
    | &quot;^(\d+)$&quot; as s : int -&gt;
        printf &quot;%d\n&quot; s

to perform branch based on multiple regular patterns and to extract
matched substrings automatically (bound to f, t, s respectively, after
converted to int type by using int_of_string).  See
http://www.yl.is.s.u-tokyo.ac.jp/~oiwa/pub/caml/regexp-pp-0.9.3/README.match-regexp
for further details.


&gt; The compiler could then combine all the matchings into a single DFA, 
&gt; improving performance over code like:
&gt;
&gt; if (regex_match str &quot;ab+&quot;) then
&gt;     ...
&gt; else if (regex_match str &quot;foo(bar)*&quot;) then
&gt;     ...
&gt; else 
&gt;     ...

The code generated by current Regexp/OCaml is something similar to the
above, (however, pattern compilations are performed only once per
execution per each pattern.) but if the backend regexp engine
(currently Regexp/OCaml uses PCRE/OCaml) supports optimization for
multiple regular expression matching, Regexp/OCaml can easily
utilize it.  Analysis for patterns may be performed at compilation
(camlp4-translation) phase, if required.

&gt; The regex matching would also let the compiler know if there were possible 
&gt; unmatched strings (these would should up as transitions to the error state 
&gt; in the DFA).

This feature is not currently implemented in Regexp/OCaml, but
as the macro package owns self-implemented parser for regular
patterns, it is possible to implement if I have enough time to do.
(And it is included in my personal to-do list for Regexp/OCaml.)
    </cwn_what>
    <cwn_who>Markus Mottl added</cwn_who>
    <cwn_what>
&gt; The code generated by current Regexp/OCaml is something similar to the
&gt; above, (however, pattern compilations are performed only once per
&gt; execution per each pattern.) but if the backend regexp engine
&gt; (currently Regexp/OCaml uses PCRE/OCaml) supports optimization for
&gt; multiple regular expression matching, Regexp/OCaml can easily
&gt; utilize it.  Analysis for patterns may be performed at compilation
&gt; (camlp4-translation) phase, if required.

As mentioned in a previous post, this could be done using the callout
features of PCRE-OCaml. Only problem: the string to be matched is
internally copied to the C-heap (once), because the OCaml-GC could
theoretically move the string to another memory location in the OCaml-heap
during callouts.

Thus, it may not be as efficient as you expect, and possibly only pay
off if the patterns match the same, long string prefixes. Unfortunately,
there is no workaround for this: you&apos;d either have to rewrite PCRE so
that you can return pointers to new string locations after each callout
(no, thanks ;) or somehow be able to temporarily protect strings from
being moved by the GC (not feasible either, I suppose; would, however,
work with character strings in char Bigarrays if I am not mistaken).
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>MPassing, J4, Camllisp first public releases</cwn_title>
    <cwn_who>Vitaly Lugovsky announced</cwn_who>
    <cwn_what>
 http://ontil.ihep.su/~vsl/

MPassing-0.0.0: simple ConcurrentML-like message passing
 library with a network transparency (based on a Marshal functionality
 currently), including some common features like threads pools,
 consumer queues, logging, notifications.

J4-0.0.0: simple base to build a Joy-like embedded languages
 for Objective Caml programs. Suitable for a research purposes
 only.

Camllisp-0.0.0: lisp-like embeddable language for Objective Caml.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Caml-get 0.1</cwn_title>
    <cwn_who>Maxence Guesdon announced</cwn_who>
    <cwn_what>
I'm pleased to announce the first release of caml-get, an experimental
tool to distribute and get Objective-Caml code, in a way similar to the
apt-get utility.

What is it ? How does it work ? Where to get it ? Answers are on the
caml-get home page:
http://pauillac.inria.fr/~guesdon/Tools/camlget/

Comments are welcome, especially since I don't know about any similar
tool.
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
