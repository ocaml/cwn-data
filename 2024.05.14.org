#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2024.05.07.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2024.05.21.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of May 07 to 14, 2024.

#+TOC: headlines 1


* Some code for Molecular Mechanics in OCaml
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/some-code-for-molecular-mechanics-in-ocaml-ann/14610/1

** UnixJunkie announced


Recently, I released a bunch of code for some Molecular Mechanics
calculations in OCaml.

This is pretty much at the beta stage for the moment.

https://github.com/UnixJunkie/MMO

Maybe in the future I will create a proper library to encapsulate
the Mol and Mol2 modules in there; they allow to perform
some operations on small molecules.

For those interested, there is a partial implementation of the Universal Force Field (UFF)
in there; only the part concerning non-bonded interactions.
      



* OCaml.org Newsletter: April 2024
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/ocaml-org-newsletter-april-2024/14611/1

** Sabine Schmaltz announced


Welcome to the April 2024 edition of the OCaml.org newsletter! This update has been compiled by the OCaml.org team. You can find [[https://discuss.ocaml.org/tag/ocamlorg-newsletter][previous updates]] on Discuss.

Our goal is to make OCaml.org the best resource for anyone who wants to get started and be productive in OCaml. The OCaml.org newsletter provides an update on our progress towards that goal and an overview of the changes we are working on.

We couldn't do it without all the amazing people who help us review, revise, and create better OCaml documentation and work on issues. Your participation enables us to so much more than we could just by ourselves. Thank you!

This newsletter covers:
- *OCaml Cookbook:* We shipped a new, community-driven section in the Learn area. Help us make it really useful by contributing and reviewing recipes for common tasks!
- *Community & Marketing Pages Rework:* We have UI designs for the reworked and new pages of the community section and are starting work to implement these.
- *General Improvements:* As usual, we also worked on general maintenance and improvements, so we're highlighting some of the work that happened below.

*** Open Issues for Contributors

You can find [[https://github.com/ocaml/ocaml.org/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+no%3Aassignee][open issues for contributors here]]!

Here's some new (and as of time of writing this newsletter still open) issues that were opened this month:

- Package Versions page is missing dark mode styles [[https://github.com/ocaml/ocaml.org/issues/2341][ocaml/ocaml.org#2341]]  by [[https://github.com/sabine][@sabine]]
- (Data) Extend the Data Model of Academic Institution to Record Information about Course Materials [[https://github.com/ocaml/ocaml.org/issues/2328][ocaml/ocaml.org#2328]]  by [[https://github.com/sabine][@sabine]]
  
*** The OCaml Cookbook

We shipped a new, community-driven section in the Learn area: the OCaml Cookbook!

The OCaml Cookbook is a place where OCaml developers share how to solve common tasks using packages from the ecosystem.

A task is something that needs to be done inside a project. A recipe is a code sample and explanations on how to perform a task using a combination of open source libraries.

The Cookbook now live at [[https://ocaml.org/cookbook][ocaml.org/cookbook]], but there are not a lot of recipes published yet.

Here's how we need your help:

1. Help review [[https://github.com/ocaml/ocaml.org/pulls?q=is%3Apr+is%3Aopen+label%3ACookbook][open pull requests for cookbook recipes]]!
2. Contribute new recipes and tasks for the cookbook!
3. Suggest improvements to existing recipes and the UI.

*Relevant PRs and Activities:*
- Open PRs in need of reviewers:
  - PR: Cookbook geodesic [[https://github.com/ocaml/ocaml.org/pull/2381][ocaml/ocaml.org#2381]] by [[https://github.com/F-Loyer][@F-Loyer]]
  - PR: Cookbook / subprocess creation [[https://github.com/ocaml/ocaml.org/pull/2382][ocaml/ocaml.org#2382]]  by [[https://github.com/F-Loyer][@F-Loyer]]
  - PR: Cookbook getenv [[https://github.com/ocaml/ocaml.org/pull/2383][ocaml/ocaml.org#2383]]  by [[https://github.com/F-Loyer][@F-Loyer]]
  - PR: Cookbook : linalg [[https://github.com/ocaml/ocaml.org/pull/2386][ocaml/ocaml.org#2386]]  by [[https://github.com/F-Loyer][@F-Loyer]]
  - PR: Use camlzip and with_open_text [[https://github.com/ocaml/ocaml.org/pull/2371][ocaml/ocaml.org#2371]]  by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - PR: Deserialise and post-process YAML recipes [[https://github.com/ocaml/ocaml.org/pull/2372][ocaml/ocaml.org#2372]]  by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - PR: Rebased database recipes [[https://github.com/ocaml/ocaml.org/pull/2376][ocaml/ocaml.org#2376]]  by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - PR: Rebased basic concurrency recipe [[https://github.com/ocaml/ocaml.org/pull/2377][ocaml/ocaml.org#2377]]  by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - PR: Rebased sorting recipe [[https://github.com/ocaml/ocaml.org/pull/2378][ocaml/ocaml.org#2378]]  by [[https://github.com/cuihtlauac][@cuihtlauac]]
  - PR: Rebased ascii and utf-8 recipes [[https://github.com/ocaml/ocaml.org/pull/2379][ocaml/ocaml.org#2379]]  by [[https://github.com/cuihtlauac][@cuihtlauac]]

*** Community & Marketing Pages Rework

We have [[https://www.figma.com/file/7hmoWkQP9PgLTfZCqiZMWa/OCaml-Community-Pages?type=design&node-id=637%3A4539&mode=design&t=RpQlGvOpeg1a93AZ-1][UI designs for the reworked and new pages of the community section]] and are starting work to implement these. We are opening small issues for contributors to help. :orange_heart: 

*Relevant PRs and Activities:*
- PR: UI: Added  DateTime of Event on the Client Side in the User's Timezone [[https://github.com/ocaml/ocaml.org/pull/2339][ocaml/ocaml.org#2339]] by [[https://github.com/maha-sachin][@maha-sachin]]
- PR: Create new Events page with routing under Community [[https://github.com/ocaml/ocaml.org/pull/2338][ocaml/ocaml.org#2338]] by [[https://github.com/shakthimaan][@shakthimaan]]
- PR: Add event_type field to Events, and render tag in Event cards [[https://github.com/ocaml/ocaml.org/pull/2366][ocaml/ocaml.org#2366]] by [[https://github.com/csaltachin][@csaltachin]]

*** General Improvements and Data Additions

*Relevant PRs and Activities:*
- Bugfixes
    - PR: fix: add .modules style for odoc-generated documentation pages [[https://github.com/ocaml/ocaml.org/pull/2355][ocaml/ocaml.org#2355]]  by [[https://github.com/sabine][@sabine]]
    - PR: Fix: correct text color on community resource card [[https://github.com/ocaml/ocaml.org/pull/2329][ocaml/ocaml.org#2329]]  by [[https://github.com/sabine][@sabine]]
    - PR: fix: Make Community card about LearnOCaml point to the correct URL [[https://github.com/ocaml/ocaml.org/pull/2331][ocaml/ocaml.org#2331]]  by [[https://github.com/yurug][@yurug]]
- Documentation
    - PR: OCaml Tour: -New sections- Introduction and Before We Begin. Added REPL definition and double semicolon use [[https://github.com/ocaml/ocaml.org/pull/2336][ocaml/ocaml.org#2336]] by [[https://github.com/Alfredo-Carlon][@Alfredo-Carlon]]
    - PR: Minor line editing on "Values and Functions" Tutorial [[https://github.com/ocaml/ocaml.org/pull/2321][ocaml/ocaml.org#2321]] by [[https://github.com/jeuxdeau][@jeuxdeau]]
- Data
    - PR: [planet]: add melange blog [[https://github.com/ocaml/ocaml.org/pull/2362][ocaml/ocaml.org#2362]] by [[https://github.com/anmonteiro][@anmonteiro]]
    - PR: (data) add april OUPS meetup [[https://github.com/ocaml/ocaml.org/pull/2360][ocaml/ocaml.org#2360]]  by [[https://github.com/sabine][@sabine]]
    - PR: Add TUM as an academic institution  [[https://github.com/ocaml/ocaml.org/pull/2347][ocaml/ocaml.org#2347]] by [[https://github.com/PumPum7][@PumPum7]]
    - PR: Add Routine job post. [[https://github.com/ocaml/ocaml.org/pull/2325][ocaml/ocaml.org#2325]] by [[https://github.com/mefyl][@mefyl]]
    - PR: (data) Add OCaml Workshop to Upcoming Events [[https://github.com/ocaml/ocaml.org/pull/2326][ocaml/ocaml.org#2326]] by [[https://github.com/sabine][@sabine]]
    - PR: (data) add ReasonSTHLM meetup [[https://github.com/ocaml/ocaml.org/pull/2308][ocaml/ocaml.org#2308]]  by [[https://github.com/sabine][@sabine]]
    - PR: Add missing Mdx changelogs [[https://github.com/ocaml/ocaml.org/pull/2368][ocaml/ocaml.org#2368]] by [[https://github.com/tmattio][@tmattio]]
    - PR: Fix small typo in Dune 3.14 announcement [[https://github.com/ocaml/ocaml.org/pull/2315][ocaml/ocaml.org#2315]] by [[https://github.com/Leonidas-from-XIV][@Leonidas-from-XIV]]
    - PR: Dune 3.15.0 announcement [[https://github.com/ocaml/ocaml.org/pull/2316][ocaml/ocaml.org#2316]] by [[https://github.com/Leonidas-from-XIV][@Leonidas-from-XIV]]
    - PR: OCaml 5.2.0-beta2 changelog entry [[https://github.com/ocaml/ocaml.org/pull/2343][ocaml/ocaml.org#2343]]  by [[https://github.com/Octachron][@Octachron]]
    - PR: (data) add March 2024 OCaml.org newsletter [[https://github.com/ocaml/ocaml.org/pull/2317][ocaml/ocaml.org#2317]] by [[https://github.com/sabine][@sabine]]
    - PR: Add the announement for opam 2.2.0~beta2 [[https://github.com/ocaml/ocaml.org/pull/2334][ocaml/ocaml.org#2334]] by [[https://github.com/kit-ty-kate][@kit-ty-kate]]
    - PR: jobs: remove XenServer positions [[https://github.com/ocaml/ocaml.org/pull/2387][ocaml/ocaml.org#2387]] by [[https://github.com/edwintorok][@edwintorok]]
- Move of the OCaml Language Manual from v2.ocaml.org to ocaml.org
    - PR: fix: Serve manual under /lts and /latest URLs [[https://github.com/ocaml/ocaml.org/pull/2345][ocaml/ocaml.org#2345]]  by [[https://github.com/sabine][@sabine]]
    - PR: Remove /manual/lts URL, fix broken route for /manual/latest [[https://github.com/ocaml/ocaml.org/pull/2348][ocaml/ocaml.org#2348]]  by [[https://github.com/sabine][@sabine]]
    - PR: Add /api/** redirection [[https://github.com/ocaml/ocaml.org/pull/2352][ocaml/ocaml.org#2352]] by [[https://github.com/mtelvers][@mtelvers]]
    - PR: Handle lts, default and missing version in middleware [[https://github.com/ocaml/ocaml.org/pull/2358][ocaml/ocaml.org#2358]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
    - PR: Add served pages to sitemap [[https://github.com/ocaml/ocaml.org/pull/2363][ocaml/ocaml.org#2363]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
    - PR: Skip unreleased manuals from sitemap [[https://github.com/ocaml/ocaml.org/pull/2367][ocaml/ocaml.org#2367]]  by [[https://github.com/cuihtlauac][@cuihtlauac]]
    - PR: Turn some v2 redirects into local [[https://github.com/ocaml/ocaml.org/pull/2356][ocaml/ocaml.org#2356]]  by [[https://github.com/cuihtlauac][@cuihtlauac]]
- Refactor / Code health
    - PR: Remove Commit module from Global [[https://github.com/ocaml/ocaml.org/pull/2319][ocaml/ocaml.org#2319]]  by [[https://github.com/cuihtlauac][@cuihtlauac]] (created/merged: 2024-04-05T14:17:31Z)
    - PR: chore: remove learn_sidebar.eml, which was not used anymore [[https://github.com/ocaml/ocaml.org/pull/2342][ocaml/ocaml.org#2342]]  by [[https://github.com/sabine][@sabine]]
    - PR: Add link to deploy.ci.ocaml.org in HACKING [[https://github.com/ocaml/ocaml.org/pull/2354][ocaml/ocaml.org#2354]] by [[https://github.com/cuihtlauac][@cuihtlauac]]
    - PR: Use type annotation for data parameters [[https://github.com/ocaml/ocaml.org/pull/2384][ocaml/ocaml.org#2384]]  by [[https://github.com/cuihtlauac][@cuihtlauac]]
      



* Example of using LSP server in Emacs
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/example-of-using-lsp-server-in-emacs/14601/4

** Tim McGilchrist announced


I wrote a blog post about my setup https://lambdafoo.com/posts/2022-09-07-ocaml-with-emacs-2022.html The only change I've made is to use ~envrc-mode~ rather than ~direnv-mode~.
      



* Dune Developer Experience Feedback Form
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/dune-developer-experience-feedback-form/14617/1

** ostera announced


The Dune team at [[https://tarides.com][Tarides]] is looking to get inputs from all of you to improve the Dune DX (developer experience), so we've opened a [[https://forms.gle/izg5xSt1XNp3i4Rc8][small, anonymous, unstructured feedback form]] to hear your ideas on how Dune could be improved :camel: 

We're looking forward to your ideas! :sparkles: 
      



* DkML 2.1.1
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/ann-dkml-2-1-1/14620/1

** jbeckford announced


Use [[https://ocaml.org/install][https://ocaml.org/install]] if you are a first-time user (the install steps haven't changed).

The upgrade steps and release notes are available at https://gitlab.com/dkml/distributions/dkml/-/releases/2.1.1. For those who are on 2.1.0, the upgrade is the following in PowerShell:

#+begin_example
1..6 | % {  @("bash","sh","with-dkml","ocamllsp","git","opam","dune","ocamlrun") | % { taskkill /F /IM "$_.exe" }; Start-Sleep 1 }
winget upgrade dkml
#+end_example

*** Major Changes

- The opam repository is fixed to [[https://github.com/ocaml/opam-repository/tree/6c3f73f42890cc19f81eb1dec8023c2cd7b8b5cd][commit 6c3f73f42890cc19f81eb1dec8023c2cd7b8b5cd]] for stability. If you need a new version of a package and can't wait for the next version of DkML, you can pin that package's url (recommended) or float the opam repository with ~opam repository set-url default git+https://github.com/ocaml/opam-repository.git#main~.
- Windows SDK 10.0.22621.0 and VC 17.8 (14.38) added to allowed list. This supports Visual Studio 2022, especially for GitLab CI.
- New supported package: ~tiny_httpd~

*** Patches

| Package                | What                              | Issue                                                 |
|----------------------|---------------------------------|-------------------------------------------------------|
| ~base_bigstring.v16.0~ | Implement ~memmem~ for Windows    | https://github.com/janestreet/base_bigstring/issues/6 |
| ~core_kernel.v0.16.0~  | MSVC fix didn't make it to 0.16.0 | https://github.com/janestreet/core_kernel/pull/107    |

*** Upgraded Packages

| Package             | From                     | To                       |
|-------------------|------------------------|------------------------|
| dune (et al)        | 3.12.1                   | 3.15.0                   |
| ocaml               | 4.14.0                   | 4.14.2                   |
| ocamlformat (et al) | 0.25.1                   | 0.26.1                   |
| odoc                | 2.2.0                    | 2.4.1                    |
| odoc-parser         | 2.0.0                    | 2.4.1                    |
| lsp (et al)         | 1.16.2                   | 1.17.0                   |
| mdx                 | 2.3.0                    | 2.4.1                    |
| ctypes (et al)      | 0.19.2-windowssupport-r7 | 0.19.2-windowssupport-r8 |
| tiny_httpd          |                          | 0.16                     |

Thanks to OCaml Software Foundation for sponsoring DkML!
      



* A May update on wasm_of_ocaml
:PROPERTIES:
:CUSTOM_ID: 6
:END:
Archive: https://discuss.ocaml.org/t/a-may-update-on-wasm-of-ocaml/14635/1

** Jan Midtgaard announced


Spring is over us and several months have passed since we last shared [[https://discuss.ocaml.org/t/a-december-update-from-the-ocaml-wasm-organisation/13565][an update on WebAssembly compilation]].

*** Introduction

[[https://github.com/ocaml-wasm/wasm_of_ocaml][~wasm_of_ocaml~]] is a compiler from OCaml bytecode to [[https://webassembly.org/][WebAssembly]], similar to [[https://github.com/ocsigen/js_of_ocaml][~js_of_ocaml~]] from which it was forked. ~wasm_of_ocaml~ offers a functional, almost drop-in replacement for ~js_of_ocaml~ - with better performance.

For now, the compiler targets a JavaScript-hosted WebAssembly engine. The produced code furthermore requires the following [[https://webassembly.org/roadmap/][Wasm extensions]] to run:
- [[https://github.com/WebAssembly/gc][the GC extension]], including functional references and 31-bit integers
- [[https://github.com/WebAssembly/tail-call/blob/main/proposals/tail-call/Overview.md][the tail-call extension]]
- [[https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/Exceptions.md][the exception handling extension]]

*** Platform support

- [[https://nodejs.org/en/blog/announcements/v22-release-announce][Node 22 now supports the WasmGC extension]], meaning that it can run ~wasm_of_ocaml~ output out of the box!
- CloudFlare uses [[https://developers.cloudflare.com/workers/platform/changelog/#2023-12-04][V8 12.0 since Dec 4, 2023]]. [[https://v8.dev/docs/version-numbers][This corresponds to Chrome 120]], and thus includes the WasmGC extension, effectively enabling OCaml development on CloudFlare! For more details see the [[https://developers.cloudflare.com/workers/runtime-apis/webassembly/][WebAssembly CloudFlare docs]]
- [[https://github.com/WasmEdge/WasmEdge/releases/tag/0.14.0-rc.4][The upcoming 0.14.0 release]] of [[https://github.com/WasmEdge/WasmEdge][the WasmEdge WebAssembly engine]] adds WasmGC support too. Along with the [[https://github.com/WasmEdge/WasmEdge/pull/3306][just merged exception support]], this paves the way for running ~wasm_of_ocaml~ output...

*** ~wasm_of_ocaml~ news

Since the last update in December
- Jérôme gave a talk about ~wasm_of_ocaml~ at the INRIA Cambium seminar - [[https://cambium.inria.fr/seminaires/transparents/20231213.Jerome.Vouillon.pdf][slides available here]]
- Olivier Nicole joined the ~wasm_of_ocaml~ effort
- Jérôme and Olivier visited Jane Street to help them adopt ~wasm_of_ocaml~

Notable features
- Sourcemap support was added [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/27][ocaml-wasm/wasm_of_ocaml#27]]
  - This required adding sourcemap support to the ~wasm-metadce~ and ~wasm-merge~ binaryen tools [[https://github.com/WebAssembly/binaryen/pull/6372][WebAssembly/binaryen#6372]]
- A first implementation of separate compilation was completed [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/36][ocaml-wasm/wasm_of_ocaml#36]]
  - One can compile cmo and cma files, producing intermediate archive files
  - Then the files can be linked together: relevant Wasm modules are put in a directory, and JavaScript code is generated to load them and link them together
- Store long-lived toplevel values into globals [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/30][ocaml-wasm/wasm_of_ocaml#30]]
  - The initialization code produced by ~wasm_of_ocaml~ can be large and contain a large number of variables. This is challenging to both binaryen tools and the Wasm engines. The problem can be alleviated by storing long-lived toplevel values into global variables. As an side benefit, many closures can be statically allocated (since their free variables are now stored in globals), which again can provide performance improvements in the remaining parts of the code.
- Tuple syntax changes [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/31][ocaml-wasm/wasm_of_ocaml#31]]
  - Prepared the switch to the new version of binaryen, which has small syntax changes
- Use the JS String Builtins proposal for string conversions when available [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/33][ocaml-wasm/wasm_of_ocaml#33]]
- Improve the WAT (Wasm text format) output to be more readable [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/34][ocaml-wasm/wasm_of_ocaml#34]]
  - Name local variables (they were just numbered) and use shorter names (the names used to be systematically suffixed to ensure they were unique).

Other features and fixes
- Fixed file descriptor management so that it works with large file descriptors [[https://github.com/ocaml-wasm/wasm_of_ocaml/issues/18][ocaml-wasm/wasm_of_ocaml#18]]
- PR: Update Firefox version information in README (no longer beta) [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/19][ocaml-wasm/wasm_of_ocaml#19]]
- PR: Fix pin branch in installation instructions [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/20][ocaml-wasm/wasm_of_ocaml#20]]
- PR: Add ~Stdlib.String.fold_{left,right}~ to build on OCaml < 4.13 [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/21][ocaml-wasm/wasm_of_ocaml#21]]
- PR translating stubs of ~integers_js_stubs~ to Wasm [[https://github.com/o1-labs/integers_stubs_js/pull/10][o1-labs/integers_stubs_js#10]]
  - Tracked a bug in a test on the repo [[https://github.com/o1-labs/integers_stubs_js/issues/9][o1-labs/integers_stubs_js#9]]
- PR: Generate valid Wasm code [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/22][ocaml-wasm/wasm_of_ocaml#22]]
- PR: Avoid using ~eval~ for statically known strings [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/24][ocaml-wasm/wasm_of_ocaml#24]]
- PR: Have physical equality inspect Javascript objects [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/25][ocaml-wasm/wasm_of_ocaml#25]]
- PR: Tune optimization profiles [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/26][ocaml-wasm/wasm_of_ocaml#26]]
- PR: Correction and precision about Binaryen version [[https://github.com/ocaml-wasm/wasm_of_ocaml/pull/29][ocaml-wasm/wasm_of_ocaml#29]]

Binaryen fixes
- PR: wasm-merge: check that the types of imports and exports match. [[https://github.com/WebAssembly/binaryen/pull/6437][WebAssembly/binaryen#6437]]
  - Improved binaryen's linker to check that the types of imports and exports match. Found a type mismatch in the wasm_of_ocaml runtime this way.
- PR: Fixes regarding explicit names [[https://github.com/WebAssembly/binaryen/pull/6466][WebAssembly/binaryen#6466]]
  - The name of some module components were lost during module linking
- PR: Fix writing of data segment names in name section [[https://github.com/WebAssembly/binaryen/pull/6462][WebAssembly/binaryen#6462]]
  - Binaryen could actually generate a malformed name section
      



* OCaml 5.2.0 released
:PROPERTIES:
:CUSTOM_ID: 7
:END:
Archive: https://discuss.ocaml.org/t/ocaml-5-2-0-released/14638/1

** octachron announced


The OCaml team has the pleasure of celebrating the birthday of Inge Lehmann by announcing the
release of OCaml version 5.2.0.

Some of the highlights in OCaml 5.2.0 are:
- Re-introduced GC compaction \\
  GC compaction can now be manually triggered by calling ~Gc.compact ()~ manually.
  This is expected to be particularly useful for programs that wish to release memory
  to the operating system after a temporary memory-intensive phase.
  
- Restored native backend for POWER 64 bits \\
  With this restored backend, all 64 bits architecture supported in OCaml 4 are
  supported bin OCaml 5
  
- Thread sanitizer support \\
  Thread sanitizer is a dynamic data race detector which instrument memory
  accesses to detect and explain data races at execution time. Since the
  instrumentation is costly (with a 2x to 7x slowdown), it must be enabled with
  the ~ocaml-option-tsan~ configuration flag. (The reference manual contains
  more information on how to use TSAN.)
  
- New Dynarray module \\
  This new standard library module provides a standard implementation for resizeable array,
  which is guaranteed to be memory safe even in presence of data races.
  
- New -H flag for hidden include directories \\
  This new flag makes it possible for build tools to split cleanly dependencies
  between direct (the dependencies explicitly added by the project) and indirect
  dependencies (the dependencies introduced by the direct dependencies) without
  the quirks of previous implementations.
  
- Project-wide occurence metadata support for developer tools \\
  When compiling a module with the ~-bin-annot~ and ~-bin-annot-occurrences~
  flags, the compiler stores in the ~.cmt~ file an index of all occurences of
  values, types, modules, ...
  
- Raw identifiers \\
  To improve OCaml upward-compatibility, there is a new syntax for lowercase
  identifiers, ~let \#if = 0~, which works even if the identifier is a keyword
  in some OCaml versions. This change has been adopted in OCaml 5.2 in
  preparation of the introduction of the ~effect~ keyword in OCaml 5.3
  
- Local open in type expressions \\
  Local open are now allowed in type expression: ~val (+): Int64.(t -> t -> t)~.

And a lot of incremental changes:

- Around 20 new functions in the standard library besides the new Dynarray module
  (in the ~Array~, ~Float~, ~Format~, ~Fun~, ~In_channel~, ~Out_channel~, and ~Random~ modules )
- Many fixes and improvements in the runtime
- Many bug fixes

OCaml 5.2.0 is still a somewhat experimental release compared to the OCaml
4.14 branch. In particular

- The Windows MSVC port is still unavailable.
- Ephemeron performances need to be investigated.
- ~statmemprof~ is being tested in the developer branch of OCaml.
- There are a number of known runtime concurrency or GC performance bugs
  (that trigger under rare circumstances).

Since the Windows MSVC port and statmemprof are still missing, the maintenance
support for OCaml 4.14 will be extended until at least the end of the year.

Please report any unexpected behaviours on the [[https://github.com/ocaml/ocaml/issues][OCaml issue tracker]] and post any questions or comments you might have here on discuss.

The full list of changes can be found in the changelog below.

*** Installation Instructions

The base compiler can be installed as an opam switch with the following commands:

#+begin_example
    opam update
    opam switch create 5.2.0
#+end_example

The source code for the release candidate is also directly available on:

- [[https://github.com/ocaml/ocaml/archive/5.2.0.tar.gz][GitHub]]
- [[https://caml.inria.fr/pub/distrib/ocaml-5.2/ocaml-5.2.0.tar.gz][OCaml archives at Inria]]

*** Fine-Tuned Compiler Configuration

If you want to tweak the configuration of the compiler, you can switch to the option variant with:

#+begin_example
    opam update
    opam switch create <switch_name> ocaml-variants.5.1.0+options <option_list>
#+end_example


where ~<option_list>~ is a space separated list of ~ocaml-option-*~ packages. For instance, for a ~flambda~ and ~no-flat-float-array~ switch:

#+begin_example
    opam switch create 5.2.0+flambda+nffa ocaml-variants.5.2.0+options ocaml-option-flambda ocaml-option-no-flat-float-array
#+end_example

*** OCaml 5.2.0 Changelog (13 May 2024)

(Changes that can break existing programs are marked with a "*")

**** Restored backends:

- [[https://github.com/ocaml/ocaml/issues/12276][#12276]], [[https://github.com/ocaml/ocaml/issues/12601][#12601]]: native-code compilation for POWER (64 bits, little-endian)
  (Xavier Leroy, review by KC Sivaramakrishnan, Anil Madhavapeddy,
   and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/12667][#12667]]: extend the latter to POWER 64 bits, big-endian, ELFv2 ABI
  (A. Wilcox, review by Xavier Leroy)

**** Runtime system:

- [[https://github.com/ocaml/ocaml/issues/12193][#12193]]: Re-introduce GC compaction for shared pools
  Adds a parallel compactor for the shared pools (which contain major heap
  blocks sized less than 128 words). Explicit only for now, on calls to
  ~Gc.compact~.
  (Sadiq Jaffer, Nick Barnes, review by Anil Madhavapeddy, Damien Doligez,
   David Allsopp, Miod Vallat, Artem Pianykh, Stephen Dolan, Mark Shinwell
   and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12114][#12114]]: Add ThreadSanitizer support
  (Fabrice Buoro and Olivier Nicole, based on an initial work by Anmol Sahoo,
   review by Damien Doligez, Sébastien Hinderer, Jacques-Henri Jourdan, Luc
   Maranget, Guillaume Munch-Maccagnoni, Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12850][#12850]]: Update Gc.quick_stat data at the end of major cycles and compaction
  This PR adds an additional caml_collect_gc_stats_sample_stw to the major heap
  cycling stw. This means that Gc.quick_stat now actually reflects the state of
  the heap after a major cycle or compaction.
  (Sadiq Jaffer, review by Miod Vallat and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12859][#12859]]: Ensure Gc.compact does a full major before the compactor runs
  (Sadiq Jaffer, review by Leo White, Mark Shinwell, Gabriel Scherer,
   Josh Berdine, David Allsopp and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/10111][#10111]]: Increase the detail of location information for debugging events to
  allow the end line number and character offset to be reported.
  (David Allsopp, review by Nick Barnes, Enguerrand Decorne and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/10403][#10403]], [[https://github.com/ocaml/ocaml/issues/12202][#12202]]: introduce ~caml_ext_table_add_noexc~ that does not
  raise ~Out_of_memory~ exceptions and use it inside the blocking sections
  of ~caml_read_directory~.  Also, check for overflows in ext table sizes.
  (Xavier Leroy, report by Arseniy Alekseyev, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/11332][#11332]], [[https://github.com/ocaml/ocaml/issues/12702][#12702]]: make sure ~Bool_val(v)~ has type ~bool~ in C++
  (Xavier Leroy, report by ygrek, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12772][#12772]], [[https://github.com/ocaml/ocaml/issues/12787][#12787]]: Avoid using _Bool in public headers for the sake of C++
  compatibility
  (Guillaume Munch-Maccagnoni, report by KC Sivaramakrishnan, review
  by Xavier Leroy and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12223][#12223]]: Constify constructors and flags tables in C code. Now these
  tables will go in the readonly segment, where they belong.
  (Antonin Décimo, review by Gabriel Scherer and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12234][#12234]]: make instrumented time calculation more thread-safe on macOS.
  (Anil Madhavapeddy, review by Daniel Bünzli and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12235][#12235]], [[https://github.com/ocaml/ocaml/issues/12468][#12468]]: introduce and use the ~CAMLnoret~ macro as
  a lighter alternative to ~CAMLnoreturn_start~ / ~CAMLnoreturn_end~.
  Implement it so as to conform with C11, C23, C++11, C++17.
  (Xavier Leroy and Dhruv Maroo, with help from Antonin Décimo, review by
   Gabriel Scherer and David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12275][#12275]]: caml/stack.h: more abstract macros to describe OCaml stacks and
  how to traverse them, supporting more stack layouts.
  (Xavier Leroy, review by KC Sivaramakrishnan and Fabrice Buoro)

- [[https://github.com/ocaml/ocaml/issues/12268][#12268]]: deliver ~Out_of_memory~ exception if domain creation fails
  due to memory resource exhaustion.  It was previous always a ~Failure~.
  (Anil Madhavapeddy, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12300][#12300]], [[https://github.com/ocaml/ocaml/issues/12314][#12314]]: Discard out_channel buffered data on permanent I/O error
  (Xavier Leroy, report by Török Edwin, review by Anil Madhavapeddy
  and Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/11386][#11386]]: Simplifications and fixes to multicore systhreads implementation.
  (Guillaume Munch-Maccagnoni, review by Anil Madhavapeddy and KC
   Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12875][#12875]], [[https://github.com/ocaml/ocaml/issues/12879][#12879]], [[https://github.com/ocaml/ocaml/issues/12882][#12882]]: Execute preemptive systhread switching as a
  delayed pending action. This ensures that one can reason within the
  FFI that no mutation happens on the same domain when allocating on
  the OCaml heap from C, consistently with OCaml 4. This also fixes
  further bugs with the multicore systhreads implementation.
  (Guillaume Munch-Maccagnoni, bug reports and suggestion by Mark
   Shinwell, review by Nick Barnes and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/12408][#12408]]: ~Domain.spawn~ no longer leaks its functional argument for
  the whole duration of the children domain lifetime.
  (Guillaume Munch-Maccagnoni, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12409][#12409]]: Fix unsafety and deadlocks should an asynchronous exception
  arise at specific locations during domain creation and shutdown.
  (Guillaume Munch-Maccagnoni, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/11911][#11911]], [[https://github.com/ocaml/ocaml/issues/12381][#12381]]: Restore statmemprof functionality in part, with
  some API changes in Gc.Memprof.
  (Nick Barnes, review by Jacques-Henri Jourdan
   and Guillaume Munch-Maccagnoni).

- [[https://github.com/ocaml/ocaml/issues/12430][#12430]]: Simplify dynamic bytecode loading in Meta.reify_bytecode
  (Stephen Dolan, review by Sébastien Hinderer, Vincent Laviron and Xavier
   Leroy)

- [[https://github.com/ocaml/ocaml/issues/12489][#12489]]: Fix an error-handling bug in caml_alloc_sprintf
  (Stephen Dolan, report by Chris Casinghino, review by Jeremy Yallop
   and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/11307][#11307]]: Finish adapting the implementation of asynchronous actions for
  multicore: soundness, liveness, and performance issues.
  Do not crash if a signal handler is called from an unregistered C
  thread, and other possible soundness issues. Prevent issues where join
  on other domains could make the toplevel unresponsible to Ctrl-C. Avoid
  needless repeated polling in C code when callbacks cannot run
  immediately.
  (Guillaume Munch-Maccagnoni, review by Enguerrand Decorne, Xavier
  Leroy, and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12634][#12634]]: Simplify TSan backtrace bookkeeping upon raise
  (Olivier Nicole and Fabrice Buoro, review by Gabriel Scherer)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12686][#12686]]: Some primitives had the wrong types to be callable from the bytecode
  interpreter.  Either fix their types, mark them as ~CAMLexport~ instead of
  ~CAMLprim~, or remove them entirely if no longer used.
  (Xavier Leroy, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12700][#12700]], continuing [[https://github.com/ocaml/ocaml/issues/11763][#11763]] and trying to address [[https://github.com/ocaml/ocaml/issues/12660][#12660]]:
  Use the correct types for primitives when generating the table of primitives
  used by ocamlrun.
  (Xavier Leroy, motivation, review and improvements by Antonin Décimo)

- [[https://github.com/ocaml/ocaml/issues/12345][#12345]], [[https://github.com/ocaml/ocaml/issues/12710][#12710]]: Fix issues with finaliser orphaning at domain termination
  (KC Sivaramakrishnan, report by Gabriel Scherer, review by Gabriel Scherer,
  Sadiq Jaffer and Fabrice Buoro)

- [[https://github.com/ocaml/ocaml/issues/12599][#12599]]: Refactor Dynlink startup to avoid parsing bytecode sections twice
  (Stephen Dolan, review by David Allsopp, Hugo Heuzard, Damien Doligez and
   Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12678][#12678]], [[https://github.com/ocaml/ocaml/issues/12898][#12898]]: free channel buffers on close rather than on finalization
  (Damien Doligez, review by Jan Midtgaard and Gabriel Scherer, report
   by Jan Midtgaard)

- [[https://github.com/ocaml/ocaml/issues/12681][#12681]]: Fix TSan false positives due to volatile write handling
  (Olivier Nicole, Fabrice Buoro and Anmol Sahoo, review by Luc Maranget,
   Gabriel Scherer, Hernan Ponce de Leon and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12743][#12743]]: Use pthread_sigmask instead of sigprocmask
  Updates usage of sigprocmask to pthread_sigmask in otherlibs/unix.
  (Max Slater, review by Miod Vallat and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12769][#12769]]: Unify MSVC and MinGW-w64 code paths, by always using WinAPI
  directly.
  (David Allsopp, Antonin Décimo, and Samuel Hym, review by Nicolas
   Ojeda Bar)

- [[https://github.com/ocaml/ocaml/issues/11911][#11911]], [[https://github.com/ocaml/ocaml/issues/12382][#12382]], [[https://github.com/ocaml/ocaml/issues/12383][#12383]]: Restore statmemprof functionality in part
  (backtrace buffers, per-thread and per-domain data structures,
  GC/allocation interface). (Nick Barnes, review by Gabriel Scherer,
  Fabrice Buoro, Sadiq Jaffer, Guillaume Munch-Maccagnoni, and
  Jacques-Henri Jourdan).

- [[https://github.com/ocaml/ocaml/issues/12735][#12735]]: Store both ends of the stack chain in continuations
  (Leo White, review by Miod Vallat and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12746][#12746]]: Simplify and clean up TSan annotations
  (Olivier Nicole, review by Miod Vallat and Fabrice Buoro)

- [[https://github.com/ocaml/ocaml/issues/12809][#12809]]: Add ThreadSanitizer support to FreeBSD/amd64
  (Miod Vallat, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12810][#12810]]: Port ThreadSanitizer support to Linux and macOS on arm64
  (Miod Vallat, review by Tim McGilchrist)

- [[https://github.com/ocaml/ocaml/issues/12811][#12811]]: Define and use the CAMLthread_local macro for TLS variables.
  (Antonin Décimo and Samuel Hym, review by Miod Vallat and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12814][#12814]]: More detailed failure messages from ~input_value~ and ~Marshal.from_*~
  (Xavier Leroy, review by Stephen Dolan and Anil Madhavapeddy)

- [[https://github.com/ocaml/ocaml/issues/12815][#12815]]: Correctly format multi-line locations in exception backtraces, in the
  style that the compiler driver uses.
  (David Allsopp, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12773][#12773]], [[https://github.com/ocaml/ocaml/issues/12830][#12830]], [[https://github.com/ocaml/ocaml/issues/12834][#12834]]: Rewrite ~caml_c_thread_(un)register~ to fix
  various bugs.
  (Guillaume Munch-Maccagnoni, reported by Miod Vallat, suggested by
   Hari Hara Naveen S, reviewed by Fabrice Buoro, Gabriel Scherer and
   Miod Vallat)

- [[https://github.com/ocaml/ocaml/issues/12876][#12876]]: Port ThreadSanitizer support to Linux on POWER
  (Miod Vallat, review by Tim McGilchrist)

- [[https://github.com/ocaml/ocaml/issues/12886][#12886]]: Reinitialize IO mutexes after fork
  (Max Slater, review by Guillaume Munch-Maccagnoni and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12907][#12907]]: Port ThreadSanitizer support to Linux on RiscV
  (Miod Vallat, review by Nicolás Ojeda Bär and Fabrice Buoro)

- [[https://github.com/ocaml/ocaml/issues/12915][#12915]]: Port ThreadSanitizer support to Linux on s390x
  (Miod Vallat, review by Tim McGilchrist)

- [[https://github.com/ocaml/ocaml/issues/12934][#12934]]: Fix data races between marking and sweeping functions
  (Olivier Nicole, suggested by Stephen Dolan, review by Gabriel Scherer,
   Miod Vallat and Damien Doligez)

**** Language features:

- [[https://github.com/ocaml/ocaml/issues/12295][#12295]], [[https://github.com/ocaml/ocaml/issues/12568][#12568]]: Give ~while true' a polymorphic type, similarly to
  ~assert false'
  (Jeremy Yallop, review by Nicolás Ojeda Bär and Gabriel Scherer,
  suggestion by Rodolphe Lepigre and John Whitington)

- [[https://github.com/ocaml/ocaml/issues/12044][#12044]]: Add local module open syntax for types.
  #+begin_src ocaml
    module A = struct
      type t = int
      type r = unit
      type s = string
    end

    type example = A.(t * r * s)
  #+end_src
  (Alistair O'Brien, review by Gabriel Scherer, Nicolás Ojeda Bär
   and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/11252][#11252]], RFC 27: Support raw identifier syntax \#foo
  (Stephen Dolan, review by David Allsopp, Gabriel Scherer and Olivier Nicole)

- [[https://github.com/ocaml/ocaml/issues/12315][#12315]]: Use type annotations from arguments in let rec
  (Stephen Dolan, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12375][#12375]]: allow use of [@untagged] for all immediate types like char, bool,
  and variant with only constant constructors.
  (Christophe Raffalli, review by Gabriel Scherer)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12502][#12502]]: the compiler now normalizes the newline sequence \r\n to
  a single \n character during lexing, to guarantee that the semantics
  of newlines in string literals is not modified by Windows tools
  transforming \n into \r\n in source files.
  Warning 29 [eol-in-string] is not emitted anymore, as the normalization
  gives a more robust semantics to newlines in string literals.
  (Gabriel Scherer and Damien Doligez, review by Daniel Bünzli, David
   Allsopp, Andreas Rossberg, Xavier Leroy, report by Andreas Rossberg)

**** Standard library:

- [[https://github.com/ocaml/ocaml/issues/11563][#11563]]: Add the Dynarray module to the stdlib. Dynamic arrays are
  arrays whose length can be changed by adding or removing elements at
  the end, similar to 'vectors' in C++ or Rust.
  (Gabriel Scherer, Simon Cruanes and Florian Angeletti, review by
   Daniel Bünzli, Guillaume Munch-Maccagnoni, Clément Allain,
   Damien Doligez, Wiktor Kuchta and Pieter Goetschalckx)


- [[https://github.com/ocaml/ocaml/issues/12716][#12716]]: Add ~Format.pp_print_nothing~ function.
  (Léo Andrès, review by Gabriel Scherer and Nicolás Ojeda Bär)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/6732][#6732]], [[https://github.com/ocaml/ocaml/issues/12423][#12423]]: Make Buffer.add_substitute surjective and fix its
  documentation.
  (Damien Doligez, review by Antonin Décimo)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/10775][#10775]], [[https://github.com/ocaml/ocaml/issues/12499][#12499]]: Half-precision floating-point elements in Bigarray.
  (Anton Yabchinskiy, review by Xavier Leroy and Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/11517][#11517]], [[https://github.com/ocaml/ocaml/issues/12477][#12477]]: Expose pp_infinity in interface of the format module, and
  check that margin is less than pp_infinity when setting or checking geometry.
  (Janith Petangoda, reported by Simmo Saan, reviewed by Florian Angeletti,
  Simmo Saan, Josh Berdine and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12217][#12217]]: Add ~Array.shuffle~.
  (Daniel Bünzli, review by Nicolás Ojeda Bär, David Allsopp and Alain Frisch)

- [[https://github.com/ocaml/ocaml/issues/12212][#12212]]: Add cache-aligned constructor for atomics. The patch ensures that
  all allocations (of the right size) in the shared heap are aligned.
  (Bartosz Modelski with Gabriel Scherer, Guillaume Munch-Maccagnoni,
   Xavier Leroy, review by Alain Frisch, Anil Madhavapeddy, Gabriel Scherer,
   Guillaume Munch-Maccagnoni, KC Sivaramakrishnan, Stefan Muenzel,
   Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12307][#12307]]: Add BLAKE2b hashing and an MD5 submodule to the Digest module.
  (Xavier Leroy, review by Olivier Nicole, Gabriel Scherer, Wiktor Kuchta,
   Daniel Bünzli, David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12365][#12365]]: Add In_channel.input_bigarray, In_channel.really_input_bigarray,
  Out_channel.output_bigarray, Unix.read_bigarray, Unix.write_bigarray,
  Unix.single_write_bigarray.
  (Nicolás Ojeda Bär, review by Jeremy Yallop, Xavier Leroy, Gabriel Scherer,
   David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12455][#12455]]: Add ~Array.init_matrix~, ~Float.Array.make_matrix~,
  ~Float.Array.init_matrix~.
  (Glen Mével, review by Xavier Leroy, Gabriel Scherer, Jeremy Yallop,
  Nicolas Ojeda Bar)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12455][#12455]]: ~Array.make_matrix dimx dimy f~ now raises ~Invalid_argument~
  when ~dimx = 0 && dimy < 0~ This was already specified but not enforced.
  (Glen Mével, report by Jeremy Yallop, review by Nicolas Ojeda Bar)

- [[https://github.com/ocaml/ocaml/issues/12459][#12459]]: Add ~Random.int_in_range~, ~Random.int32_in_range~,
  ~Random.int64_in_range~, ~Random.nativeint_in_range~,
  and their counterpart in ~Random.State~.
  (Glen Mével and Xavier Leroy, review by Gabriel Scherer, Xavier Leroy,
   Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12459][#12459]]: ~Random~: restore compatibility between 32-bit integers (JavaScript)
  and 63-bit integers (64-bit OCaml).
  For ~Random.full_int~ this was guaranteed in 4.14 but wrongly removed in 5.0.
  (Xavier Leroy, review by Glen Mével)

- [[https://github.com/ocaml/ocaml/issues/12511][#12511]]: Minor performance improvements and cleanups in the implementation
  of modules Int32, Int64, and Nativeint
  (Xavier Leroy, review by Gabriel Scherer and Daniel Bünzli)

- [[https://github.com/ocaml/ocaml/issues/12558][#12558]]: Adapt GC alarms for multicore and fix their documentation.
  (Guillaume Munch-Maccagnoni, review by KC Sivaramakrishnan
   and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12625][#12625]]: Remove the Closure module from Obj
  (Vincent Laviron, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12758][#12758]], [[https://github.com/ocaml/ocaml/issues/12998][#12998]]: Remove the ~Marshal.Compression~ flag to the
  ~Marshal.to_*~ functions.  The compilers are still able to use
  ZSTD compression for compilation artefacts.
  This is a forward port and clean-up of the emergency fix that was introduced
  in OCaml 5.1.1 by [[https://github.com/ocaml/ocaml/issues/12734][#12734]].
  (Xavier Leroy, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/12784][#12784]]: Fix computation of minor-heap allocation in Gc.counters()
  and Gc.allocated_bytes(). (Nick Barnes, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12770][#12770]]: Add ~Fun.compose~.
  (Justin Frank, review by Nicolás Ojeda Bär, Daniel Bünzli and Jeremy Yallop)

- [[https://github.com/ocaml/ocaml/issues/12845][#12845]]: Add ~{In,Out}_channel.is_binary_mode~ as the dual of
  ~set_binary_mode~. This function was previously only available in the internal
  C API.
  (David Allsopp, review by Nicolás Ojeda Bär and Xavier Leroy)

**** Type system:

- [[https://github.com/ocaml/ocaml/issues/12313][#12313]], [[https://github.com/ocaml/ocaml/issues/11799][#11799]]: Do not re-build as-pattern type when a ground type annotation
  is given. This allows to work around problems with GADTs in as-patterns.
  (Jacques Garrigue, report by Leo White, review by Gabriel Scherer)

**** Code generation and optimizations:

- [[https://github.com/ocaml/ocaml/issues/11239][#11239]]: on x86-64 and RISC-V, reduce alignment of OCaml stacks from 16 to 8.
  This reduces stack usage.  It's only C stacks that require 16-alignment.
  (Xavier Leroy, review by Gabriel Scherer and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/12311][#12311]]: on POWER, 32-bit FP numbers stored in memory (e.g. in bigarrays)
  were not correctly rounded sometimes.
  (Xavier Leroy, review by Anil Madhavapeddy and Tim McGilchrist)

- [[https://github.com/ocaml/ocaml/issues/12551][#12551]], [[https://github.com/ocaml/ocaml/issues/12608][#12608]], [[https://github.com/ocaml/ocaml/issues/12782][#12782]], [[https://github.com/ocaml/ocaml/issues/12596][#12596]]: Overhaul of recursive value compilation.
  Non-function recursive bindings are now forbidden from Lambda onwards,
  and compiled using a new Value_rec_compiler module.
  (Vincent Laviron and Lunia Ayanides, review by Gabriel Scherer,
   Stefan Muenzel and Nathanaëlle Courant)

- [[https://github.com/ocaml/ocaml/issues/1809][#1809]], [[https://github.com/ocaml/ocaml/issues/12181][#12181]]: rewrite ~compare x y op 0~ to ~x op y~ when values are integers
  (Xavier Clerc, Stefan Muenzel, review by Gabriel Scherer and Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/12825][#12825]]: disable common subexpression elimination for atomic loads... again.
  (Gabriel Scherer, review by KC Sivaramakrishnan, Xavier Leroy
   and Vincent Laviron, report by Vesa Karvonen)

**** Other libraries:

- [[https://github.com/ocaml/ocaml/issues/12213][#12213]]: Dynlink library, improve legibility of error messages
  (Samuel Hym, review by Gabriel Scherer and Nicolás Ojeda Bär)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12686][#12686]]: Runtime_events library, C API: define
  ~caml_runtime_events_{start,pause,resume}~ as returning ~void~
  instead of ~value~.
  (Xavier Leroy, review by David Allsopp)

**** Compiler user-interface and warnings:

- [[https://github.com/ocaml/ocaml/issues/11989][#11989]], [[https://github.com/ocaml/ocaml/issues/12246][#12246]], RFC 31: New flag, -H, to allow for transitive dependencies
  without including them in the initial environment.
  (Chris Casinghino, François Bobot, and Gabriel Scherer, review by Leo White
   and Stefan Muenzel, RFC by François Bobot)


- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/10613][#10613]], [[https://github.com/ocaml/ocaml/issues/12405][#12405]]: Simplify the values used for the system variable (~system:~ in
  ~ocamlopt -config~ or the ~Config.system~ constant). In particular, s390x and
  ppc64 now report "linux" instead of "elf"; all variants of 32-bit ARM on Linux
  now report "linux"; OpenBSD now reports "openbsd" instead of "bsd" for 32-bit
  ARM; FreeBSD, NetBSD and OpenBSD now report the same value for both x86_64 and
  x86_32; x86_32 systems matching *bsd but not freebsd*, netbsd* or openbsd*
  are no longer identified (as on x86_64); x86_32 Linux now reports "linux"
  instead of "linux_elf".
  (David Allsopp, request by Kate Deplaix, review by Sébastien Hinderer and
  Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12247][#12247]]: configure: --disable-ocamldebug can now be used instead
  of --disable-debugger (which remains available for compatibility)
  (Gabriel Scherer, review by Damien Doligez and Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/12199][#12199]]: improve the error message for non-overriding ~inherit!~
  (Florian Angeletti, review by Jules Aguillon)

- [[https://github.com/ocaml/ocaml/issues/12210][#12210]]: uniform style for inline code in compiler messages
  (Florian Angeletti, review by Gabriel Scherer)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12278][#12278]], #:12325: Remove the OCAML_FLEXLINK environment variable from the
  compiler drivers. This environment variable was previously used as part of the
  FlexDLL bootstrap procedure and existed solely for that purpose. Its removal
  greatly simplifies both the build system and testsuite machinery.
  (David Allsopp, review by Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/12347][#12347]]: error messages: always report missing polyvariant tags
  (Florian Angeletti, report by Tianbo Hao, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12224][#12224]], specialized error message when trying to apply non-functor
  module (e.g ~module M = Int(Int)~)
  (Florian Angeletti, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12451][#12451]]: Warning 53 (misplaced attributes) now works for all attributes.
  (Chris Casinghino, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12622][#12622]]: Give hints about existential types appearing in error messages
  (Leo White, review by Gabriel Scherer and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12671][#12671]]: When a class type parameter or class parameter does not match,
  identify which parameter in the error message, instead of saying
  "A type parameter" or "A parameter".
  (Stefan Muenzel, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12679][#12679]]: Add more detail to the error message and manual in case of
  invalid module type substitutions.
  (Stefan Muenzel, review by Gabriel Scherer and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12750][#12750]]: Display the command executed to extract primitives in
  ~ocamlc -verbose~.
  (David Allsopp, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/12777][#12777]]: Add details about the actual and expected method types to the method
  mismatch error messages.
  (Javier Chávarri, review by Gabriel Scherer and Florian Angeletti)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12942][#12942]]: Fix an line ordering in some module inclusion error messages
  (Nick Roberts, review by Florian Angeletti, report by Carl Eastlund)

**** Manual and documentation:

- [[https://github.com/ocaml/ocaml/issues/12338][#12338]]: clarification of the documentation of process related function in
  the unix module regarding the first element of args and shell's pid.
  (Christophe Raffalli, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12473][#12473]]: Document in runtime/memory.c our current understanding of
  accesses to the OCaml heap from the C runtime code -- the problem
  of hybrid programs mixing two memory models.
  (Gabriel Scherer and Guillaume Munch-Maccagnoni, review by Olivier
   Nicole and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12456][#12456]]: Document the incompatibility between effects on the one
  hand, and ~caml_callback~ and asynchronous callbacks (signal
  handlers, finalisers, memprof callbacks...) on the other hand.
  (Guillaume Munch-Maccagnoni, review by KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12694][#12694]]: Document in runtime/tsan.c the TSan instrumentation choices and the
  consequences with regard to the memory model.
  (Olivier Nicole, review by Miod Vallat, Gabriel Scherer, Guillaume
   Munch-Maccagnoni and Fabrice Buoro)

- [[https://github.com/ocaml/ocaml/issues/12802][#12802]]: Add manual chapter about ThreadSanitizer support
  (Olivier Nicole, review by Miod Vallat, Sebastien Hinderer, Fabrice Buoro,
   Gabriel Scherer and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12819][#12819]]: Clarify which runtime interactions are allowed in custom ops
  (Basile Clément, review by Guillaume Munch-Maccagnoni and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12840][#12840]]: manual: update runtime tracing chapter for custom events (ex [[https://github.com/ocaml/ocaml/issues/12335][#12335]])
  (Lucas Pluvinage, Sadiq Jaffer and Olivier Nicole, review by Gabriel Scherer,
   David Allsopp, Tim McGilchrist and Thomas Leonard)

- [[https://github.com/ocaml/ocaml/issues/13066][#13066]], update OCAMLRUNPARAM documentation for the stack size parameter l
  (Florian Angeletti, review by Nicolás Ojeda Bär, Tim McGilchrist, and
   Miod Vallat)

- [[https://github.com/ocaml/ocaml/issues/13078][#13078]]: update Format tutorial on structural boxes to mention alignment
  questions.
  (Edwin Török, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/13092][#13092]]: document the existence of the ~[@@poll error]~ built-in attribute
  (Florian Angeletti, review by Gabriel Scherer)

**** Tools:

- [[https://github.com/ocaml/ocaml/issues/12340][#12340]]: testsuite: collect known issues with current -short-paths
  implementation for existential types
  (Florian Angeletti, Samuel Hym, review by Florian Angeletti and Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/12147][#12147]]: ocamllex: Allow carriage returns at the end of line directives.
  (SeungCheol Jung, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/12260][#12260]]: Fix invalid_argument on some external or module aliases in ocamlnat
  (Fabian Hemmer, review by Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/12185][#12185]]: New script language for ocamltest.
  (Damien Doligez with Florian Angeletti, Sébastien Hinderer, Gabriel Scherer,
   review by Sébastien Hinderer and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12371][#12371]]: ocamltest: fix recursive expansion of variables.
  (Antonin Décimo, Damien Doligez, review by Sébastien Hinderer,
   Damien Doligez, Gabriel Scherer, and Xavier Leroy)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12497][#12497]], [[https://github.com/ocaml/ocaml/issues/12613][#12613]]: Make ocamlc/ocamlopt fail with an error when no
  input files are specified to build an executable.
  (Antonin Décimo, review by Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/12576][#12576]]: ocamldep: various refactors.
  (Antonin Décimo, review by Florian Angeletti, Gabriel Scherer, and Léo Andrès)

- [[https://github.com/ocaml/ocaml/issues/12615][#12615]]: ocamldoc: get rid of the odoc_literate and odoc_todo generators.
  (Sébaistien Hinderer, review by Gabriel Scherer and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12624][#12624]]: Use $XDG_CONFIG_DIRS in addition to $XDG_CONFIG_HOME when searching
  for init.ml and use this to extend init.ml support to the toplevel when
  running on Windows.
  (David Allsopp, report by Jonah Beckford, review by Nicolás Ojeda Bär and
   Antonin Décimo)

- [[https://github.com/ocaml/ocaml/issues/12688][#12688]]: Setting the env variable ~NO_COLOR~ with an empty value no longer
  has effects. Previously, setting ~NO_COLOR~ with any value, including
  the empty value, would disable colors (unless ~OCAML_COLOR~ is also set).
  After this change, the user must set ~NO_COLOR~ with an non-empty value
  to disable colors. This reflects a specification clarification/change
  from the upstream website at https://no-color.org.
  (Favonia, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12744][#12744]]: ocamltest: run tests in recursive subdirs more eagerly
  (Nick Roberts, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/12901][#12901]], 12908: ocamllex: add overflow checks to prevent generating incorrect
  lexers; use unsigned numbers in the table encoding when possible.
  (Vincent Laviron, report by Edwin Török, review by Xavier Leroy)

**** Internal/compiler-libs changes:

- [[https://github.com/ocaml/ocaml/issues/12508][#12508]] : Add compiler-side support for project-wide occurrences in Merlin, by
  generating index tables of all identifier occurrences. This extra data in .cmt
  files is only added when the new flag -bin-annot-occurrences is passed.
  (Ulysse Gérard, Nathanaëlle Courant, suggestions by Gabriel Scherer and Thomas
  Refis, review by Florian Angeletti, Gabriel Scherer and Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/12236][#12236]], [[https://github.com/ocaml/ocaml/issues/12386][#12386]], [[https://github.com/ocaml/ocaml/issues/12391][#12391]], [[https://github.com/ocaml/ocaml/issues/12496][#12496]], [[https://github.com/ocaml/ocaml/issues/12673][#12673]]: Use syntax as sole determiner of arity
  This changes function arity to be based solely on the source program's
  parsetree. Previously, the heuristic for arity had more subtle heuristics
  that involved type information about patterns.  Function arity is important
  because it determines when a pattern match's effects run and is an input
  into the fast path for function application.

  This change affects tooling: it changes the function constructs in parsetree
  and typedtree.

  See https://github.com/ocaml/RFCs/pull/32 for the original RFC.

  (Nick Roberts; review by Richard Eisenberg, Leo White, and Gabriel Scherer;
  RFC by Stephen Dolan)


- [[https://github.com/ocaml/ocaml/issues/12639][#12639]]: parsing: Attach a location to the RHS of Ptyp_alias
  and improve the 'alias type mismatch' error message.
  (Jules Aguillon, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12447][#12447]]: Remove 32-bit targets from X86_proc.system
  (Masanori Ogino, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12216][#12216]], [[https://github.com/ocaml/ocaml/issues/12248][#12248]]: Prevent reordering of atomic loads during instruction
  scheduling.  This is for reference, as instruction scheduling is currently
  unused in OCaml 5.
  (Xavier Leroy, report by Luc Maranget and KC Sivaramakrishnan,
   review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/12025][#12025]]: Split Typecore.unify_pat_types into two
  to avoid unnecessary references to the environment in type_pat
  (Jacques Garrigue and Takafumi Saikawa, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12031][#12031]]: Use dedicated types to represent names of compilation units
  and predefined exceptions in CMO files.
  (Sébastien Hinderer, review by Florian Angeletti, Thomas Refis,
  Gabriel Scherer, Vincent Laviron, Pierre Chambart, Luke Maurer,
  Hugo Heuzard, Xavier Leroy and Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/12109][#12109]]: Pack parameters to unification in unification_environment
  (Takafumi Saikawa and Jacques Garrigue, review by Richard Eisenberg)

- [[https://github.com/ocaml/ocaml/issues/12331][#12331]], [[https://github.com/ocaml/ocaml/issues/12361][#12361]]: Pack the unification data for pattern checking in Typecore
  (Takafumi Saikawa and Jacques Garrigue,
   review by Gabriel Scherer, Thomas Refis and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12229][#12229]]: Remove global mutable state for typechecking patterns
  in Typecore in favor of local mutable state.
  (Nick Roberts, review by Takafumi Saikawa)

- [[https://github.com/ocaml/ocaml/issues/12542][#12542]]: Minor bugfix to [[https://github.com/ocaml/ocaml/issues/12236][#12236]]: restore dropped call to ~instance~
  (Nick Roberts, review by Jacques Garrigue)

- [[https://github.com/ocaml/ocaml/issues/12242][#12242]]: Move the computation of stack frame parameters to a separate
  ~Stackframe~ module, and save the parameters in the results of the
  ~Linearize~ pass
  (Xavier Leroy, review by KC Sivaramakrishnan and Mark Shinwell)

- [[https://github.com/ocaml/ocaml/issues/12442][#12442]]: document jump summaries in the pattern-matching compiler
  (Gabriel Scherer and Thomas Refis, review by Florian Angeletti
   and Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/12446][#12446]], [[https://github.com/ocaml/ocaml/issues/12792][#12792]]: remove the hooks machinery around channel locking
  in runtime/io.c
  (Gabriel Scherer, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12389][#12389]], [[https://github.com/ocaml/ocaml/issues/12544][#12544]], [[https://github.com/ocaml/ocaml/issues/12984][#12984]], [[https://github.com/ocaml/ocaml/issues/12987][#12987]]: centralize the handling of metadata for
  compilation units and artifacts in preparation for better unicode support for
  OCaml source files.
  (Florian Angeletti, review by Vincent Laviron and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12532][#12532]], [[https://github.com/ocaml/ocaml/issues/12553][#12553]]: improve readability of the pattern-matching debug output
  (Gabriel Scherer, review by Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/12537][#12537]]: Use C11/C++11 standard static assertion.
  (Antonin Décimo, review by Sebastien Hinderer, Xavier Leroy,
   and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12169][#12169]]: runtime: document and enforce naming conventions around STW sections.
  (Gabriel Scherer, review by Enguerrand Decorne, Miod Vallat, B. Szilvasy
   and Nick Barnes, report by KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12669][#12669]] : Clean up some global state handling in schedgen
  (Stefan Muenzel, review by Miod Vallat and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12640][#12640]]: Make the module separator used in symbol names configurable
  (Miod Vallat, review by Hugo Heuzard and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12691][#12691]] : Clean up Ctype.expand_abbrev_gen and
  rename Env.add_local_type to add_local_constraint
  (Takafumi Saikawa and Jacques Garrigue, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12786][#12786]] : Clean up the algorithm of Ctype.limited_generalize
  (Takafumi Saikawa and Jacques Garrigue, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/10691][#10691]]: Ast_mapper, Ast_iterator: add functions directive_argument,
  toplevel_directive and toplevel_phrase.
  (Guillaume Petiot, review by Gabriel Scherer and Kate Deplaix)

- [[https://github.com/ocaml/ocaml/issues/12764][#12764]]: Move all installable headers in ~caml/~ sub-directories.
  (Antonin Décimo, review by Gabriel Scherer and David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12914][#12914]]: Slightly change the s390x assembly dialect in order to build with
  Clang's integrated assembler.
  (Miod Vallat, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/13001][#13001]]: do not read_back entire shapes to get aliases' uids when building the
  usages index
  (Ulysse Gérard, review by Gabriel Scherer and Nathanaëlle Courant)

**** Build system:

- [[https://github.com/ocaml/ocaml/issues/12198][#12198]], [[https://github.com/ocaml/ocaml/issues/12321][#12321]], [[https://github.com/ocaml/ocaml/issues/12586][#12586]], [[https://github.com/ocaml/ocaml/issues/12616][#12616]], [[https://github.com/ocaml/ocaml/issues/12706][#12706]], [[https://github.com/ocaml/ocaml/issues/13048][#13048]]: continue the merge of the
  sub-makefiles into the root Makefile started with [[https://github.com/ocaml/ocaml/issues/11243][#11243]], [[https://github.com/ocaml/ocaml/issues/11248][#11248]],
  [[https://github.com/ocaml/ocaml/issues/11268][#11268]], [[https://github.com/ocaml/ocaml/issues/11420][#11420]] and [[https://github.com/ocaml/ocaml/issues/11675][#11675]].
  (Sébastien Hinderer, review by David Allsopp and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12569][#12569]], [[https://github.com/ocaml/ocaml/issues/12570][#12570]]: remove 'otherlibraries' as a prerequisite for 'runtop';
  use 'runtop-with-otherlibs' to use a library from otherlibs/
  (Gabriel Scherer, review by Sébastien Hinderer, suggestion by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12652][#12652]]: Make magic numbers easier to bump and duplicate.
  (Sébastien Hinderer, review by Antonin Décimo, David Allsopp and Florian
  Angeletti)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12751][#12751]]: --with-target-bindir configure option implemented. This option
  refers to the location of the runtime binaries on the target system for a
  cross-compiler and is embedded in executables produced by ocamlc. It does
  not affect the bytecode executables installed as part of the build. The old
  mechanism ~make TARGET_BINDIR=..~ no longer works.
  (David Allsopp, review by Damien Doligez, Xavier Leroy and Olivier Nicole)

- [[https://github.com/ocaml/ocaml/issues/12768][#12768]], [[https://github.com/ocaml/ocaml/issues/13030][#13030]]: Detect mingw-w64 coupling with GCC or LLVM, detect clang-cl,
  and fix C compiler feature detection on macOS.
  (Antonin Décimo, review by Miod Vallat and Sébastien Hinderer)

**** Bug fixes:

- [[https://github.com/ocaml/ocaml/issues/10652][#10652]], [[https://github.com/ocaml/ocaml/issues/12720][#12720]]: fix evaluation order in presence of optional arguments
  (Jacques Garrigue, report by Leo White, review by Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/12595][#12595]], [[https://github.com/ocaml/ocaml/issues/12597][#12597]]: fix a race in ~caml_clear_gc_stats_sample~
  (Gabriel Scherer, review by B. Szilvasy, report by B. Szilvasy)

- [[https://github.com/ocaml/ocaml/issues/12580][#12580]]: Fix location of alias pattern variables.
  (Chris Casinghino, review Gabriel Scherer, report by Milo Davis)

- [[https://github.com/ocaml/ocaml/issues/12583][#12583]]: Add a closing event for when ~EV_MAJOR_EPHE_MARK~ is complete
  (Sudha Parimala, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12566][#12566]]: caml_output_value_to_malloc wrongly uses ~caml_stat_alloc~
  instead of ~malloc~ since 4.06, breaking (in pooled mode) user code
  that uses ~free~ on the result. Symmetrically,
  caml_input_value_from_malloc should use ~free~.
  (Gabriel Scherer, review by Xavier Leroy and Enguerrand Decorne,
   report by Ido Yariv)

- [[https://github.com/ocaml/ocaml/issues/12490][#12490]]: Unix: protect the popen_processes hashtable with a mutex
  (Gabriel Scherer, report by Olivier Nicole, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/11931][#11931]]: Fix tricky typing bug with type substitutions
  (Stephen Dolan, review by Leo White and Jacques Garrigue)

- [[https://github.com/ocaml/ocaml/issues/12037][#12037]], [[https://github.com/ocaml/ocaml/issues/12171][#12171]]: Fix get_extern_state potential NULL dereference.
  (Alexander Skvortsov, report by Török Edwin,
   design by Gabriel Scherer, Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12635][#12635]]: Fix get_intern_state potential NULL dereference.
  (Antonin Décimo, review by KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12032][#12032]], [[https://github.com/ocaml/ocaml/issues/12059][#12059]]: Bug fixes related to compilation of recursive definitions
  (Vincent Laviron, report by Victoire Noizet, review by Gabriel Scherer)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12145][#12145]]: Loopy constraints cause ocamlc to loop.
  Fixed by completely removing the call to ~update_type~ in
  ~Typedecl.transl_type_decl~, as the expansion is already checked by
  ~check_regularity~. As a result, recursion is more polymorphic,
  which may cause some (essentially wrong) type declarations to have
  unbound type variables, and some constraints unrelated to the concrete
  type to be ignored (see tests/typing-misc/constraints.ml).
  (Jacques Garrigue, report by Richard Eisenberg, review by Leo White)

- [[https://github.com/ocaml/ocaml/issues/12207][#12207]], [[https://github.com/ocaml/ocaml/issues/12222][#12222]]: Make closure computation linear in the number of recursive
  functions instead of quadratic
  (Vincent Laviron, report by François Pottier, review by Nathanaëlle Courant
  and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/11040][#11040]], [[https://github.com/ocaml/ocaml/issues/12591][#12591]]: fix a data race in major_gc.c
  (Gabriel Scherer, review by Guillaume Munch-Maccagnoni
   and KC Sivaramakrishnan, report by Sadiq Jaffer)

- [[https://github.com/ocaml/ocaml/issues/12238][#12238]], [[https://github.com/ocaml/ocaml/issues/12403][#12403]], [[https://github.com/ocaml/ocaml/issues/12698][#12698]]: read input files in one go to avoid source reprinting
  issues.
  (Gabriel Scherer, report by Mike Spivey and Vincent Laviron, review by
   Nicolás Ojeda Bär, Xavier Leroy and Jeremy Yallop)

- [[https://github.com/ocaml/ocaml/issues/12334][#12334]], [[https://github.com/ocaml/ocaml/issues/12368][#12368]]: Bad error message with mutually recursive abbreviations
  (Jacques Garrigue, report by Richard Eisenberg, review by Gabriel Scherer
   and Richard Eisenberg)

- [[https://github.com/ocaml/ocaml/issues/12401][#12401]]: ~seek_in~ and ~seek_out~ sometimes returned normally when given
  negative offsets, instead of failing. Now both functions should consistently
  raise ~Sys_error~ in this case.
  (Nicolás Ojeda Bär, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12267][#12267]]: Fix stack alignment computation
  (Miod Vallat, report by Jan Midtgaard, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12395][#12395]], [[https://github.com/ocaml/ocaml/issues/12404][#12404]]: Fix thread-unsafety in the fallback implementation of
  ~Unix.create_process~ (the one used when ~posix_spawnp~ is unavailable)
  (Xavier Leroy, report by Chris Vine, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/12949][#12949]]: open shadowing mistriggers
  (Gabriel Scherer, review by Florian Angeletti, report by Andreas Rossberg)

- [[https://github.com/ocaml/ocaml/issues/12526][#12526]]: Honor ~ocaml.inline always~ attribute on functions with
  optional arguments and default values in the Closure backend
  (Alain Frisch, review by Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/12677][#12677]], [[https://github.com/ocaml/ocaml/issues/12889][#12889]]: make Domain.DLS thread-safe
  (Gabriel Scherer, review by Olivier Nicole and Damien Doligez,
   report by Vesa Karvonen)

- [[https://github.com/ocaml/ocaml/issues/12561][#12561]]: Fix crash when combining TSan and frame-pointers
  (Fabrice Buoro and Olivier Nicole, report by Jan Midtgaard, review by Miod
  Vallat and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12482][#12482]]: Rework bounds checking code in the POWER backend
  (Miod Vallat and Xavier Leroy, report by Jan Midtgaard, review by
   KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12528][#12528]], [[https://github.com/ocaml/ocaml/issues/12703][#12703]]: Avoid pointer arithmetic overflow in Tag_val macro
  (very likely harmless, but can trigger alarms)
  (Xavier Leroy, report by Sam Goldman, review by Guillaume Munch-Maccagnoni)

- [[https://github.com/ocaml/ocaml/issues/12593][#12593]]: TSan should handle Effect.Unhandled correctly
  (Fabrice Buoro and Olivier Nicole, report by Jan Midtgaard and Miod Vallat,
   review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12684][#12684]]: fix locations filename in AST produced by the ~-pp~ option
  (Gabriel Scherer, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/12714][#12714]]: check whether macros are defined before using them to ensure
  that the headers can always be used in code which turns on -Wundef
  (or equivalent).
  (Antonin Décimo, review by Miod Vallat, Gabriel Scherer,
   Xavier Leroy, and David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12726][#12726]]: fix segmentation fault under Windows when executing a bytecode file if
  the runtime (~ocamlrun.exe~) cannot be found.
  (Vadim Zborovskii, Nicolás Ojeda Bär, report by Vadim Zborovskii, review by
  David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/12727][#12727]], [[https://github.com/ocaml/ocaml/issues/12730][#12730]]: fix bug with value let-rec and labelled applications
  (Vincent Laviron, review by Gabriel Scherer)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12751][#12751]]: Always keep within the 128 character limit for shebang lines. Previous
  fix in [[https://github.com/ocaml/ocaml/issues/8622][#8622]] handled building the compiler with a long prefix; this patch
  extends this to the bytecode executables emitted by that compiler.
  (David Allsopp, review by Damien Doligez, Xavier Leroy and Olivier Nicole)

- [[https://github.com/ocaml/ocaml/issues/12755][#12755]]: Fix data race on global pools arrays of pool_freelist
  (Fabrice Buoro and Olivier Nicole, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12796][#12796]], [[https://github.com/ocaml/ocaml/issues/12801][#12801]]: Fix memory corruption in caml_unix_alloc_sockaddr
  (Thomas Leonard, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/12737][#12737]]: Fix data races in minor_gc.c and caml_natdynlink_open
  (Olivier Nicole, review by Stefan Muenzel, Miod Vallat, Guillaume
   Munch-Maccagnoni, Gabriel Scherer and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12831][#12831]]: Fix call to caml_call_realloc_stack for s390x in PIC mode
  (Vincent Laviron, report by Jerry James, review by Miod Vallat)

- * (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12837][#12837]]: Show non-generalizable type parameters in type definitions
  Changes type of type parameters in outcometree.mli.
  (Jacques Garrigue, review by Richard Eisenberg)

- [[https://github.com/ocaml/ocaml/issues/12897][#12897]]: fix locking bugs in Runtime_events
  (Gabriel Scherer and Thomas Leonard,
   review by Olivier Nicole, Vincent Laviron and Damien Doligez,
   report by Thomas Leonard)

- [[https://github.com/ocaml/ocaml/issues/12851][#12851]]: Fix race between runtime events teardown and event emission
  (Olivier Nicole, review by Miod Vallat and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12860][#12860]]: Fix an assertion that wasn't taking into account the possibility of an
  ephemeron pointing at static data.
  (Mark Shinwell, review by Gabriel Scherer and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12861][#12861]]: Fix a possible crash in the ~threads~ library.
  (Mark Shinwell, review by Gabriel Scherer and KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/11040][#11040]], [[https://github.com/ocaml/ocaml/issues/12894][#12894]]: Silence false data race observed between caml_shared_try_alloc
  and oldify. Introduces macros to call tsan annotations which help annotate
  a "happens before" relationship.
  (Hari Hara Naveen S and Olivier Nicole,
   review by Gabriel Scherer and Miod Vallat)

- [[https://github.com/ocaml/ocaml/issues/12958][#12958]]: Fix tail-modulo-cons compilation of ~try-with~, ~&&~ and ~||~
  expressions.
  (Gabriel Scherer and Nicolás Ojeda Bär, report by Sylvain Boilard, review by
  Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12919][#12919]]: Fix register corruption in caml_callback2_asm on s390x.
  (Miod Vallat, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/12924][#12924]], [[https://github.com/ocaml/ocaml/issues/12930][#12930]]: Rework package constraint checking to improve interaction with
  immediacy
  (Chris Casinghino and Florian Angeletti, review by Florian Angeletti and
   Richard Eisenberg)

- [[https://github.com/ocaml/ocaml/issues/12969][#12969]]: Fix a data race in caml_darken_cont
  (Fabrice Buoro and Olivier Nicole, review by Gabriel Scherer and Miod Vallat)

- [[https://github.com/ocaml/ocaml/issues/12971][#12971]], [[https://github.com/ocaml/ocaml/issues/12974][#12974]]: fix an uncaught Ctype.Escape exception on some
  invalid programs forming recursive types.
  (Gabriel Scherer, review by Florian Angeletti, report by Neven Villani)

- [[https://github.com/ocaml/ocaml/issues/13019][#13019]]: Remove linking instructions for the Unix library from threads.cma
  (this was done for threads.cmxa in OCaml 3.11). Eliminates warnings from
  new lld when using threads.cma of duplicated libraries.
  (David Allsopp, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/13058][#13058]]: Add TSan instrumentation to caml_call_gc(), since it may raise
  exceptions.
  (Fabrice Buoro, Olivier Nicole, Gabriel Scherer and Miod Vallat)

- [[https://github.com/ocaml/ocaml/issues/13079][#13079]]: Save and restore frame pointer across Iextcall on ARM64
  (Tim McGilchrist, review by KC Sivaramakrishnan and Miod Vallat)

- [[https://github.com/ocaml/ocaml/issues/13094][#13094]]: Fix undefined behavior of left-shifting a negative number.
  (Antonin Décimo, review by Miod Vallat and Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/13130][#13130]]: minor fixes to pprintast for raw identifiers and local module open
  syntax for types.
  (Chet Murthy, review by Gabriel Scherer)
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe to the [[https://sympa.inria.fr/sympa/info/caml-list][caml-list]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
