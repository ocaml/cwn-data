#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2023.09.26.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2023.10.10.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of September 26 to October 03, 2023.

#+TOC: headlines 1


* An update from the ocaml-wasm organization
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/an-update-from-the-ocaml-wasm-organization/13114/1

** Jan Midtgaard announced


Summer and ICFP has passed since [[https://discuss.ocaml.org/t/announcing-the-ocaml-wasm-organisation/12676][we announced the ~ocaml-wasm~ organization in
July]]. Here we provide an
update from the ~wasocaml~ and ~wasm_of_ocaml~ compiler projects since then.

*** Introduction

[[https://webassembly.org/][WebAssembly (Wasm)]] is an attractive compilation target for OCaml, as it
holds promises of better web-performance than compiling to JavaScript and furthermore opens up for
running OCaml on new platforms. [[https://github.com/ocaml-wasm][The ~ocaml-wasm~ organization]] is a
joint effort between two Wasm-targeting compiler projects for OCaml:
- [[https://github.com/OCamlPro/wasocaml][~wasocaml~]] - an FLambda-based backend for OCaml's native code compiler
- [[https://github.com/ocaml-wasm/wasm_of_ocaml][~wasm_of_ocaml~]] - a fork of [[https://github.com/ocsigen/js_of_ocaml][~js_of_ocaml~]] that consumes OCaml bytecode and emits Wasm instead of JavaScript

Both compilers depend on [[https://github.com/WebAssembly/gc][the proposed garbage collection (GC) extension to
Wasm]], which is available behind a flag in development versions
of Chrome, Firefox, and Node.js. As a first news item, we are excited to share that [[https://github.com/WebAssembly/proposals/pull/172][the Wasm GC
proposal has moved to stage 4]]. As a consequence
[[https://groups.google.com/a/chromium.org/g/blink-dev/c/K_GpDF0y5Q8/m/XIJSfbTHBwAJ?pli=1][Chrome is planning to enable the WasmGC extension in version
119]],
[[https://chromestatus.com/roadmap][scheduled to release in November!]] :tada:

*** ~wasocaml~

- @chambart presented ~wasocaml~ at the [[https://icfp23.sigplan.org/home/mlworkshop-2023#program][ML workshop in Seattle]] in early September in connection with ICFP'23
  - Here's [[https://youtu.be/M5M3f31pxns?list=PLyrlk8Xaylp7Ea-Zu98G_VuxGtUnK_jB8&t=22719][a video link to the recorded presentation]]
  - The [[https://icfp23.sigplan.org/details/ocaml-2023-papers/13/Wasocaml-a-compiler-from-OCaml-to-WebAssembly][slides and the workshop paper are available from this page]] with more details about the compiler
- After having benchmarked ~wasocaml~, it was noticed that V8 exceptions are too slow right now. The OCaml exception compilation strategy has been changed to avoid using the native Wasm ones for now. This will be turned back into proper Wasm exceptions when the engines improve.

*** ~wasm_of_ocaml~

@vouillon has made solid progress on implementing run-time bindings, which means that
~wasm_of_ocaml~ can now
- compile ~ocamlc~ itself into Wasm
- run the [[https://github.com/janestreet/bonsai][Bonsai tests and examples]]

Early benchmarks results are encouraging: Compiled programs typically run around 10-20% faster
compared to the ~js_of_ocaml~ equivalent.

A more detailed status:
- Lots of runtime bindings have been implemented
  - for even more parts of the OCaml ~Stdlib~: bigarrays, weak pointers, ephemerons, marshaling/unmarshaling
  - for external packages: ~base~, ~core~, ~ppx_expect~, ~ppx_inline_test~, ~time_now~, ~incr_dom~, ~alcotest~, ~base_bigstring~, ~core_kernel~, ~string_dict~, ~bigstringaf~, ~js_of_ocaml_patches~, ~ocaml-cstruct~, ~Zarith~
- A number of PRs to get ~Wasm_of_ocaml~ supported:
  - in ~dune~ [[https://github.com/ocaml/dune/pull/8278][ocaml/dune#8278]]
  - in ~gen_js_api~ [[https://github.com/LexiFi/gen_js_api/pull/173][LexiFi/gen_js_api#173]]
  - in ~Brr~ [[https://github.com/dbuenzli/brr/pull/51][dbuenzli/brr#51]] and
  - to improve the ~js_of_ocaml~-~wasm_of_ocaml~  compatibility [[https://github.com/ocsigen/js_of_ocaml/pull/1492][ocsigen/js_of_ocaml#1492]]
- It is now possible to include JavaScript runtime files and to use JavaScript primitives from Wasm runtime code, reusing the ~js_of_ocaml~ linker.
- [[https://github.com/ocaml-wasm/wasm_of_ocaml/commit/e731e485849acda97d328efcef3859b3caaa63f2][Implemented Effect support through CPS transformation]] for comparison with the current JS promise integration implementation
- Updates contributing to the on-going Wasm GC ecosystem development:
  - Make the legacy parser follow more closely the standard GC text format [[https://github.com/WebAssembly/binaryen/pull/5889][WebAssembly/binaryen#5889]]
  - Update stringref text format [[https://github.com/WebAssembly/binaryen/pull/5891][WebAssembly/binaryen#5891]]
  - Use the standard syntax for ref.cast, ref.test and array.new_fixed [[https://github.com/WebAssembly/binaryen/pull/5894][WebAssembly/binaryen#5894]]
  - Fixed a V8 crash https://chromium-review.googlesource.com/c/v8/v8/+/4660286 and implemented a workaround in binaryen tools [[https://github.com/WebAssembly/binaryen/pull/5799][WebAssembly/binaryen#5799]]
  - Fixed the binaryen linker ~wasm-merge~ to support exporting an imported module entry [[https://github.com/WebAssembly/binaryen/pull/5813][WebAssembly/binaryen#5813]]
      



* Interesting OCaml Articles
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/interesting-ocaml-articles/1867/105

** gasche said


I had fun reading [[https://www.cambus.net/playing-with-caml-light-on-dos/][Playing with Caml Light on
DOS]], published today (it is not obvious
from the title).
      



* Batteries v3.7.1
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/batteries-v3-7-1/13117/1

** UnixJunkie announced


Dear community,

Batteries is a community-maintained extended standard library for OCaml.

The latest version of batteries is now available in opam: v3.7.1.

This version mostly adds compatibility with ocaml-5.1.0 (thanks to @kit-ty-kate).
Now, batteries relies on dune for compilation (thanks to Simmo Saan and Gabriel Scherer).

Many thanks to all contributors for this release!

Happy hacking,
The batteries maintainers.

Here is the change log for v3.7.1:
*** v3.7.1 (minor release)

- fix CI tests (dune clean && dune build @src/runtest)
  #1121
  (Simo Saan)
- fix documentation errors for BatSet, BatMap and BatSplay
  #1120
  (Simmo Saan)
- compatibility with OCaml 5.1.0
  #1117
  (kit-ty-kate)
- bugfix impacting BatString.split_on_string
  #1112
  (Guido Martinez, review by Francois Berenger)
- add batteries.unthreaded to dune file
  #1104
  (Stephen Sherratt)
- add optional dependency to dune in opam file
  #1103
  (Stephen Sherratt)
- Finish switch to dune
  #1098 dune build
  #1099 dune runtest
  (Simmo Saan, review by Francois Berenger)
      



* uri.4.4.0
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/ann-uri-4-4-0/13119/1

** Calascibetta Romain announced


Yours truly is delighted to announce the release of Uri 4.4.0.
[[https://github.com/mirage/ocaml-uri][~ocaml-uri~]] is a library for manipulating URIs in accordance
with [[https://datatracker.ietf.org/doc/html/rfc3986][RFC 3986]]. This announcement allows us to
clarify a *breaking change* in the interpretation of IPv6. Previous versions did not interpret
IPv6 in the ~host~ part of the URI - we simply escaped the special characters. This version of ~uri~
now interprets IPv6 addresses in the ~host~ part. This implies a change in the library's behaviour
which may have some impact on software using this library. This announcement clarifies this
"breaking change".

The library is available from OPAM: ~opam install uri.4.4.0~. From what we have been able to
observe, this breaking-change does not have a _direct_ impact on the ecosystem. The release went
ahead without any software being broken. However, we would like to warn you of such a change. The
[[https://github.com/mirage/ocaml-uri/issues][issues]] are open if you notice any unwanted behaviour
in the library.
      



* Outreachy December 2023
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/outreachy-december-2023/12949/12

** Deep in this thread, Sudha Parimala said


@nikochiko and I have proposed a project to develop a geometric creative coding library for OCaml.
This is heavily inspired by [[https://github.com/fossunited/joy][joy]] -- we had loads of fun hacking
with it at [[https://tarides.com/blog/2023-01-12-lambda-retreat-report/][Lambda Retreat]] (in Scheme)
and want to pass it on to OCaml programmers, and learn a bit about creative coding in the process.
Really excited to work on this. Outreachy applicants: Please don't hesitate to get in touch with us
if you're interested to contribute. :)

Huge thanks to @pitag, @patricoferris and everyone involved, for their efforts to keep this
thriving!
      

** Sonja Heinze then said


As promised, here is the update/summary on this round's projects. Just like last round, the OCaml
community has signed up with four super cool projects again. Here are this round's projects:
- /Implement R*-tree in OCaml/ An R*-tree is a data structure designed for geospatial use, particularly to be queried for geospatial objects contained in a given box. It's super nice to see the [[https://github.com/geocaml][Geospatial ecosystem for OCaml]] thrive. Mentors: @patricoferris , @AryanGodara
- /Implement a dark mode for OCaml.org/ It's a very nice idea to have a common feature request as an Outreachy project! That makes the internship very gratifying for the intern. Mentors: @SaySayo , @punchagan
- /Improve the GUI experience for OCaml users/ Together with trying out and possibly improving different GUI libraries in OCaml, that will entail writing a "Are we GUI yet" page on ocaml.org, similar to [[https://ocaml.org/docs/is-ocaml-web-yet][Are we web yet?]]. Those pages are super important, both to understand the current OCaml ecosystem ourselves and to give an overview to newcomers. Mentors: @gpetiot, @moazzammoriani
- /Develop a geometric creative coding library in OCaml/ Such a cool idea, @sudha ! It combines functional programming with creativity and basic geometry. The idea is to encode and draw 2-dimensional geometric shapes in a functional style. It's inspired by Python's [[https://github.com/fossunited/joy][joy]]. Mentors: @sudha, @nikochiko

Even at the small risk of being annoying: This is a good time for everyone who might possibly be
interested in mentoring to start thinking about a project for next round :)
      



* queenshead: a British pub name generator
:PROPERTIES:
:CUSTOM_ID: 6
:END:
Archive: https://discuss.ocaml.org/t/ann-queenshead-a-british-pub-name-generator/13124/1

** Raphaël Proust announced


Just because I could, it doesn't mean I should have; and yet I did write an entirely unnecessary
generator for names of British pubs.

#+begin_example
$ opam install queenshead
…
$ queenshead
The horse and goats
#+end_example

More details on [[https://raphael-proust.gitlab.io/code/queenshead.html][this short blog post]].

It was a good excuse to experiment with ~crunch~ as a way to embed some data files in an OCaml
program. Turned out to be easy.
      



* OCaml behind the scenes: Exception
:PROPERTIES:
:CUSTOM_ID: 7
:END:
Archive: https://discuss.ocaml.org/t/watch-ocaml-behind-the-scenes-exception/12743/2

** Fabrice announced


To celebrate this talk now being publicly available, I've added a chapter that was not part of the
original presentation!

This ~Backtraces~ section aims to explain how backtraces are constructed for exceptions, so that
exceptions can be linked to the code location that raised them. It also gives enough details about
the implementation to justify the claims in ~Takeaway #5~ about backtrace collection and
~raise_notrace~.

It's a bit technical, so I didn't dive in *all* the details, but there's certainly plenty to
understand the technique used.

The updated slides can be found in the release page of the repository:
https://github.com/fabbing/obts_exn/releases
Feel free to ask me any questions if anything isn't clear enough. :slightly_smiling_face:
      



* A memory-polymorphic, polyglot implementation of SplDoublyLinkedList (as transpiled by Pholyglot 0.2-betachicken)
:PROPERTIES:
:CUSTOM_ID: 8
:END:
Archive: https://discuss.ocaml.org/t/a-memory-polymorphic-polyglot-implementation-of-spldoublylinkedlist-as-transpiled-by-pholyglot-0-2-betachicken/13126/1

** Olle Härstedt announced


Added some new features to my hobby compiler project, Pholyglot. :) Maybe nothing interesting from
an OCaml perspective, it's a pretty basic amateur home-made compiler system, nothing fancy. The
weirdest aspect of it is that it outputs C-code that is also valid PHP-code, so called polyglot code
(semi-readable).

Since I'm career-locked into PHP, I'm writing myself out of it with my own compiler.

Another motivation is a slight disappointment in recent languages, like Rust, which does not,
according to me, adhere to the 80/20-rule - that the most common use-case should be easy, and that
in 80% of cases, you don't have to be fast, but you should be _able_ to be fast (instead of forced
to be fast). Hence the *opt-out-of-GC* experiment.

The current GC is just Boehm. Might be interesting to try with ref-count too. Proper tracing is
out-of-scope for the project (too hard... and requires headers etc, can't combine it with manual
memory, afaik).

Main OCaml src is here: https://github.com/olleharstedt/pholyglot/tree/main/src/lib

Most recent blog post:
http://olleharstedt.github.io/programming/2023/03/19/memory-polymorphic-spldoublylinkedlist-pholyglot.html
      



* Packages for making proof assistants
:PROPERTIES:
:CUSTOM_ID: 9
:END:
Archive: https://discuss.ocaml.org/t/ann-packages-for-making-proof-assistants/13138/1

** Favonia announced


We are excited to announce the first release of [[https://github.com/RedPRL/asai/][asai 浅い]] on
OPAM, along with new versions of [[https://github.com/redprl/algaeff][algaeff]] and [[https://github.com/RedPRL/yuujinchou][yuujinchou
友人帳]]. We also released
[[https://github.com/RedPRL/ocaml-bwd][bwd]] and [[https://github.com/RedPRL/mugen][mugen 無限]] on OPAM
earlier but didn't make an announcement.

All these packages are part of [[http://redprl.org/][our research project]] to dissect a typical proof
assistant into composable components so that _everyone_ can easily build a high-quality, usable
prototype out of their type checker. It turns out that many components are useful for writing
compilers, too. Here are our packages: (✅ means it's on OPAM.)

- ✅ [[https://github.com/RedPRL/asai/][asai 浅い]] for compiler diagnostics.
- ✅ [[https://github.com/RedPRL/yuujinchou][yuujinchou 友人帳]] for namespaces and lexical scoping. See my [[https://youtu.be/5Cp8jNrWSjI][TYPES 2022 talk]] for its design principles.
- [[https://github.com/RedPRL/bantorra][bantorra]] for library management (still under heavy development and revisions)
- ✅ [[https://github.com/RedPRL/mugen][mugen 無限]] for universe levels. See our [[https://doi.org/10.1145/3571250][POPL 2023 paper]] for a theoretic analysis of its design.
- [[https://github.com/RedPRL/kado][kado カド]] for handling cofibrations in Cartesian Cubical Type Theory. This was also used for implementing [[https://arxiv.org/abs/2210.05420][unfolding control]].

together with these more general-purpose packages:

- ✅ [[https://github.com/RedPRL/algaeff][algaeff]] for well-known composable effects-based gadgets (e.g., state, reader, etc.)
- ✅ [[https://github.com/RedPRL/ocaml-bwd][bwd]] for backward lists

We have a [[https://github.com/redprl/algaett][prototype system]] showing how these packages may be
used together. Many packages have been used in our [[https://github.com/RedPRL/cooltt][proof assistant
cooltt]], @jonsterling's ✅
[[https://www.jonmsterling.com/jms-005P.xml][forester]] tool and Topos Institute's
[[https://github.com/ToposInstitute/polytt][polytt]]. We invite you to try out our packages the next
time you want to build a proof assistant or compiler!
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe to the [[https://sympa.inria.fr/sympa/info/caml-list][caml-list]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
