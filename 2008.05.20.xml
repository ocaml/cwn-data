<?xml version="1.0" encoding="UTF-8"?>
<cwn>
	<cwn_head>
		<cwn_date>2008.05.20</cwn_date>
		<cwn_prev>2008.05.13</cwn_prev>
		<cwn_next>2008.05.27</cwn_next>
		<cwn_date_text>May 13 to 20, 2008</cwn_date_text>
	</cwn_head>
	<cwn_body>
		<cwn_entry>
			<cwn_title>NW Functional Programming Interest Group</cwn_title>
			<cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/e095762001b66bc6/c92942667fe4d502</cwn_url>
			<cwn_who>Greg Meredith announced</cwn_who>
			<cwn_what>
It's that time again. Our growing cadre of functionally-minded north
westerners is meeting at the


The Seattle Public Library
University Branch 5009 Roosevelt Way N.E. Seattle, WA 98105 206-684-4063

from 18:30 - 20:00 on May 28th. 

*** Note the change in venue ***

Agenda
JP has graciously offered to give a talk on darcs
we also need to continue to fill the talk pipeline
Hope to see you there.
			</cwn_what>
		</cwn_entry>
		<cwn_entry>
			<cwn_title>bitmatch 1.0</cwn_title>
			<cwn_url>http://groups.google.com/group/fa.caml/browse_frm/thread/c84509f1a9b58476#</cwn_url>
			<cwn_who>Richard Jones announced</cwn_who>
			<cwn_what>
I'm pleased to announce the first stable release of bitmatch, version 1.0.

We have a NEW home page:

 http://code.google.com/p/bitmatch/

Bitmatch adds Erlang-style bitstring matching and construction syntax
to OCaml.  It makes parsing binary files, formats and protocols
exceptionally simple.  It has numerous features including 1-64 bit
integers, strings, efficient subsets of bitstrings, big- and little-
endianness, signed and unsigned types, variable-width fields, and
fields with arbitrary bit-level alignment.

You might also want to check out our tool virt-df which uses bitmatch
to parse a wide variety of disk formats:

 http://et.redhat.com/~rjones/virt-df/

The source code for the diskimage library is a good place to see
bitmatch in real world usage:

 http://hg.et.redhat.com/virt/applications/virt-df--devel?cmd=manifest;manifest=64ac2a858070b95bc02445b9bb966786e84bebe7;path=/lib/

Bitmatch is available under the GNU LGPL version 2 or later with the
usual OCaml linking exception.
			</cwn_what>
		</cwn_entry>
	</cwn_body>
</cwn>