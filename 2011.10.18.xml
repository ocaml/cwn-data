<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2011.10.18</cwn_date>
    <cwn_prev>2011.10.11</cwn_prev>
    <cwn_next>2011.10.25</cwn_next>
    <cwn_date_text>October 11 to 18, 2011</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Plasma MapReduce, PlasmaFS, version 0.4</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2011-10/msg00061.html</cwn_url>
      <cwn_who>Gerd Stolpmann announced</cwn_who>
      <cwn_what>
I've just released Plasma-0.4. Plasma consists of two parts (for now),
namely Plasma MapReduce, a map/reduce compute framework, and PlasmaFS,
the underlying distributed filesystem.

Major changes in version 0.4:

      * Added a security system (including strong authentication, and
        authorization). This is a quite big change, and makes PlasmaFS a
        highly secure DFS.
      * Datanodes are now monitored, and failed nodes are automatically
        considered as unavailable. The monitoring system uses multicast
        messaging.
      * The namenode can now profit from multi-processing, removing a
        potential bottleneck.
      * Improved the caching subsystem.
      * Better management of file buffers in map/reduce jobs.

Of course, there are also numerous bug fixes and performance
improvements.

Plasma MapReduce is a distributed implementation of the map/reduce
algorithm scheme. In a sentence, map/reduce performs a parallel List.map
on an input file, sorts and splits the output by some criterion into
partitions, and runs a List.fold_left on each partition. Only that it
does not do that sequentially, but in a distributed way, and chunk by
chunk. Because of this Plasma MapReduce can process very large files,
and if run on enough computers, this also will work in reasonable time.
Of course, map and reduce are Ocaml functions here.

This all works on top of a distributed filesystem, PlasmaFS. This is a
user-space filesystem that is primarily accessed over RPC (but it is
also mountable as NFS volume). Actually, most of the effort went here.
PlasmaFS focuses on reliability and speed for big blocksizes. To get
this, it implements ACID transactions, replicates data and metadata with
two-phase commit, uses a shared memory data channel if possible, and
monitors itself. Unlike other filesystems for map/reduce, PlasmaFS
implements the complete set of usual file operations, including random
reads and writes. It can also be used as unspecialized global
filesystem.

Both pieces of software are bundled together in one download. The
project page with further links is

http://projects.camlcity.org/projects/plasma.html

There is now also a homepage at

http://plasma.camlcity.org

This is an early alpha release (0.4). A lot of things work already, and
you can already run distributed map/reduce jobs. However, it is in no
way complete.

Plasma is installable via GODI for Ocaml 3.12.

There is now a chart comparing Plasma with Hadoop. In one sentence,
PlasmaFS bases on a superior filesystem design, and has now to prove
that the implementation is really working. Plasma map/reduce generalizes
the algorithm scheme compared with Hadoop, but has still some
shortcomings in the implementation:

http://plasma.camlcity.org/plasma/dl/plasma-0.4/doc/html/Plasmafs_and_hdfs.html

http://plasma.camlcity.org/plasma/dl/plasma-0.4/doc/html/Plasmamr_and_hadoop.html


For discussions on specifics of Plasma there is a separate mailing list:

https://godirepo.camlcity.org/mailman/listinfo/plasma-list
      </cwn_what>
      <cwn_who>He later added</cwn_who>
      <cwn_what>
There is now even plasma-0.4.1, fixing some performance bugs.

Also, there are now some simple performance numbers:

http://plasma.camlcity.org/plasma/perf.html
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>msvc ocaml 3.12.1 installer</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2011-10/msg00064.html</cwn_url>
      <cwn_who>Karl Moerder asked and Jonathan Protzenko replied</cwn_who>
      <cwn_what>
&gt; There is a link on the ocaml download page that points to
&gt; 
&gt; http://caml.inria.fr/pub/distrib/ocaml-3.12/ocaml-3.12.1-win-msvc.exe
&gt; 
&gt; but the file is not there. When will it be available?

Last time Xavier and I discussed this, there were no plans to provide
an official installer for the MSVC toolchain. There's already an
official installer for the MingW32 toolchain
&lt;http://yquem.inria.fr/~protzenk/caml-installer.html&gt;, so you are
encouraged to use that one. If you really have to use the MSVC one,
I'd be interested in hearing why.

If you or anyone else is interested in maintaining an MSVC build, feel
free to reuse my installer script
(&lt;https://github.com/protz/ocaml-installer&gt;).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>PG'OCaml now hosted at the OCaml Forge</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2011-10/msg00071.html</cwn_url>
      <cwn_who>Dario Teixeira announced</cwn_who>
      <cwn_what>
PG'OCaml has moved, and is now hosted at the OCaml Forge.
This is the project's new homepage: http://pgocaml.forge.ocamlcore.org/

(Please update your links and bookmarks.  For now the old site at BerliOS
will inform you of the move; however, BerliOS is scheduled to shut down by
the end of the year).

The development/help mailing list has also changed.  Here you can find
subscription information and archives for the new list:
https://lists.forge.ocamlcore.org/cgi-bin/listinfo/pgocaml-general

Thank you for your attention!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

"OCaml for the Masses", a paper by Yaron Minsky, published in ACM Queue:
  &lt;http://queue.acm.org/detail.cfm?id=2038036&gt;

odb-server:
  &lt;https://forge.ocamlcore.org/projects/odb-serv/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>