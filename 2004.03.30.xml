<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2004.03.30</cwn_date>
  <cwn_prev>2004.03.23</cwn_prev>
  <cwn_next>2004.04.06</cwn_next>
  <cwn_date_text>23 to 30 March, 2004</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>ocaml-xmlr 0.1 (bindings for libxml&apos;s xmlreader)</cwn_title>
    <cwn_who>Evan Martin announced</cwn_who>
    <cwn_what>
I&apos;d like to announce my preliminary bindings for libxml[1]&apos;s
XmlTextReader[2] API for OCaml.  This API is modelled on the XmlReader
classes found originally in C# (I think?) and is quite convenient for
some applications.

This site has the download:
http://neugierig.org/software/ocaml/ocaml-xmlr/

I&apos;m still sorta new to OCaml, so any advice (even as simple as misused
technology or findlib fixes) is very welcome.

[1] http://xmlsoft.org/
[2] http://xmlsoft.org/xmlreader.html
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>html-/cgi lib</cwn_title>
    <cwn_who>Oliver Bandel asked, Richard Jones and Stephane Legrand answered</cwn_who>
    <cwn_what>
Richard Jones wrote:
&gt; Oliver Bandel wrote:
&gt; &gt; I once have asked here for a library, that can be used to parse
&gt; &gt; html-files and write cgi-scripts more easily.
&gt;
&gt; To write CGI scripts, use mod_caml -
&gt; http://www.merjis.com/developers/mod_caml/
&gt;
&gt; You can find lots of example mod_caml scripts here to get you started:
&gt; http://www.j-london.com/dist/
&gt;
&gt; To parse HTML files, I use perl4caml
&gt; http://www.merjis.com/developers/perl4caml/ and specifically the
&gt; Pl_HTML_Parser module which is a wrapper around Perl HTML::Parser.
&gt;

You can also look at Ocamlnet (http://sourceforge.net/projects/ocamlnet)
for CGI and WDialog (http://wdialog.sourceforge.net/) for a more
complete system to create web applications.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>perl4caml 0.3.10</cwn_title>
    <cwn_who>Richard Jones announced</cwn_who>
    <cwn_what>
I&apos;m please to announce Perl4Caml 0.3.10, available here:

http://www.merjis.com/developers/perl4caml/

This version includes a wrapper around the Template Toolkit,
contributed by Dave Benjamin, and some cleanups for memory handling
(although memory handling still isn&apos;t quite right, and for this reason
the library doesn&apos;t free Perl objects - any help getting this right is
welcomed).

[From the website ...]

perl4caml allows you to use Perl code within Objective CAML (OCaml),
thus neatly side-stepping the old problem with OCaml which was that it
lacked a comprehensive set of libraries. Well now you can use any part
of CPAN in your OCaml code.

perl4caml has both a low-level interface to Perl, eg:

Perl.eval &quot;$a = 3&quot;;
printf &quot;$a contains %d\n&quot; (Perl.int_of_sv (Perl.get_sv &quot;a&quot;));

and it contains high-level wrappers around some CPAN libraries (more
to come later), eg:

open Pl_LWP_UserAgent
open Pl_HTTP_Request

(* Create the UserAgent object. *)
let ua = Pl_LWP_UserAgent.new_ ~env_proxy:true () in

(* Fetch the page. *)
let req = Pl_HTTP_Request.new_ &quot;GET&quot; ~uri:site () in
let res = ua#request req in

if not res#is_success then
  failwith (&quot;Error while fetching &quot; ^ site ^ &quot;: &quot; ^ res#status_line);
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>OCamlDBI, mod_caml documentation</cwn_title>
    <cwn_who>Richard Jones announced</cwn_who>
    <cwn_what>
&gt; After quite a long hiatus when we weren&apos;t distributing packages for
&gt; mod_caml (instead everyone was chasing the CVS version), I&apos;m pleased
&gt; to announce the availability of stable packages for the latest
&gt; OCamlDBI and mod_caml.

I have also updated the ocamldoc on the website, which was getting
rather out of date.  You can find the browsable documentation here:

http://www.merjis.com/developers/mod_caml/
http://www.merjis.com/developers/mod_caml/html/index.html
http://www.merjis.com/developers/mod_caml/html-dbi/index.html
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Delaying module initialization</cwn_title>
    <cwn_who>Foreword by the editor</cwn_who>
    <cwn_what>
A long thread on shared libraries and dynamic linking has started this
week. It began with the following message from the archive:
http://caml.inria.fr/archives/200403/msg00371.html
Here is one extract form this thread.
    </cwn_what>
    <cwn_who>Richard Jones asked and Xavier Leroy answered</cwn_who>
    <cwn_what>
&gt; I think this must have something to do with Dynlink.  The manual
&gt; states:
&gt;
&gt;   All toplevel expressions in the loaded compilation units are
&gt;   evaluated.

Yes, indeed.  Compilation units loaded at top-level or dynamically via
Dynlink are always loaded and their initialization code executed,
because there is no way for the system to determine whether they&apos;ll be
needed later.  Static linking can determine this, and therefore
removes unreferenced units from .cma libraries.

J. Skaller unhelpfully suggests:
&gt; Hassle the ocaml team for generation of shared libraries?

Shared libs will definitely not help here (and elsewhere).  By
definition, linking with a shared lib is like dynamically loading all
units contained in this lib, hence no way to eliminate unneeded ones.
Only static linking can do that.

(As far as &quot;hassling&quot; goes, this will only reinforce my conviction
that shared libraries are useless.  So, don&apos;t do that.)

Coming back to Rich Jones&apos; problem, there are two ways to go about
this:

1- Since you&apos;re dynamically loading the Caml modules anyway, couldn&apos;t
you arrange so that only those you really need are loaded?

2- Instead of doing

        let _ = eval &quot;use LWP::UserAgent&quot;
        let somefun x y = ...

you could implement on-demand evaluation of the &quot;use&quot; bit, e.g.

        let inited = ref false
        let init() =
          if not !inited then begin
            eval &quot;use LWP::UserAgent&quot;;
            inited := true
          end
        let somefun x y = init(); ...

Every function needs to be protected by a call to init().  If you
export constants and not just functions, this won&apos;t work, of course,
but maybe this doesn&apos;t happen too often.

A nicer way to write the above is

        let init = lazy (eval &quot;use LWP::UserAgent&quot;)
        let somefun x y = Lazy.force init; ...
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Contfrac</cwn_title>
    <cwn_who>Thomas Baruchel announced</cwn_who>
    <cwn_what>
See at http://contfrac.sourceforge.net (unfortunately, I don&apos;t know
how to use CVS, so you will have to download the 9ko compressed
file as a whole).

It performs exact arithmetic on real numbers by using continued fraction.
The purpose is similar to creal and surreal, but algorithms are deeply
different. I implement Gosper&apos;s algorithm for computing operations between
continued fractions. Many functions are provided, including support for
algebraic numbers of arbitrary degree (of course, exp, log, tan, sin, cos,
atan, sqrt, etc. are included).

Though my initial purpose was not to implement an efficient and quick module
(I was rather interested by the theoretical aspects of the thing), some
very quick and empirical comparisons with CREAL make me think that my
module is quicker for the superficial tests I tried.

This is an alpha release; it is undocumented, except that the .mli file
is understandable and commented.

Some little changes since the announce on fr.comp.lang.caml:
  - licence now is MIT (rather than GNU)
  - a few functions added (mainly conversion functions:
    conversions from/to continued fractions can be done with many
    types (including now streams, objects having a &quot;next&quot; method, lists,
    etc.)
  - a support for converting continued fractions to convergents has been
    added (a ratio_from_cf function, and a class for building successive
    convergents).
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>ocamlconf-0.2</cwn_title>
    <cwn_who>Kenneth Knowles announced</cwn_who>
    <cwn_what>
Announcing ocamlconf-0.2; new in this release:

* A slightly different API (with radically improved backend) for specifying
  targets, with more options for libraries and less for scripts.
* Better makefile, with doc targets for each format known to ocamldoc, and
  generally better management of &quot;make all&quot; vs &quot;make opt&quot;
* Finer control over what is installed with findlib, and under what package name
* Many bug-fixes for combined C/ocaml libraries.

http://kenn.frap.net/ocamlconf/
http://kenn.frap.net/ocamlconf/ocamlconf-0.2.tar.bz2

----- cut here -----
Description of ocamlconf:

        Ocamlconf is a build helper for ocaml programs.  It takes a &apos;configure.ml&apos;
and creates a &apos;configure&apos; script.  This script prompts for compile time toggles
and variable settings, and outputs an automatically-generated makefile.

Features:
* Simple &quot;./configure; make; make install&quot; operation.
* MakeMake module for outputting your makefile based on specifications
* Conf module for prompting the user for compile-time options, as well as
  locating libraries (usually via findlib)
* Util module with some useful shell and string functions

How Good is the Generated Makefile?
* Makefile is about as simple as a hand-written one.
* Contains a &apos;normal&apos; and a &apos;.opt&apos; target for each program or library
* Typical targets for: install, install-opt, uninstall, clean, distclean, doc,
* all, opt, byte, tar, gzip, bzip2
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
