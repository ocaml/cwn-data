#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2023.05.30.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2023.06.13.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of May 30 to June 06, 2023.

#+TOC: headlines 1


* Meetup group in New York City
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/meetup-group-in-new-york-city/12270/1

** Ashish Agarwal announced


I'm pleased to announce that the [[https://www.meetup.com/nyc-ocaml/][OCaml NYC Meetup]] is back! We have scheduled
our first new event for June 20th, where we will discuss the use of OCaml in Tezos. Please join the meetup group to
stay informed about future events. We normally will not post to this forum.

We are always looking for speakers. Please reach out to me if you are in the New York City area and are interested
in giving a talk.
      



* Creating a tutorial on sequences
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/creating-a-tutorial-on-sequences/12091/2

** Cuihtlauac Alvarado announced


This tutorial is now online: https://ocaml.org/docs/sequences

Thanks to Miod Vallat, Sayo Bamigdade (@SaySayo), Christine Rose (@professor.rose), Sabine Schmaltz (@sabine),
Guillaume Petiot (@gpetiot), Xavier Van de Woestyne (@xvw) and Simon Cruanes (@c-cube ) for their feedback
      



* new release: Merlin 4.9
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/ann-new-release-merlin-4-9/12277/1

** vds announced


I am pleased to announce a new release of Merlin!

Merlin is an editor service that provides modern IDE features for OCaml.

This new release brings a number of improvements and bug fixes. In particular we identified and patched an
important memory consumption issue that could greatly affect Merlin's performance in heavily functorized projects.

Full changelog: https://github.com/ocaml/merlin/blob/master/CHANGES.md#merlin-49
      



* Taking Inventory of the OCaml Ecosystem on OCaml.org
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/taking-inventory-of-the-ocaml-ecosystem-on-ocaml-org/12278/1

** Sabine Schmaltz announced


we have an open PR on ocaml/ocaml.org (https://github.com/ocaml/ocaml.org/pull/1226) to show an approximation of
what the state of the OCaml ecosystem is with respect to different topics / use cases.

This addition is inspired by Rust's excellent "Are we X yet?" pages which
1. *highlight libraries* that are production-ready, well-documented, and have a nice API in the different categories. This is a *showcase where we want to proudly point newcomers to*.
2. offer a high-level overview of the usability of the language for certain applications. This *makes visible where contributions to the ecosystem would be particularly valuable* to the OCaml community. They provide a starting point for (prospective) package authors to see where gaps in the ecosystem are, so they can *create successful open source projects that meet community demand*! (I know at least one company which is interested in contributing to funding such projects. :wink:)

This is where you come in:

1. *Please help us give these pages an iconic name / title*. Got an idea? Reply to this post! Make it memorable.
2. *Are there any important categories missing?*
3. Contributions are always welcome - none of use here is an expert on the ever-growing OCaml ecosystem!
      



* New release: DocuLib 1.3.5
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/ann-new-release-doculib-1-3-5/12286/1

** nguermond announced


I'm happy to announce a new release of DocuLib on OPAM, a lightweight and easy to use GUI for locally managing
metadata for books, textbooks, and articles (kind of like Zotero). This release is mostly for minor fixes but I
want to take the opportunity to advertise [[https://github.com/nguermond/doculib][DocuLib]] again.

Its core features are
- facilitating looking up metadata with an interface to openlibrary.org, semanticscholar.org, and bibtex references through crossref.org
- automatically detecting duplicates (by md5 hash), file renamings, and files moved between libraries without losing metadata
- keeping track of authors, title, tags, personal notes, date, DOI/ISBN
- error permissive search

For a full list of changes see [[https://github.com/nguermond/doculib/blob/master/CHANGES.md][CHANGES]]

Feel free to make suggestions in the comments!
      

** Kiran Gopinathan asked and nguermond replied


#+begin_quote
Could you comment a bit more on the comparison to zotero? Are there certain features in doculib that you can't
easily achieve in zotero?
#+end_quote

The biggest difference is the way data is stored:
- Zotero puts a priority on metadata entries where a physical file is a child of that entry if it exists, whereas DocuLib entries are one-to-one with physical files on your computer
- files added to Zotero are either stored in a Zotero data directory (over which you have no control) or a link to a file on your computer (which you have to keep track of manually, so clearly not the preferred method), whereas DocuLib files are stored in libraries, of which you can have multiple. A library is a directory containing files you want DocuLib to index, but metadata for that library is also stored in that library.This means libraries are portable, so you can share them or sync them independently of DocuLib.
- Zotero stores metadata in a database, whereas DocuLib stores metadata as json files one-to-one with the corresponding document

So in short, use DocuLib if you are a document hoarder and want local control over your files. I'd say creating
bibliographic references is not the primary focus of DocuLib, whereas it is for Zotero.
      



* opam 2.1.5 release!
:PROPERTIES:
:CUSTOM_ID: 6
:END:
Archive: https://discuss.ocaml.org/t/ann-opam-2-1-5-release/12290/1

** R. Boujbel announced


We are pleased to announce the patch release of [[https://github.com/ocaml/opam/releases/tag/2.1.5][opam 2.1.5]].

This opam release consists of [[https://github.com/ocaml/opam/issues/5444][backported]] bug fixes & a security fix.

Youâ€™ll find more information in the [[https://opam.ocaml.org/blog/opam-2-1-5][release blog post]], and the local
cache corruption issue in [[https://opam.ocaml.org/blog/opam-2-1-5-local-cache][the security post]].

Thanks to [[https://robur.coop][robur]] for the security review!

To upgrade simply run:

#+begin_example
bash -c "sh <(curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh) --version 2.1.5"
#+end_example
      



* dune 3.8.0
:PROPERTIES:
:CUSTOM_ID: 7
:END:
Archive: https://discuss.ocaml.org/t/ann-dune-3-8-0/12291/1

** Etienne Millon announced


The dune team is pleased to announce the release of Dune 3.8.0.

It is now available in opam-repository. As usual, it should always be safe to upgrade your ~dune~ package: new
features and deprecations are only availble if you upgrade the language version in your ~dune-project~ files.

*** Added

- Introduce mdx stanza 0.4 requiring mdx >= 2.3.0 which updates the default
  list of files to include ~*.mld~ files (#7582, @Leonidas-from-XIV)

- Allow ~(stdlib ...)~ to be used with ~(wrapped false)~ in library stanzas
  (#7139, @anmonteiro).

- Allow the main module of a library with ~(stdlib ...)~ to depend on other
  libraries (#7154, @anmonteiro).

- Support ~(link_flags ...)~ in ~(cinaps ...)~ stanza. (#7423, fixes #7416,
  @nojb)

- Allow ~(package ...)~ in any position within ~(rule ...)~ stanza (#7445,
  @Leonidas-from-XIV)

- Added a new user action ~(concurrent )~ which is like ~(progn )~ but runs the
  actions concurrently. (#6933, @Alizter)

- Accept the Ordered Set Language for the ~modes~ field in ~library~ stanzas
  (#6611, @anmonteiro).

- Allow parallel execution of inline tests partitions (#7012, @hhugo)

- Add the ~--display-separate-messages~ flag to separate the error messages
  produced by commands with a blank line. (#6823, fixes #6158, @esope)

- Add ~--watch-exclusions~ to Dune build options (#7216, @jonahbeckford)

- Adds support for loading plugins in toplevels (#6082, fixes #6081,
  @ivg, @richardlford)

- Introduce a ~public_headers~ field on libraries. This field is like
  ~install_c_headers~, but it allows to choose the extension and choose the
  paths for the installed headers. (#7512, @rgrinberg)

- Dune can now detect Coq theories from outside the workspace. This allows for
  composition with installed theories (not necessarily installed with Dune).
  (#7047, @Alizter, @ejgallego)

- Added a ~--no-build~ option to ~dune coq top~ for avoiding rebuilds (#7380,
  fixes #7355, @Alizter)

- Add a ~coqdoc_flags~ field to the ~coq.theory~ stanza allowing the user to
  pass extra arguments to ~coqdoc~. (#7676, fixes #7954 @Alizter)

- Preliminary support for Coq compiled intefaces (~.vos~ files) enabled via
  ~(mode vos)~ in ~coq.theory~ stanzas. This can be used in combination with
  ~dune coq top~ to obtain fast re-building of dependencies (with no checking
  of proofs) prior to stepping into a file. (#7406, @rlepigre)

- Read ~pkg-config~ arguments from the ~PKG_CONFIG_ARGN~ environment variable
  (#1492, #7734, @anmonteiro)

- Use ~$PKG_CONFIG~, when set, to find the ~pkg-config~ binary  (#7469, fixes
  #2572, @anmonteiro)

*** Changed

- Bootstrap: remove reliance on shell. Previously, we'd use the shell to get
  the number of processors. (#7274, @rgrinberg)

- Non-user proccesses such as version control or config checking are now run
  silently. (#6994, fixes #4066, @Alizter)

- Bytecode executables built for JSOO are linked with ~-noautolink~ and no
  longer depend on the shared stubs of their dependent libraries (#7156, @nojb)

- Always include ~opam~ files in the generated ~.install~ file. Previously, it
  would not be included whenever ~(generate_opam_files true)~ was set and the
  ~.install~ file wasn't yet generated. (#7547, @rgrinberg)

*** Deprecated

- Modules that were declared in ~(modules_without_implementation)~,
  ~(private_modules)~ or ~(virtual_modules)~ but not declared in ~(modules)~
  will cause Dune to emit a warning which will become an error in 3.9. (#7608,
  fixes #7026, @Alizter)

- Coq language versions less 0.8 are deprecated, and will be removed
  in an upcoming Dune version. All users are required to migrate to
  ~(coq lang 0.8)~ which provides the right semantics for theories
  that have been globally installed, such as those coming from opam
  (@ejgallego, @Alizter)

*** Fixed

- Find ~pps~ dependencies in the host context when cross-compiling,  (#7415,
  fixes #4156, @anmonteiro)

- Fix plugin loading with findlib. The functionality was broken in 3.7.0.
  (#7556, @anmonteiro)

- Load the host context ~findlib.conf~ when cross-compiling (#7428, fixes
  #1701, @rgrinberg, @anmonteiro)

- Allow overriding the ~ocaml~ binary with findlib configuration (#7648,
  @rgrinberg)

- Resolve ~ppx_runtime_libraries~ in the target context when cross compiling
  (#7450, fixes #2794, @anmonteiro)

- Fix ~dune install~ when cross compiling (#7410, fixes #6191, @anmonteiro,
  @rizo)

- Fix string quoting in the json file written by ~--trace-file~ (#7773,
  @rleshchinskiy)

- Correctly set ~MANPATH~ in ~dune exec~. Previously, we would use the ~bin/~
  directory of the context. (#7655, @rgrinberg)

- merlin: ignore instrumentation settings for preprocessing. (#7606, fixes
  #7465, @Alizter)

- When a rule's action is interrupted, delete any leftover directory targets.
  This is consistent with how we treat file targets. (#7564, @rgrinberg)

- Fix dune crashing on MacOS in watch mode whenever ~$PATH~ contains ~$PWD~
  (#7441, fixes #6907, @rgrinberg)

- Dune in watch mode no longer builds concurrent rules in serial (#7395
  @rgrinberg, @jchavarri)

- ~dune coq top~ now correctly respects the project root when called from a
  subdirectory. However, absolute filenames passed to ~dune coq top~ are no
  longer supported (due to being buggy) (#7357, fixes #7344, @rlepigre and
  @Alizter)

- RPC: Ignore SIGPIPE when clients suddenly disconnect (#7299, #7319, fixes
  #6879, @rgrinberg)

- Always clean up the UI on exit. (#7271, fixes #7142 @rgrinberg)

- Bootstrap: correctly detect the number of processors by allowing ~nproc~ to be
  looked up in ~$PATH~ (#7272, @Alizter)

- Speed up file copying on macos by using ~clonefile~ when available
  (@rgrinberg, #7210)

- Support commands that output 8-bit and 24-bit colors in the terminal (#7188,
  @Alizter)

- Speed up rule generation for libraries and executables with many modules
  (#7187, @jchavarri)

- Do not re-render UI on every frame if the UI doesn't change (#7186, fix
  #7184, @rgrinberg)

- Make ~coq_db~ creation in scope lazy (@ejgallego, #7133)

- dune install now respects --display quiet mode (#7116, fixes #4573, fixes
  #7106, @Alizter)

- Stub shared libraries (~dllXXX_stubs.so~) in Dune-installed libraries could
  not be used as dependencies of libraries in the workspace (eg when compiling
  to bytecode and/or Javascript).  This is now fixed. (#7151, @nojb)

- Fix regression where Merlin was unable to handle filenames with uppercase
  letters under Windows. (#7577, @nojb)

- On nix+macos, pass ~-f~ to the codesign hook to avoid errors when the binary
  is already signed (#7183, fixes #6265, @greedy)

- Fix bug where RPC clients built with dune-rpc-lwt would crash when closing
  their connection to the server (#7581, @gridbugs)

- Fix RPC server on Windows (used for OCaml-LSP). (#7666, @nojb)
      



* Second alpha release of OCaml 5.1.0
:PROPERTIES:
:CUSTOM_ID: 8
:END:
Archive: https://discuss.ocaml.org/t/second-alpha-release-of-ocaml-5-1-0/12299/1

** octachron announced


With the progress of the ongoing stabilisation effort for OCaml 5.1.0, I am happy to announce a second alpha
release for OCaml 5.1.0.

This second alpha release contains many noteworthy fixes:

- a long-awaited GC fix
- a Windows ABI fix

as announced in the first alpha but also

- a compiler-libs (parsetree) fix
- a type system compatibility enhancement change
- a restored backed for  s390x/IBM Z

The full list of changes since the first alpha is available below.

Once most major OCaml tools are updated to the last compiler-libs changes, we will switch to beta releases.
Hopefully, this will happen in the upcoming weeks. The progress on stabilising the ecosystem is tracked on the
[[https://github.com/ocaml/opam-repository/issues/23669][opam readiness for 5.1.0 meta-issue]].

Currently, the release is still planned for around July.

If you find any bugs, please report them on [[https://github.com/ocaml/ocaml/issues][OCaml's issue tracker]].

If you are interested in the ongoing list of new features and bug fixes, the
updated change log for OCaml 5.1.0 is available [[https://github.com/ocaml/ocaml/blob/5.1/Changes][on GitHub]].

*** Installation Instructions

The base compiler can be installed as an opam switch with the following commands
on opam 2.1:

#+begin_src shell
opam update
opam switch create 5.1.0~alpha2
#+end_src

The source code for the alpha is also available at these addresses:

- [[https://github.com/ocaml/ocaml/archive/5.1.0-alpha2.tar.gz][GitHub]]
- [[https://caml.inria.fr/pub/distrib/ocaml-5.1/ocaml-5.1.0~alpha2.tar.gz][OCaml archives at Inria]]

**** Fine-Tuned Compiler Configuration

If you want to tweak the configuration of the compiler, you can switch to the option variant with:

#+begin_src shell
opam update
opam switch create <switch_name> ocaml-variants.5.1.0~alpha2+options <option_list>
#+end_src

where ~option_list~ is a space-separated list of ~ocaml-option-*~ packages. For instance, for a flambda and
no-flat-float-array switch:

#+begin_src shell
opam switch create 5.1.0~alpha2+flambda+nffa ocaml-variants.5.1.0~alpha2+options ocaml-option-flambda ocaml-option-no-flat-float-array
#+end_src

All available options can be listed with ~opam search ocaml-option~.

*** Changes Compared To The First Alpha Release

**** Runtime System:

- [[https://github.com/ocaml/ocaml/issues/11589][#11589]], [[https://github.com/ocaml/ocaml/issues/11903][#11903]]: Modify the GC pacing code to make sure the GC keeps
   up with allocations in the presence of idle domains.
   (Damien Doligez and Stephen Dolan, report by Florian Angeletti,
   review by KC Sivaramakrishnan and Sadiq Jaffer)

- (*breaking change*) [[https://github.com/ocaml/ocaml/issues/11865][#11865]], [[https://github.com/ocaml/ocaml/issues/11868][#11868]], [[https://github.com/ocaml/ocaml/issues/11876][#11876]]: Clarify that the operations of a custom
  block must never access the OCaml runtime. The previous
  documentation only mentioned the main illicit usages. In particular,
  since OCaml 5.0, it is no longer safe to call
  ~caml_remove_global_root~ or ~caml_remove_generational_global_root~
  from within the C finalizer of a custom block, or within the
  finalization function passed to ~caml_alloc_final~. As a workaround,
  such a finalization operation can be registered with ~Gc.finalize~
  instead, which guarantees to run the finalizer at a safe point.
  (Report by Timothy Bourke, discussion by Yotam Barnoy, Timothy
  Bourke, Sadiq Jaffer, Xavier Leroy, Guillaume Munch-Maccagnoni, and
  Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/11827][#11827]], +[[https://github.com/ocaml/ocaml/issues/12249][#12249]]: Restore prefetching for GC marking
  (Fabrice Buoro and Stephen Dolan, review by Gabriel Scherer and Sadiq Jaffer)

- [[https://github.com/ocaml/ocaml/issues/12131][#12131]]: Simplify implementation of weak hash sets, fixing a
  performance regression. (Nick Barnes, review by FranÃ§ois Bobot,
  Alain Frisch and Damien Doligez).

- [[https://github.com/ocaml/ocaml/issues/12231][#12231]]: Support MinGW-w64 11.0 winpthreads library, where the macro
  to set up to get flexdll working changed
  (David Allsopp and Samuel Hym, light review by Xavier Leroy)

**** Type System:

- (*breaking change*) [[https://github.com/ocaml/ocaml/issues/12189][#12189]], [[https://github.com/ocaml/ocaml/issues/12211][#12211]]: anonymous row variables in explicitly polymorphic type
  annotation, e.g. ~'a. [< X of 'a ] -> 'a~, are now implicitly
  universally quantified (in other words, the example above is now read
  as ~'a 'r. ([< X of 'a ] as 'r) -> 'a~).
  (Florian Angeletti and Gabriel Scherer, review by Jacques Garrigue)

**** Code Generation And Optimizations:

- [[https://github.com/ocaml/ocaml/issues/11712][#11712]], [[https://github.com/ocaml/ocaml/issues/12258][#12258]], [[https://github.com/ocaml/ocaml/issues/12261][#12261]]: s390x / IBM Z multicore support:
  OCaml & C stack separation; dynamic stack size checks; fiber and
  effects support.
  (Aleksei Nikiforov, with help from Vincent Laviron and Xavier Leroy,
   additional suggestions by Luc Maranget,
   review by the same and KC Sivaramakrishnan)

**** Internal/compiler-libs Changes:

- [[https://github.com/ocaml/ocaml/issues/12119][#12119]], [[https://github.com/ocaml/ocaml/issues/12188][#12188]], [[https://github.com/ocaml/ocaml/issues/12191][#12191]]: mirror type constraints on value binding in the
  parsetree:
  the constraint ~typ~ in ~let pat : typ = exp~ is now directly stored
  in the value binding node in the parsetree.
  (Florian Angeletti, review by  Richard Eisenberg)

**** Bug Fixes

- [[https://github.com/ocaml/ocaml/issues/11846][#11846]]: Mark rbx as destroyed at C call for Win64 (mingw-w64 and Cygwin64).
  Reserve the shadow store for the ABI in the c_stack_link struct instead of
  explictly when calling C functions. This simultaneously reduces the number of
  stack pointer manipulations and also fixes a bug when calling noalloc
  functions where the shadow store was not being reserved.
  (David Allsopp, report by Vesa Karvonen, review by Xavier Leroy and
   KC Sivaramakrishnan)

- [[https://github.com/ocaml/ocaml/issues/12170][#12170]]: fix pthread_geaffinity_np configure check for android
  (David Allsopp, review by SÃ©bastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/12252][#12252]]: Fix shared library build error on RISC-V.
  (Edwin TÃ¶rÃ¶k, review by NicolÃ¡s Ojeda BÃ¤r and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/12255][#12255]], [[https://github.com/ocaml/ocaml/issues/12256][#12256]]: Handle large signal numbers correctly (Nick Barnes,
   review by David Allsopp).

- [[https://github.com/ocaml/ocaml/issues/12277][#12277]]: ARM64, fix a potential assembler error for very large functions by
  emitting stack reallocation code before the body of the function.
  (Xavier Leroy, review by KC Sivaramakrishnan)
      



* ML'23: ACM SIGPLAN ML Family Workshop â€” Call for presentations
:PROPERTIES:
:CUSTOM_ID: 9
:END:
Archive: https://discuss.ocaml.org/t/ml23-acm-sigplan-ml-family-workshop-call-for-presentations/12224/2

** Guillaume Munch-Maccagnoni announced


I'm letting you know that the deadline has been extended to June 8th (AoE).
      



* qcheck-lin and qcheck-stm 0.2
:PROPERTIES:
:CUSTOM_ID: 10
:END:
Archive: https://discuss.ocaml.org/t/ann-qcheck-lin-and-qcheck-stm-0-2/12301/1

** Jan Midtgaard announced


I'm happy to share release 0.2 of ~qcheck-lin~ and ~qcheck-stm~ for black-box property-based testing.

- ~qcheck-lin~ requires little more than an interface description. It allows to test a library for sequential consistency, that is, whether results obtained from using it in parallel agree with some linear, single domain execution.

- ~qcheck-stm~ is a model-based, state-machine framework for both sequential and parallel testing. It allows to test an imperative interface against a pure model description, and thereby allows to express and test intended behaviour beyond a signature description.

For example, here's a minimal ~qcheck-lin~ test of a selection of the ~Stdlib~ ~Hashtbl~ interface:
#+begin_src ocaml
module HashtblSig =
struct
  type t = (char, int) Hashtbl.t
  let init () = Hashtbl.create ~random:false 42
  let cleanup _ = ()

  open Lin
  let a,b = char_printable,nat_small
  let api =
    [ val_ "Hashtbl.add"    Hashtbl.add    (t @-> a @-> b @-> returning unit);
      val_ "Hashtbl.remove" Hashtbl.remove (t @-> a @-> returning unit);
      val_ "Hashtbl.find"   Hashtbl.find   (t @-> a @-> returning_or_exc b);
      val_ "Hashtbl.mem"    Hashtbl.mem    (t @-> a @-> returning bool);
      val_ "Hashtbl.length" Hashtbl.length (t @-> returning int); ]
end

module HT = Lin_domain.Make(HashtblSig)
;;
QCheck_base_runner.run_tests_main [
  HT.lin_test ~count:1000 ~name:"Hashtbl DSL test";
]
#+end_src

Running this test quickly finds a minimal counterexample to illustrate that ~Hashtbl~ is not safe to use in
parallel:
#+begin_example
Messages for test Hashtbl DSL test:

  Results incompatible with sequential execution

                                    |
                        Hashtbl.add t '<' 0 : ()
                                    |
                 .------------------------------------.
                 |                                    |
     Hashtbl.add t 'a' 0 : ()             Hashtbl.remove t '<' : ()
       Hashtbl.length t : 0
#+end_example

We presented preliminary work on both these libraries at the OCaml Workshop 2022. The libraries furthermore
underlie our continuing effort to test the multicore runtime of OCaml 5.x, and have helped identify several issues.

The 0.2 release adds a range of features and bugfixes, including support for OCaml 4.12.x, 4.13.x and 4.14.x
without the ~Domain~ and ~Effect~ modes.

Detailed release notes and more information is available from the GitHub repository:
  https://github.com/ocaml-multicore/multicoretests

Happy testing!
      



* Melange 1.0 â€“ compile OCaml / ReasonML to JavaScript
:PROPERTIES:
:CUSTOM_ID: 11
:END:
Archive: https://discuss.ocaml.org/t/ann-melange-1-0-compile-ocaml-reasonml-to-javascript/12305/1

** Antonio Nuno Monteiro announced


The Melange team and I are thrilled to announce the release of Melange 1.0 today, marking a major milestone in the
life of the project. This release represents the culmination of many months of hard work and incredible
collaboration.

Melange, which [[https://anmonteiro.com/2021/03/on-ocaml-and-the-js-platform/][started as a fork of BuckleScript]],
was created with the vision of maintaining compatibility with OCaml and providing the best OCaml experience within
the modern JavaScript ecosystem. Today, we are proud to present Melange 1.0, a mature and reliable tool for
compiling OCaml to efficient and readable JavaScript that teams rely on [[https://tech.ahrefs.com/ahrefs-is-now-built-with-melange-b14f5ec56df4][to deliver complex OCaml / ReasonML
applications]].

[[https://ocaml.org/p/melange/1.0.0][Get it now]]:

#+begin_src shell
$ opam install melange.1.0.0
#+end_src

*** Highlights

Melange 1.0 radically improves user experience. This release focuses on robustness, OCaml compatibility and
developer experience: Melange is fully embracing the [[https://ocaml.org/docs/platform][OCaml Platform]] to make it
easy and reliable for OCaml users to target JavaScript.

**** Dune Integration

Integrating with Dune was our biggest priority. [[https://discuss.ocaml.org/t/ann-dune-3-8-0/12291][Dune 3.8]],
released very recently, adds Melange support by understanding the following types of stanzas:

#+begin_src lisp
(library
  (modes melange) ;; <- new Melange mode
)

;; emit JS to ~js-output~ folder in this
;; directory
(melange.emit
 (target js-output))
#+end_src

In Melange 1.0, the Dune integration is the officially supported workflow to build Melange projects. It provides
robust rule generation, static assets support (your HTML / CSS / SVG / images), seamless editor integration (e.g.
with OCaml LSP or Merlin).

**** Documentation

With Melange 1.0, we're also launching a new documentation effort, [[https://melange.re][melange.re]]. This website
should currently be considered a work in progress, and we're looking for feedback on how to best explain the
Melange workflow and its available features. Feel free to get in touch in the [[https://github.com/melange-re/melange-re.github.io][OSS
repository]].

Additionally, the Dune documentation includes [[https://dune.readthedocs.io/en/latest/melange.html][reference
materials]] specific to using Melange with Dune.

**** Everything else

***** Wider OCaml version support

Melange was previously only available on OCaml 4.14. In this release, we've widened that range to versions of OCaml
starting from version 4.13. This includes the OCaml 5 release line and allows Melange projects to share the same
OCaml compiler switch as e.g. server-side projects.

Editor integration is the only caveat: it only works on OCaml 4.14, since Melange emits [[https://ocaml.org/p/ocaml-base-compiler/4.14.1/doc/Cmt_format/index.html][~.cmt~
artifacts]] (used by e.g. LSP) targeting
the OCaml 4.14 binary format.

***** Multiple syntaxes

Dune supports [[https://reasonml.github.io/][ReasonML]] out of the box via
[[https://dune.readthedocs.io/en/stable/overview.html#term-dialect][dialects]], keeping ReasonML support in Melange
unchanged from a user perspective. Internally, however, Melange 1.0 has dropped any knowledge of ReasonML, relying
on the existing, battle-tested Dune support for dialects instead.

A [[https://ocaml.org/p/rescript-syntax/1.0.0][~rescript-syntax~]] package is part of the Melange release too. It
enables support for ReScript syntax in Melange, which Dune also supports. Keep in mind, however, that newer
ReScript features are unlikely to be supported by this best-effort compatibility package.

***** Separate PPX

A big benefit of deep integration with the OCaml platform is having the freedom to assume that a native toolchain
is present. That made it possible to unbundle the Melange distribution into a few separate components.

Melange now ships with a ~melange.ppx~ preprocessor based on [[https://ocaml-ppx.github.io/ppxlib][Ppxlib]] that can
be added to ~(preprocess (pps melange.ppx))~, as per [[https://dune.readthedocs.io/en/stable/reference/preprocessing-spec.html][Dune's preprocessing
specification]].

The React JS PPX (for Reason + JSX) has also been extracted and is now distributed separately as
[[https://ocaml.org/p/reactjs-jsx-ppx/1.0.0][~reactjs-jsx-ppx~]].

***** Enabling modern JS workflows

The Melange design in Dune was designed from day one with the goal of  embracing the JavaScript platform:

- The Dune integration generates JavaScript files in a predictable way
    - The resulting layout works well with the Node.js [[https://nodejs.org/api/modules.html#all-together][module resolution algorithm]], which most bundlers understand.
    - The JS output layout is [[https://melange.re/v1.0.0/build-system/#javascript-artifacts-layout][documented here]].
- To exercise modern workflows, Melange has been tested in a [[https://nextjs.org/][Next.js]] application using [[https://react.dev/blog/2020/12/21/data-fetching-with-react-server-components][React Server Components]], and the available constructs were deemed sufficient to enable similar use cases.

***** Full list of changes:

The full list of changes can be consulted [[https://github.com/melange-re/melange/blob/main/Changes.md][here]].

*** Support & Sponsorship

The effort that went into this release would not have been possible without the support of many.

We'd like to thank everyone who made it possible:

- [[https://ahrefs.com/][Ahrefs]] has shown interest in Melange [[https://tech.ahrefs.com/building-ahrefs-codebase-with-melange-9f881f6d022b][since its first announcement]]. Since October 2022, Ahrefs's crucial sponsorship has made it possible to [[https://tech.ahrefs.com/ahrefs-is-now-built-with-melange-b14f5ec56df4][build its codebase with Melange]] and work on this release.
- [[https://www.qwick.com/][Qwick]], who has been running Melange since November 2022, providing invaluable feedback, financial backing and an open-minded team willing to try new directions.
- The [[https://ocaml-sf.org/][OCaml Software Foundation]] previously [[https://twitter.com/_anmonteiro/status/1589044352479035393][committed funding]] for the Melange project in October 2022, and has recently approved a new round of OSS sponsorship.
- [[https://github.com/sponsors/anmonteiro/][My (Antonio) sponsors]] on GitHub, both past and present

We'd also like to thank the following notable contributors to this release:

- [[https://github.com/rgrinberg][Rudi Grinberg]], for his indispensable guidance and direction on the design and implementation of the Dune integration.
- [[https://github.com/jchavarri][Javier ChÃ¡varri]], for migrating a huge production codebase at Ahrefs to Melange, working on the Dune integration, the Melange documentation effort and providing vital feedback to the project.
- [[https://github.com/davesnx][David Sancho]], for trying out our most bleeding edge ideas and providing early feedback on how to move forward with ways that encompass the whole ecosystem.

*** Looking Forward

We are enthusiastic about the progress we have made and the positive feedback we have received from the community.
We remain committed to continuously improving Melange, ensuring it remains a robust and efficient tool for OCaml
developers targeting the JavaScript platform.

Our [[https://docs.google.com/document/d/1279euT9LeJIkwAUYqazqeh2lc8c7TLQap2_2vBNcK4w/][Q2 2023 roadmap]] includes
most of the goals that we set out to achieve over the past few months, and some of what we're thinking about
working in the months ahead. Melange 1.0 only marks the beginning of our journey towards the best OCaml experience
on the JS platform.

Finally, we would like to extend our deepest thanks to everyone who has supported the project, whether through code
contributions, testing, or providing feedback. This is your achievement as much as it is ours, and we look forward
to continuing this journey together.
      



* Debugging Native Code in "Second OCaml" YouTube Video
:PROPERTIES:
:CUSTOM_ID: 12
:END:
Archive: https://discuss.ocaml.org/t/ann-debugging-native-code-in-second-ocaml-youtube-video/12315/1

** jbeckford announced


In response to an earlier post
(https://discuss.ocaml.org/t/enhancing-ocaml-debugging-experience-in-visual-studio-code/12236/4?u=jbeckford) I've
uploaded a video on YouTube.

Direct Link: [[https://youtu.be/OV19_FqAUCw][https://youtu.be/OV19_FqAUCw]]

Quick Summary: Pre-requisite skill is the ability to compile your own OCaml compiler. Only macOS and Linux.
Breakpoints and single-stepping; no display of OCaml values.

Hopefully it will be the first of several if a few people subscribe or comment. The video, and others that I may
make for that new channel, are *not for OCaml beginners*.

/Aside: Personally, I don't become a beginner in a new subject without first having a glimpse of what I can accomplish in that subject. My expectation is that the people curious about OCaml may land on a few videos and then become beginners./

Since this is my very first YouTube video, I'd appreciate feedback!
      



* Sandmark nightly now supports latency profiling
:PROPERTIES:
:CUSTOM_ID: 13
:END:
Archive: https://discuss.ocaml.org/t/ann-sandmark-nightly-now-supports-latency-profiling/12318/1

** Puneeth Chaganti announced


[[https://sandmark.tarides.com/][Sandmark nightly]] now monitors tail latency of sequential and parallel applications
enabled by new features in OCaml 5.

https://global.discourse-cdn.com/business7/uploads/ocaml/optimized/2X/2/28bed5afb55f4d8182f7b83913d7d73d666eb835_2_1380x404.png

[[https://sandmark.tarides.com/?app=sequential-latency&pausetimes_seq_00=turing&pausetimes_seq_find_by=hostname&pausetimes_seq_10=turing&pausetimes_seq_01=20230601&pausetimes_seq_12=%5B%27turing_5.2.0%2Btrunk%2Bbartoszmodelski%2Bpr12212%2Bpausetimes_seq_20230530_a6f309f%27%5D&pausetimes_seq_11=20230530&pausetimes_seq_02=turing_5.2.0%2Btrunk%2Bpausetimes_seq_20230601_224c14c&pausetimes_seq_num_variants=2][Click to see the Sequential latency benchmark run]]

https://global.discourse-cdn.com/business7/uploads/ocaml/optimized/2X/b/b849c2316026f43d0c2cf2855df298177339d1c7_2_1380x938.jpeg

[[https://sandmark.tarides.com/?app=parallel-latency&pausetimes_par_num_variants=2&pausetimes_par_01=20230531&pausetimes_par_find_by=hostname&pausetimes_par_02=navajo_5.2.0%2Btrunk%2Bpausetimes_par_20230531_224c14c&pausetimes_par_00=navajo&pausetimes_par_12=navajo_5.2.0%2Btrunk%2Bpausetimes_par_20230526_8778780&pausetimes_par_10=navajo&pausetimes_par_11=20230526][Click here to see the Parallel latency benchmark run]]

*** Instrumented runtime of the past

In the past, Sandmark used to support monitoring GC latencies using the instrumented runtime that was present in
OCaml 4. But this GC latency feature was disabled due to breaking changes in Sandmark when moving from OCaml 4 to
OCaml 5. It is also useful to note that the instrumented runtime wrote to a file, and had a noticeable impact on
the program speed. As a result, this instrumentation had to be enabled with a compile-time flag that linked the
instrumented runtime with the application rather than the default runtime. The instrumented runtime was used to
generate the graphs that were used in the ICFP paper, [[https://kcsrk.info/papers/retro-parallel_icfp_20.pdf][Retrofitting Parallelism onto
OCaml]] (Fig 10 and Fig 12). However, given its cost, the
instrumented runtime was seen as only to be used by GC hackers for performance debugging.

*** Latency profiling through olly

OCaml 5 supports [[https://v2.ocaml.org/releases/5.0/api/Runtime_events.html][Runtime Events]] --- a new feature that
enables continuous monitoring of production applications. The key differences to the earlier instrumented runtime
approach are

1. Instead of a file, the events are now written to a shared in-memory ring. The events may be read out by an external process from this ring.
2. Some of the frequent (expensive) probes associated are eschewed to keep the costs low. The expensive probes are still available using the instrumented runtime.

Due to this design, every OCaml 5 program may be continuously monitored for performance, not just the ones compiled
with the instrumented runtime. On top of this runtime events feature, we have built
[[https://github.com/tarides/runtime_events_tools][olly]], an observability tool for OCaml programs. Olly can extract
traces of GC events that can be viewed by [[https://perfetto.dev/][Perfetto]] and also produce a short report on GC
behaviour including tail latency profiles.

The Sandmark team has now replaced the old latency profiling feature developed over OCaml 4 instrumented runtimes
to using olly to generate the profiles. (See Sandmark PR [[https://github.com/ocaml-bench/sandmark/pull/424][here]]).
Now, the OCaml compiler is continuously monitored not only for speed and memory usage, but also for latency.

*** Call for action

If you are interested in profiling and analysing the performance of the development branch of the OCaml compiler,
please submit your branch through [[https://github.com/ocaml-bench/sandmark-nightly-config/][Sandmark Nightly
Config]].
      



* Update on Eio (effects-based direct-style IO for OCaml 5)
:PROPERTIES:
:CUSTOM_ID: 14
:END:
Archive: https://discuss.ocaml.org/t/update-on-eio-effects-based-direct-style-io-for-ocaml-5/10395/3

** Thomas Leonard announced


With Eio 0.10 just released, it's time for another update! Since the above post (which was for Eio 0.5), some of
the bigger changes are:

- A new eio_posix backed for Unix-type systems provides much better performance than the old libuv one. Removing libuv has also made it safe to share file-descriptors between domains, so you can now accept a connection with one domain and handle it with another, for example.
- There is now an [[https://github.com/ocaml-multicore/eio#running-processes][API for spawning sub-processes]].
- Networking changes include better support for datagram sockets and the new [[https://ocaml-multicore.github.io/eio/eio/Eio/Net/index.html#running-servers][Eio.Net.run_server]] convenience function.
- Many of the data-structures (promises, conditions, semaphores and synchronous streams) are now lock-free, making them faster to use across multiple domains.
- It is safe to [[https://github.com/ocaml-multicore/eio#example-signal-handlers][handle signals in Eio]] now that ~Eio.Condition.broadcast~ is lock-free (signal handlers can't take locks, since they may have interrupted the thread holding the lock). Though note that reliable signal handling on OCaml 5 requires [[https://github.com/ocaml/ocaml/issues/12253][OCaml#12253]] to be fixed too.
- [[https://ocaml-multicore.github.io/eio/eio/Eio/Fiber/index.html#val-fork_seq][Fiber.fork_seq]] provides an easy way to create generator functions.
- Eio now supports [[https://github.com/ocaml-multicore/domain-local-await][domain-local-await]], which allows sharing e.g. [[https://github.com/ocaml-multicore/kcas][kcas]] data-structures across Eio and Domainslib domains.
- [[https://github.com/ocaml-multicore/eio/blob/main/README.md#error-handling][Error handling]] has been improved. You can now add extra context information to errors (e.g. an error opening a missing file will now include the path of the file). You can also choose how specific to be: e.g. you can catch all IO errors, all network errors, or all connection reset errors.
- There are also some experimental backends under development:
  - [[https://github.com/TheLortex/eio-solo5][eio_solo5]] is for MirageOS unikernels.
  -  [[https://github.com/ocaml-multicore/eio/pull/405][eio_js]] is for browsers.
  - eio_windows is for Windows - see [[https://github.com/ocaml-multicore/eio/issues/125][#125]] if you'd like to help out.

A more detailed list of changes can be found in the [[https://github.com/ocaml-multicore/eio/releases][release
notes]].

Eio's [[https://github.com/ocaml-multicore/eio/blob/main/README.md][README.md]] provides an introduction to most of
the features.

If you'd like to get involved, the new [[https://github.com/ocaml-multicore/eio/blob/main/HACKING.md][HACKING.md]]
document explains the structure of the code for people who want to contribute to Eio, and there are regular [[https://discuss.ocaml.org/t/eio-developer-meetings/12207][Eio
developer meetings]] for anyone who wants to get involved.
      



* Initial Emissions Monitoring of the OCaml.org Infrastructure
:PROPERTIES:
:CUSTOM_ID: 15
:END:
Archive: https://discuss.ocaml.org/t/initial-emissions-monitoring-of-the-ocaml-org-infrastructure/12335/1

** Patrick Ferris announced


I'm happy to announce that some initial emissions monitoring has been added to the OCaml.org infrastructure. A more
detailed write up can be found at https://infra.ocaml.org/2023/05/30/emissions-monitoring.html. This is a first
step in accurately measuring the amount of emissions we are generating. There was a discuss thread touching on some
of this a while ago https://discuss.ocaml.org/t/ocaml-carbon-footprint/8580.

I think there are two important next tasks: getting full coverage of all of the infrastructure machines and making
the data publicly available. I hope to work on this (in an open-source way) in the future, if anyone else is
interested do let me know!

Thanks to [[https://tarides.com][Tarides]] (who funded the initial work on this) and to @lambda_foo, Mark Elvers and
@avsm for helping with the deployment and ideas for measuring emissions. There is an issue on the
ocaml/infrastructure repository for the next steps https://github.com/ocaml/infrastructure/issues/47 :seedling:
      



* Other OCaml News
:PROPERTIES:
:CUSTOM_ID: 16
:END:
** From the ocaml.org blog


Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[http://cambium.inria.fr/blog/two-variants-of-the-bind-rule][Two variants of the Bind rule]]
- [[https://blog.janestreet.com/oxidizing-ocaml-locality/][Oxidizing OCaml: Locality]]
- [[https://signals-threads.simplecast.com/episodes/the-future-of-programming-with-richard-eisenberg-pOktpZ_e][The Future of Programming with Richard Eisenberg]]
- [[https://frama-c.com/fc-versions/cobalt.html][Beta release of Frama-C 27.0~beta (Cobalt)]]
- [[http://gallium.inria.fr/blog/function-specs-2023-05-12][Specifying Functions: Two Styles]]
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
