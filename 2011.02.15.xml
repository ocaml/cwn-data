<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2011.02.15</cwn_date>
    <cwn_prev>2011.02.08</cwn_prev>
    <cwn_next>2011.02.22</cwn_next>
    <cwn_date_text>February 08 to 15, 2011</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>unused function detection</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2011-02/msg00043.html</cwn_url>
      <cwn_who>Radu Grigore asked and Gabriel Scherer replied</cwn_who>
      <cwn_what>
&gt; Is there a tool that finds unused functions?
&gt; 
&gt; It seems there was none in 2004:
&gt;   https://groups.google.com/d/topic/fa.caml/D8aWkamzr-U/discussion

You may be interested in the Oug [1] tool

 [1] http://home.gna.org/oug/

&gt; Oug is a code analysis tool building reference graphs from OCaml
&gt; code, that is graphs representing which elements (value, module,
&gt; class, ...) reference which elements. We will also call these graphs
&gt; dependency graphs, each edge of the graph being annotated by a
&gt; dependency kind.
&gt; It comes with the Ouglib library to be able to embed the analyzer in
&gt; other OCaml applications.
&gt; From the graph, various outputs can be obtained: list of elements
&gt; not referenced anywhere (useless elements and potential dead code),
&gt; various Graphiz graphs, ...
      </cwn_what>
      <cwn_who>Jérôme Benoit also suggested</cwn_who>
      <cwn_what>
I'm using https://github.com/facebook/pfff at work. 

Written in OCaml. Easy to extend. I've fallen in love with it :)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Mail GSoC</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2011-02/msg00083.html</cwn_url>
      <cwn_who>Christophe TROESTLER announced</cwn_who>
      <cwn_what>
Dear OCaml developers,

Google Summer of Code has been announced and we think that the OCaml
Community should participate to this event. We have setup a project on
the OCaml Forge to coordinate our effort.

We invite all students and would-be mentors to visit our wiki:
https://forge.ocamlcore.org/plugins/mediawiki/wiki/gsoc-team/index.php/Main_Page

- If you are willing to be a mentor, you can make proposal (this will
  only be "draft" proposal, until one student pick it) and put the
  name on the mentor list:

  
https://forge.ocamlcore.org/plugins/mediawiki/wiki/gsoc-team/index.php/Main_Page#Contact

- Students that would like to join can contact mentors of draft
  proposals or make new one and discuss them with possible mentors:

  
https://forge.ocamlcore.org/plugins/mediawiki/wiki/gsoc-team/index.php/GSoC2011/Applying

The first step we will have to pass is to have Google accept the OCaml
Community as a Mentoring organization.  To reach this goal, ideas are
welcome.  Some documents are available on this topic here:
http://www.google-melange.com/

We also have put online a first version of our answers to Google
questions (to be completed) :
https://forge.ocamlcore.org/plugins/mediawiki/wiki/gsoc-team/index.php/MetaOrganization
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Bisect 1.1 release</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2011-02/msg00084.html</cwn_url>
      <cwn_who>Xavier Clerc announced</cwn_who>
      <cwn_what>
This post announces the 1.1 release of the Bisect project, whose goal is to 
provide
a code coverage tool for the Objective Caml language.

Home page: http://bisect.x9c.fr

Main changes since 1.0:
  - update for Objective Caml 3.12.0
  - new build system (ocamlbuild-based)
  - reorganization of 'src' directory
  - 'instrument.cmo' renamed to 'bisect_pp.cmo' (and now depends on 'str.cma')
  - instrumentation modes ('safe', 'fast', and 'faster')
  - '-exclude' command-line switch to exclude functions from instrumentation
  - '(*BISECT-MARK*)' / '(*BISECT-VISIT*)' comments to mark lines
  - '(*BISECT-IGNORE-BEGIN*)' / '(*BISECT-IGNORE-END*)' / '(*BISECT-IGNORE*)'
    comments to ignore parts of source file
  - bug #51: unportable use of 'which'
  - bug #52: thread-compatibility module does not compile
  - bug #59: instrumented code is 20 times slower
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

Barista:
  &lt;https://forge.ocamlcore.org/projects/barista/&gt;

Bisect 1.1:
  &lt;https://forge.ocamlcore.org/forum/forum.php?forum_id=772&gt;

ocamleditor-1.6.0 released:
  &lt;https://forge.ocamlcore.org/forum/forum.php?forum_id=771&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>