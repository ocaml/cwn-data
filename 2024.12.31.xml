<cwn>
  <cwn_head>
    <cwn_date>2024.12.31</cwn_date>
    <cwn_prev>2024.12.24</cwn_prev>
    <cwn_next>2025.01.07</cwn_next>
    <cwn_date_text>December 24 to 31, 2024</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Using Property-Based Testing to Test OCaml 5</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/blog-using-property-based-testing-to-test-ocaml-5/14550/2</cwn_url>
      <cwn_who>Jan Midtgaard announced</cwn_who>
      <cwn_what>
I've written up part 2 on our effort to utilize property-based testing to stress test the OCaml 5 run time system. Happy Christmas reading! üéÑüéÖ üéÅ üòÑ

https://tarides.com/blog/2024-12-23-multicore-property-based-tests-for-ocaml-5-challenges-and-lessons-learned/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>First release of elm_playground</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-first-release-of-elm-playground/15838/1</cwn_url>
      <cwn_who>Yoann Padioleau announced</cwn_who>
      <cwn_what>
It is my pleasure to announce the first release of ~elm_playground~, an OCaml package that allows you to easily create /pictures/, /animations/, and even /video games/ in a portable way using an API that really simplifies how to view the computer and its devices (the screen, keyboard, and mouse). The library offers a native backend to run the games from a terminal and a web backend to run the games in your browser.

This is a port of the excellent Elm playground package
https://github.com/evancz/elm-playground to OCaml.

You can install it via OPAM via ~opam install elm_playground~.

Here are a few examples of code using the library.

First a "picture" app:

#+begin_src ocaml
(* from https://elm-lang.org/examples/picture *)
open Playground

let app =
  picture [
    rectangle brown 40. 200.
      |> move_down 80.;
    circle green 100.
      |> move_up 100.;
  ]

let main = Playground_platform.run_app app
#+end_src

https://global.discourse-cdn.com/flex020/uploads/ocaml/optimized/2X/7/76fc1990fe116911097764df986f64fed41c28a4_2_470x500.png

Then an "animation" app:
#+begin_src ocaml
(* from https://elm-lang.org/examples/animation *)
open Playground

let view time = [
    octagon darkGray 36.
      |> move_left 100.
      |> rotate (spin 3. time);
    octagon darkGray 36.
      |> move_right 100.
      |> rotate (spin 3. time);
    rectangle red 300. 80.
      |> move_up (wave 50. 54. 2. time)
      |> rotate (zigzag (-. 2.) 2. 8. time);
  ]

let app =
  animation view

let main = Playground_platform.run_app app
#+end_src

https://global.discourse-cdn.com/flex020/uploads/ocaml/optimized/2X/e/e91563cbb6a0863570bbb19b057f5e8dae7164bf_2_470x500.png

And finally a "game" app:
#+begin_src ocaml
(* from https://elm-lang.org/examples/mouse *)
open Playground

let view _computer (x, y) = [ 
  square blue 40.
   |> move x y
 ]

let update computer (x, y) =
  (x +. to_x computer.keyboard, y +. to_y computer.keyboard)

let app = 
  game view update (0., 0.)

let main = Playground_platform.run_app app
#+end_src

https://global.discourse-cdn.com/flex020/uploads/ocaml/optimized/2X/2/24e8ffe672cda66c6a49e02013347cda0640f771_2_470x500.png

Note that you can write more complex games. For example here is a screenshot of a toy tetris app:

https://global.discourse-cdn.com/flex020/uploads/ocaml/original/2X/4/4ded1d55c9994935c5ec3786ae549ba3a71b8eb6.png

For more information, follow the README at https://github.com/aryx/ocaml-elm-playground 

And merry christmas!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>First release of flatunionfind</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-first-release-of-flatunionfind/15847/1</cwn_url>
      <cwn_who>Fran√ßois Pottier announced</cwn_who>
      <cwn_what>
I am pleased to announce the first release of ~flatunionfind~, a small library that offers a union-find data structure, stored inside a vector.

This library is an alternative to my existing library ~unionFind~, and could be faster or slower, depending on your use case.

#+begin_example
  opam update
  opam install flatunionfind
#+end_example

For more information, see the [documentation](https://cambium.inria.fr/~fpottier/flatunionfind/doc/flatunionfind/).

Happy unions and finds,
FP.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Serving This Article from RAM with Dream for Fun and No Real Benefit</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/serving-this-article-from-ram-with-dream-for-fun-and-no-real-benefit/15856/1</cwn_url>
      <cwn_who>Thomas Letan announced</cwn_who>
      <cwn_what>
I‚Äôve been playing with my website lately, more precisely on how the contents is delivered to the readers. Before, it was merely a boring, static website delivered by Nginx; now it‚Äôs a Dream-powered HTTP server with all the pages in-memory.

[I‚Äôve written about this fun, little project](https://soap.coffee/~lthms/posts/DreamWebsite.html), and you may find the article interesting. It covers several topis: fun experiments with the Dream library, HTTP arcane one cannot ignore if they want to implement a browser-friendly server, and even some Docker because why not!

Happy holidays everyone!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocaml.org blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://soap.coffee/~lthms/posts/DreamWebsite.html][Serving This Article from RAM with Dream for Fun and No Real Benefit]]
- [[https://tarides.com/blog/2024-12-23-multicore-property-based-tests-for-ocaml-5-challenges-and-lessons-learned][Multicore Property-Based Tests for OCaml 5: Challenges and Lessons Learned]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
