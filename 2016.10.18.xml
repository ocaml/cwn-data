<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2016.10.18</cwn_date>
    <cwn_prev>2016.10.11</cwn_prev>
    <cwn_next>2016.11.01</cwn_next>
    <cwn_date_text>October 11 to 18, 2016</cwn_date_text>
  </cwn_head>
  <cwn_body>
      <cwn_entry>
      <cwn_title>Be Sport is hiring in Paris</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2016-10/msg00067.html</cwn_url>
      <cwn_who>Philippe Wang announced</cwn_who>
      <cwn_what>
Jobs and internships
OCaml developers and/or data scientist
Be Sport – Paris (75002)

Be Sport SAS is looking for OCaml developers (engineers and interns) to
participate in the creation of its social network dedicated to sport. Knowledge
of data science and machine learning is welcome (but not mandatory). Contact us
at
jobs@besport.com

THE COMPANY:
Be Sport is a young company working on a Web and mobile application to connect
athletes and sport fans, around sport events. Designed as a social network, it
targets both amateurs and professionals, allowing everyone to create and
organize its events, to disseminate information and to receive personalized
news. A first version of the responsive Web application is already online and
mobile applications are available on Google Play and Apple app store. Be Sport
is a major contributor to the Ocsigen project (Js_of_ocaml, Eliom, ...) and many
open source libraries. Be Sport premises are located in the Sentier district, in
the center of Paris (metro station: Réaumur-Sébastopol).

WORK:
The Web and mobile applications are entirely written in OCaml, using Ocsigen. 
The developers will be integrated in the programming team: participation in
the writing of specifications, implementation (client / server), stylesheets,
tests, contribution to libraries and Ocsigen … They will initially work on
improving existing features, before progressively taking the lead on some
components.

SKILLS:
Candidates must have some expertise on some of the following technologies:
* Typed functional languages, especially OCaml (and Ocsigen Js_of_ocaml/Eliom)
* Machine learning, data science
* Databases
* Web programming (CSS, _javascript_…)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>angstrom</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2016-10/msg00070.html</cwn_url>
      <cwn_who>Continuing this thread, Anil Madhavapeddy announced</cwn_who>
      <cwn_what>
I just wanted to thank Spiros for a great recent OCaml Workshop 2016 talk on his
work on the webstack and point to his talk:
https://www.youtube.com/watch?v=tTqqu4xh4UY&amp;list=PLnqUlCo055hVHS08n-Po_T4K2eNNahkg9&amp;index=13
(livenotes as it happened:
http://icfp2016.mirage.io/OCaml/improving-the-ocaml-webstack-.md )

And also one by Romaine on using Angstrom in his Mr MIME email parsing library:
https://www.youtube.com/watch?v=kQkRsNEo25k&amp;index=12&amp;list=PLnqUlCo055hVHS08n-Po_T4K2eNNahkg9
(livenotes: http://icfp2016.mirage.io/OCaml/whos-got-your-mail-mr-mime.md )

I've (along with the rest of the MirageOS team) have started discussing the
integration of Angstrom (and its companion serialisation library Faraday) into
the Cohttp stack to simplify its parsing and reduce our dependency on
allocation-heavy patterns such as regular expressions, and expect to make
progress on this in the next few months (as well as try out Angstrom on
low-level libraries such as Mirage TCP/IP and DNS)

If you are interested, please get in touch with me and I can redirect you to the
appropriate issue repository for your desired features for those protocol
ibraries.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at OCaml Planet,
&lt;http://ocaml.org/community/planet/&gt;.

Forge migration to a new host, done
 &lt;http://forge.ocamlcore.org/forum/forum.php?forum_id=945&gt;

Forge migration to a new host, now
 &lt;http://forge.ocamlcore.org/forum/forum.php?forum_id=944&gt;

Monty Hall
 &lt;http://blog.shaynefletcher.org/2016/10/monty-hall.html&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
