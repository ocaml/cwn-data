<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2004.10.12</cwn_date>
  <cwn_prev>2004.10.05</cwn_prev>
  <cwn_next>2004.10.19</cwn_next>
  <cwn_date_text>05 to 12 October, 2004</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>new 64 bit SPARC code generation patch</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200410/msg00035.html</cwn_url>
    <cwn_who>John Carr announced</cwn_who>
    <cwn_what>
A set of patches to ocaml 3.08.1 to generate 64 bit native code on
SPARC systems can be found at this URL:
http://www.mit.edu/~jfc/ocaml-3.08.1-sparc64.tar.gz
This is a new version of the patch I released a few years ago,
rewritten and updated to work with the latest ocaml.

32 or 64 bit mode is selected at configure time based on the compiler
and options passed to the configure script.  In 32 bit mode some
optimizations are added for SPARC V9 when using the -march=v9 option.
I also changed the default architecture level from v7 to v8 in 32 bit
mode because it has been over a decade since Sun sold any workstations
without hardware multiply.

Applications may benefit from 64 bit code if
1. They use objects, other than bigarrays, larger than ~32 MBbyte
2. Total memory use exceeds ~4Gbyte
3. Extensive use is made of int64
4. Extensive use is made of heap-allocated floating point values

On the other hand, the cost of 64 bit code is increased memory use.
A program that I thought would benefit because it used many boxed
integers turned out to run slower.

If you email me to say you are using the patches I will inform you of
bug fixes.  Consider this beta quality because of limited testing.
In addition to any bugs in my code, the machine-independent code
generator appears not to have been tested on a big-endian 64 bit
system.  (I do not think that the ocaml team at INRIA has such a
system.)

I have only tested Solaris 9.  I have no reason to believe that Linux
will not work, but I have no way to test.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>OCaml and doxygen?</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200410/msg00036.html</cwn_url>
    <cwn_who>Vasili Galchin asked</cwn_who>
    <cwn_what>
To my knowledge http://www.doxygen.org only works with C/C++. Is there any
general-purpose tool that allows one to do something like literate programming
with OCaml?
    </cwn_what>
    <cwn_who>David Overton answered</cwn_who>
    <cwn_what>
We&apos;ve been using ocamldoc, which comes with the OCaml distribution,
quite successfully for producing documentation.  It has a few quirks,
such as renaming type parameters in signatures to &apos;a, &apos;b, &apos;c, ... (not
helpful when you&apos;re trying to use more descriptive names), but is quite
powerful.  I believe it&apos;s fairly similar to doxygen, but have not used
the latter.
    </cwn_what>
    <cwn_who>Charles-Albert Lehalle added</cwn_who>
    <cwn_what>
ocamaweb is a good solution too, but has at this stage not extension (xml
configuration file) for all languages.
it works with MATLAB, awk, visual basic, SAS, etc (in fact, with languages
having only line comments).
it is according to me a good balance between javadoc/doxygen tools (too
close to code structure) and web systems (that need a compilation/tangle
to produce code).
ocamaweb is widely used at miriad technologies for matlab documentations.

http://sourceforge.net/projects/ocamaweb

http://www.literateprogramming.com/ftools.html
    </cwn_what>
    <cwn_who>John Skaller suggested</cwn_who>
    <cwn_what>
Interscript (http://interscript.sf.net), Funnelweb,
Noweb, NuWeb, and half a dozen other LP tools work just fine
with *all* languages.

Ocamldoc (available in the standard distro) is
a language dependent documentatiuon tool
like perldoc, doxygen, javadoc etc,

However, please don&apos;t confuse this with LP.
LP is universal but invasive, doc tools are language
dependent, don&apos;t interoperate, but aren&apos;t invasive.
    </cwn_what>
    <cwn_who>Jean-Christophe Filliatre said</cwn_who>
    <cwn_what>
I&apos;ve developed a literate programming tool for Ocaml, ocamlweb. See
http://www.lri.fr/~filliatr/ocamlweb/

You&apos;ll find many examples of ocamlweb output on this page:
http://www.lri.fr/~filliatr/software.en.html (looking at the .ps links)

Though ocamlweb  was inspired  by Knuth&apos;s WEB  it only  implements the
pretty-printing  and  indexing   features,  not  the  weaving  feature
(i.e. the ability to present pieces  of code in an arbitrary order). I
consider ocaml to be structured enough.  ocamlweb is assuming comments
to be written  in LaTeX (unless declared as  true comments that should
be ignored).

I wrote this  tool to get nice listings of  my code, following Knuth&apos;s
principle that a  program should be something as  beautiful as a book,
readable by a human (and not only a machine).
    </cwn_what>
    <cwn_who>Norman Ramsey said</cwn_who>
    <cwn_what>
We have over 10,000 lines of literate OCaml written using noweb.
http://www.eecs.harvard.edu/~nr/noweb/
    </cwn_what>
    <cwn_who>David Mentre added</cwn_who>
    <cwn_what>
demexp is also an ocaml program currently made of more than 5,500 lines
using noweb.

Nice point about noweb: it is language agnostic so, for example, demexp
XDR message description is also documented with noweb.

Weak point in relation with ocaml: no pretty-printing of OCaml code. It
should be doable using noweb plugin infrastructure and ocamlweb
pretty-printing code but nobody as done it yet.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Free VC++ compiler for the Native Win32 Port Built With MS Visual C?</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200410/msg00044.html</cwn_url>
    <cwn_who>Zeno asked</cwn_who>
    <cwn_what>
I am on a Win2k system and do not have Visual Studio.  I am interested
in generating native code in native mode.  I wonder if anyone could
tell me if one of the versions available on the net will allow me to
use the native Win32 port built with MS Visual C?

   Visual C++ 2005 Express Beta
      http://lab.msdn.microsoft.com/express/visualc/default.aspx
   Visual C++ 2003 Toolkit
      http://msdn.microsoft.com/visualc/vctoolkit2003/

Also, if only the 2003 Toolkit would work, would I need to install the
SDK?
      http://www.microsoft.com/msdownload/platformsdk/sdkupdate/

If MASM doesn&apos;t come with them, I think the readme file in the
downloads section gives me plenty of options there.  I&apos;m just not sure
if these .NET compilers will work or even if I am limited to a certain
version of VC++.
    </cwn_what>
    <cwn_who>Charles-Albert Lehalle answered</cwn_who>
    <cwn_what>
I am in the same situation, but under winXP.
All that I tried (and succeeded, thanks to email help from Nicolas
Cannasse) is to use ODLL, with microsoft visual compiler and linker steps.
I used XPSP2 PSDK (for libs and headers) and Visual C++ Toolkit 2003 (for
cl.exe and link.exe).

http://www.lehalle.net/clog/index.php?menu=display&amp;table=clog_news&amp;exact=141

hoping it can help you.
    </cwn_what>
    <cwn_who>Alain Frisch said</cwn_who>
    <cwn_what>
Here is a brief report of my experience with this issue:

http://caml.inria.fr/archives/200404/msg00823.html
    </cwn_what>
    <cwn_who>Shivkumar Chandra asked and Dmitry Bely answered</cwn_who>
    <cwn_what>
&gt; Someone mentioned the mingw toolchain as an alternative. My problem is
&gt; that apparently if you want to use camlidl on Windows platform you
&gt; *have* to use the MS toolchain. Is there any way to use camlidl with
&gt; cygwin (preferably) or mingw?

Yes, some time ago I have made changes to camlidl sources that allow to
compile it with mingw/cygwin-built Ocaml. All Win32 functionality is
supported including building COM DLLs. I can publish the patch to CVS
version of ocamlidl if you are interested.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Are you sure the new &quot;=&quot; of 3.08 is good ?</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200410/msg00056.html</cwn_url>
    <cwn_who>Christophe Raffalli said and Xavier Leroy answered</cwn_who>
    <cwn_what>
&gt; I spend one complete day to adapt Phox (my theorem prover) to 3.08
&gt; because the new = does not check first physical equality. Hopefully, the
&gt; backtracking ocamldebugger let me pin point the many &quot;=&quot; which were
&gt; looping, otherwise I would have spend a month !!!

If you get non-termination with the = comparison in 3.08, it means
your program is comparing cyclic data structures, which could also
have caused looping with the old = comparison.  It&apos;s just that the new =
loops &quot;more easily&quot; than the old one.  But I would argue that your
original code was living dangerously close to the edge.  Don&apos;t feel
bad: in developing 3.08 we found several instances of misuses of =
over cyclic structures (types) in the OCaml compiler...

&gt; I was assuming two things about equal:
&gt; - scan of block from left to right
&gt; - a test on adress equality on pointer before follwing the pointer
&gt; (which is now wrong in 3.08).

That was true of the old implementation, but has never been guaranteed.

As others mentioned, you can recover the behaviour above in 3.08
(it also works in earlier releases) as follows:

let (=?) x y = (Pervasives.compare x y = 0)

and use =? instead of = where appropriate.

&gt; So the comparison between both &quot;=&quot; gives
&gt;
&gt; old &quot;=&quot;:
&gt; - can have much better complexity of some specific data structure
&gt; - nan = nan =&gt; true
&gt;
&gt; new &quot;=&quot;
&gt; - can have a small linear speedup on some specific data structure
&gt; - nan = nan =&gt; false
&gt;

You&apos;re missing the essential point: the old &quot;=&quot; was inconsistent over
floats, i.e. you&apos;d get different results from the generic = and the
type-specialized = over floats.  Semantic consistency takes precedence
over efficiency.

&gt; Finally, the IEEE norm about floating point arithmetic is not perfect
&gt; yet.

Maybe not, but it&apos;s a consensus that took umpteenth years to achieve
(and got Kahan a Turing award), so one needs very very strong reasons
to depart from it.
    </cwn_what>
    <cwn_who>John Harrison said and Xavier Leroy answered</cwn_who>
    <cwn_what>
&gt; For LCF-style theorem provers, I think it&apos;s quite important that when
&gt; comparing terms (or similar tree structures) for equality, there should
&gt; be a quick &quot;yes&quot; when two high-level subgraphs are pointer eq. [...]
&gt; I guess like Christophe Raffalli I had just assumed this would be
&gt; the case based on long experience with ML-family languages, rather than
&gt; through any explicit discussion in the documentation.

I agree the behaviour your describe (x == y implies x = y) is very
reasonable.  Unfortunately, nan &lt;&gt; nan is also very reasonable, at
least if you believe in IEEE floats, and you cannot have both...

We agonized a long time on this issue before settling on the current
compromise: &quot;=&quot; is compatible with IEEE float equality, and
Pervasives.compare implements the behaviour you expect (early stop if ==).

&gt; Can you clarify what we need to do in order to guarantee this
&gt; behaviour?

As I said in an earlier post, you can do

  let (=?) x y = (Pervasives.compare x y = 0)

and use =? instead of = in places where you need the &quot;early stop&quot; behaviour.

I advise against Damien&apos;s suggestion of defining

  let (=) x y = (Pervasives.compare x y = 0)

because the predefined &quot;=&quot; operator is known to the compiler and is
type-specialized to much more efficient code when comparing ints,
floats or strings.  No such type specialization takes place when &quot;=&quot;
is defined in terms of Pervasives.compare.

Of course, if the speed of equality is critical, you can also define
your own comparison functions for the types of interest, or even (as
Damien suggested) implement hash-consing.

Hope this clarifies the issue.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Announcing Micmatch: High-Level Regexps for OCaml</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200410/msg00094.html</cwn_url>
    <cwn_who>Martin Jambon announced</cwn_who>
    <cwn_what>
Micmatch is a syntax extension of OCaml that allows an easy manipulation
of regular expressions.

Several features have been recently added, and now make it a functional
and handy tool for writing OCaml scripts as well as larger programs.

Micmatch was already providing these features:
  - a Caml-friendly syntax for defining and reusing regexps
    (ocamllex style with more features)
  - no runtime errors due to incorrect regexps
  - a dedicated toplevel
  - a support for regular expressions in the pattern matching constructs
    of OCaml (match ... with ...)

Now it also provides this:
  - a set of macros using a &quot;functional style&quot; (SEARCH, REPLACE,
    COLLECT, SPLIT, ...)
  - a small but useful library for common operations over textual data
  - the possibility of self-executable scripts on Unix systems
  - lazy quantifiers
  - possessive/atomic groups
  - a reference manual

Micmatch programs normally use the PCRE-OCaml library, but can also
use the Str library (with limited features).
    </cwn_what>
    <cwn_who>Martin Jambon added to give the URL</cwn_who>
    <cwn_what>
http://martin.jambon.free.fr/micmatch.html

Sorry for the inconvenience.

People will notice the OCaml logo by Olivier Grisel [1],
based on the famous walking Camel by Pascal Manoury.

Martin.

[1] http://champi.champiland.homelinux.org/~olivier/ocaml-logos.html
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>ocaml nae core foundation (cf-0.4)</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200410/msg00096.html</cwn_url>
    <cwn_who>James Woodyatt announced</cwn_who>
    <cwn_what>
The OCaml Network Application Environment (NAE) is a collection of
Objective Caml libraries to support the development of concurrent,
single-threaded Internet application servers.  Its &quot;core foundation&quot;
library (Cf) is currently the only package released in the project (the
others are in the planning and development phases, and are only
available by anonymous CVS).

See the SF.Net project page for more details and download links.

        http://sf.net/projects/ocnae/

The cf-0.4 package is a BETA candidate.  The latest release of Cf
contains only two small changes from the previous release:

        + Fix Makefile for architectures that do not support native
        compilers.
        + Fix serious bug in the [Cf_gadget] scheduler that caused some
        wires to be
          prematurely collected without delivering events to their receivers.

Here is an excerpt from the README:

===== OCaml NAE Core Foundation (cf) library =====

This directory contains the OCaml NAE Core Foundation library, which is
a
collection of miscellaneous extensions to the Objective Caml standard
library.

Highlighted features include:

- Functional streams and stream processors (extended).
- Functional bootstrapped skew-binomial heap.
- Functional red-black binary tree (associative array).
- Functional sets based on red-black binary tree.
- Functional real-time catenable deque.
- Functional LL(x) parsing using state-exception monad.
- Functional lazy deterministic finite automaton (DFA).
- Functional lexical analyzer (using lazy DFA and monadic parser).
- Functional substring list manipulation (message buffer chains).
- Gregorian calendar date manipulation.
- Standard time manipulation.
- System time in Temps Atomique Internationale (TAI).
- Unicode transcoding.
- Extended socket interface (supports IPv6 and UDP w/multicast).
- Universal resource identifier (URI) manipulation.
- I/O event multiplexing (with Unix.select).

Note: see the ISSUES file for a list of open problems in this release.

===== Required Components =====

This library requires the following external components:

- Objective Caml (v3.07+2 or newer)
- Findlib (tested with v0.8.1 and v1.0.4)

Principle development was on Mac OS X 10.3.  The final version of this
library also compiled successfully and passed all self-tests without
warnings
on Suse Linux 9.0 for x86-32.  Other platforms with POSIX-like
environments
should require only a minimal porting effort.

One major open issue: the extended socket interface is broken under
WIN32.
(The author invites help porting the library to other environments.)
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>libwww for OCaml</cwn_title>
    <cwn_url>http://caml.inria.fr/archives/200410/msg00101.html</cwn_url>
    <cwn_who>Richard Jones asked and Gerd Stolpmann answered</cwn_who>
    <cwn_what>
&gt; I wonder if anyone has done an OCaml binding for libwww[1].  A cursory
&gt; Google search doesn&apos;t turn up anything.
&gt;
&gt; I also wonder if people can comment on libwww vs. Curl (ocurl[2]).  I
&gt; wish to make requests to a webserver and receive the replies.  The
&gt; library must support cookies, and it would be better if it also
&gt; supported keepalives.
&gt;
&gt; [1] http://www.w3.org/Library/
&gt; [2] http://sourceforge.net/projects/ocurl

Netclient is your friend:

http://www.ocaml-programming.de/programming/netclient.html

It is a 100% O&apos;Caml implementation of HTTP/1.1. Take the &quot;experimental&quot;
version, it is quite stable. You get not only keepalives, but also
pipelining and parallel handling of several requests.

The only drawback is that it always downloads into memory.

I guess this library is the reason why there isn&apos;t a libwww binding...
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
