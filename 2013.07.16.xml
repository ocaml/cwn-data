<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2013.07.16</cwn_date>
    <cwn_prev>2013.07.09</cwn_prev>
    <cwn_next>2013.07.23</cwn_next>
    <cwn_date_text>July 09 to 16, 2013</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>OCaml-Top release 1.0.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2013-07/msg00064.html</cwn_url>
      <cwn_who>Louis Gesbert announced</cwn_who>
      <cwn_what>
OCamlPro is proud to announce the release of OCaml-Top 1.0.0

OCaml-Top is an interactive editor targeted at education, with a simple and
convenient interface:
an edition panel, with syntax coloration and automatic indentation, tightly
coupled with an ocaml toplevel to easily evaluate the code as you go.

It is available from OPAM and as a binary installer for Windows.

OCaml-Top is released under the terms of the GNU GPL v3.

Home page: http://typerex.org/ocaml-top.html
Source on Github: https://github.com/OCamlPro/ocaml-top

We hope you appreciate it, and it gives a better experience to students and
first-time users, especially on Windows.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>GADTs and associative container</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2013-07/msg00065.html</cwn_url>
      <cwn_who>Goswin von Brederlow asked, Lukasz Stafiniak remarked, and Leo White said</cwn_who>
      <cwn_what>
&gt; &gt; I'm wondering if one can have an ascociative container, like a Hashtbl.t
&gt; &gt; with dependent types (GADTs as the key, value depending on the key).
&gt; &gt; Something like this:
&gt; &gt;
&gt; &gt; module H = struct
&gt; &gt;  type ('a, 'b) t = ('a, 'b) Hashtbl.t
&gt; &gt;  let create : type a b . int -&gt; (a b, a) t =
&gt; &gt;         fun x -&gt; Hashtbl.create x
&gt; &gt;  let add : type a b . (a b, a) t -&gt; a b -&gt; a -&gt; unit =
&gt; &gt;        fun h k v -&gt; Hashtbl.add h k v
&gt; &gt;  let find : type a b . (a b, a) t -&gt; a b -&gt; a =
&gt; &gt;        fun h k -&gt; Hashtbl.find h k
&gt; &gt; end
&gt; &gt;
&gt; &gt; BUT:
&gt; &gt;
&gt; &gt;   let create : type a b . int -&gt; (a b, a) t =
&gt; &gt;                   ^^^
&gt; &gt; Error: Unbound type constructor b
&gt; &gt;
&gt; &gt; Is there some special syntax I'm missing or is it simply impossible to
&gt; &gt; declare such a container in the abstract?
&gt;
&gt; I think you need higher kinded types, not GADTs. Haskell has them, 
&gt; for example you can write code that only depends on the type class 
&gt; of "b" (which is parameterized by "a"), and "b" has signature 
&gt; "* -&gt; *" or something like that.

That type is indeed higher-kinded. OCaml does support higher-kinded
types but not in the core type system: you need to use functors.

For example,

&gt; &gt; let create : type a b . int -&gt; (a b, a) t =
&gt; &gt;        fun x -&gt; Hashtbl.create x

could be written as:

  module Create (B: sig type 'a t end) = struct
    let f x : ('a B.t, 'a) Hashtbl.t = Hashtbl.create x
  end;;

Note that this is not actually the correct type for writing an
associative container. See Jeremy's post for details.
      </cwn_what>
			<cwn_who>Alain Frisch also suggested</cwn_who>
			<cwn_what>
This thread might of interest to you:
https://sympa.inria.fr/sympa/arc/caml-list/2013-02/msg00037.html
			</cwn_what>
			<cwn_who>Jeremy Yallop suggested</cwn_who>
			<cwn_what>
It is indeed possible to create associative containers where the types
of the values depend on the types of the keys.  Let's see what can to
be done to turn the standard hash table into such a container, using
GADTs for keys.

We'll start with the interface.  The standard hash table interface
(Hashtbl.S) looks like this, in part:

    module type S =
    sig
      type key
      type 'a t
      val create : int -&gt; 'a t
      val add : 'a t -&gt; key -&gt; 'a -&gt; unit
      val remove : 'a t -&gt; key -&gt; unit
      val find : 'a t -&gt; key -&gt; 'a
      val iter : (key -&gt; 'a -&gt; unit) -&gt; 'a t -&gt; unit
    end

The type of tables ('a t) is parameterized by the type of values,
since each table holds a single type of value.  We're aiming instead
to have value types depend on key types, so we'll move the type
parameter into the key type.  Making this change mechanically
throughout the interface gives us the following:

    module type GS =
    sig
      type 'a key
      type t
      val create : int -&gt; t
      val add : t -&gt; 'a key -&gt; 'a -&gt; unit
      val remove : t -&gt; 'a key -&gt; unit
      val find : t -&gt; 'a key -&gt; 'a
      val iter : &lt; f: 'a. 'a key -&gt; 'a -&gt; unit &gt; -&gt; t -&gt; unit
    end

Actually, I've made one additional change, in the type of iter.  In
the regular Hashtbl iter function we can get by with ML-style
polymorphism, where all the type variables are implicitly quantified
at the outermost point.  This constrains the function passed to iter
to be monomorphic, which is fine, since regular Hashtbls only support
a single value type.  In our revised interface, however, the function
argument must be polymorphic, since it needs to handle *any* suitable
pairing of keys and values.  The object type allows quantifier
nesting, giving us the polymorphism we need.

The type of iter is a hint of things to come: putting things *into* a
polymorphic hash table is a doddle, but there's a bit of a knack to
getting them *out* again intact, as we'll see further down.

Next up is the definition of keys.  The standard Hashtbl.Make functor
uses a definition of keys that bundles the key type together with
equality and hashing operations, like this:

    module type HashedType =
    sig
       type t
       val equal : t -&gt; t -&gt; bool
       val hash : t -&gt; int
    end

Of course, it's no good having just any old definitions of equal and
hash.  It's essential that equal l r implies hash l = hash r, for
example, and there are additional fairly obvious constraints on equal.

Our analogue to HashedType, GHashedType, comes with some additional
operations (and so places additional demands on the creator of hash
tables).  The first part of the signature looks essentially the same
as HashedType: we've added a parameter to the key type, but it's not
used as yet, so we can replace it with the don't-care underscore.
(Note that this means that our equality is heterogeneous, happy to
accept keys of disparate types.)  The remainder of the signature deals
with packing up key-value pairs into existential boxes, and attempting
to get them out again; this will allow us to store different types of
key in a single table in our implementation.

    module type GHashedType =
    sig
      type _ key
      val equal : _ key -&gt; _ key -&gt; bool
      val hash : _ key -&gt; int

      type pair = Pair : 'a key * 'a -&gt; pair
      val unpack : 'a key -&gt; pair -&gt; 'a
    end

As with HashedType there are requirements not captured in the types.
In particular, we'd like unpack k (Pair (k', v)) = v whenever equal k
k' is true.

Time for the implementation.  This is mostly straightforward: after
some preliminaries (mostly about hiding the type parameter in keys by
boxing them up appropriately), there are two functions (add and
remove) that put keys and values in boxes and store them in a
monomorphic table, and two functions (find and iter) that unbox keys
and values to recover the parameterization.

    module GHashtbl (G : GHashedType) :
      GS with type 'a key = 'a G.key =
    struct
      include G
      type k = Key : 'a key -&gt; k
      module H = Hashtbl.Make(struct
        type t = k
        let hash (Key k) = hash k
        let equal (Key l) (Key r) = equal l r
      end)

      type t = pair H.t

      let create n = H.create n

      let add tbl k v = H.add tbl (Key k) (Pair (k, v))

      let remove tbl k = H.remove tbl (Key k)

      let find tbl key = unpack key (H.find tbl (Key key))

      let iter (f : &lt;f: 'a. 'a key -&gt; 'a -&gt; unit&gt;) tbl =
        H.iter (fun _ (Pair (k, v)) -&gt; f#f k v) tbl
    end

As is often the case, the unboxing is the interesting part.  The find
function reveals why we introduced the unpack operation for keys (and
hence the pair type, which could otherwise have been hidden away in
the body of GHashtbl), and shows the secondary purpose of keys as
unboxers of values.  The iter function makes use of the polymorphism
that we introduced in its signature earlier; when we unbox a pair we
have no idea how to instantiate the type variable in the contents, so
it's just as well we have a function to hand (f#f) that's polymorphic
enough to handle any possible instantiation.

Time to try it out.  Here's a sample implementation of GHashedType
that associates ints with int lists (which we'll use to store prime
factors) and strings with bools (which we'll use to indicate
capitalization).

    module KeyType (* : GHashedType *) =
    struct
      type _ key =
        Int : int -&gt; int list key
      | String : string -&gt; bool key

      let equal : type a b. a key -&gt; b key -&gt; bool =
        fun l r -&gt; match l, r with
        | Int x, Int y -&gt; x = y
        | String x, String y -&gt; x = y
        | _ -&gt; false

      let hash = Hashtbl.hash

      type pair = Pair : 'a key * 'a -&gt; pair

      let rec unpack : type a. a key -&gt; pair -&gt; a =
        fun k p -&gt; match k, p with
        | Int _, Pair (Int _, v) -&gt; v
        | String _, Pair (String _, v) -&gt; v
        | _ -&gt; raise Not_found
    end

Using KeyType we can instantiate the functor and set about creating
heterogeneous hash tables:

    # module HT = GHashtbl(KeyType)
    ...
    # let ht = HT.create 10;;
    val ht : HT.t = &lt;abstr&gt;
    # begin HT.add ht (Int 10) [2; 5];
            HT.add ht (Int 12) [2; 2; 3];
            HT.add ht (Int 2) [2]; end;;
    - : unit = ()
    # begin HT.add ht (String "foo") false;
            HT.add ht (String "Foo") true;
            HT.add ht (String "bar") false;
            HT.add ht (String "Bar") true; end;;
          - : unit = ()
    # HT.find ht (Int 10), HT.find ht (String "Foo"), HT.find ht (Int 12);;
    - : int list * bool * int list = ([2; 5], true, [2; 2; 3])

    # let o = object
        method f : type a. a key -&gt; a -&gt; unit =
          fun k v -&gt; match k with
          | Int i -&gt; let s = String.concat "*" (List.map string_of_int v) in
                     Printf.printf "%d = %s\n" i s
          | String s -&gt; Printf.printf "%s is%s capitalized\n"
                          s (if v then "" else " not")
      end;;
    val o : &lt; f : 'a. 'a KeyType.key -&gt; 'a -&gt; unit &gt; = &lt;obj&gt;
    # HT.iter o ht;;
    2 = 2
    12 = 2*2*3
    10 = 2*5
    foo is not capitalized
    bar is not capitalized
    Bar is capitalized
    Foo is capitalized
    - : unit = ()
			</cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Engineering position at Vector Fabrics</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2013-07/msg00077.html</cwn_url>
      <cwn_who>Stefan Holdermans announced</cwn_who>
      <cwn_what>
Vector Fabrics has another position open for a functional programmer. See
below and http://www.vectorfabrics.com/company/career/functional_programmer
for details.

This time, we particularly welcome applications from experienced developers,
the position providing a fair share of opportunities for growing into the
rôle of an architect.

Interested? Please contact us at jobs &lt;AT&gt; vectorfabrics.com.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml 2013 (24/09, Boston): Preliminary program is available</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2013-07/msg00086.html</cwn_url>
      <cwn_who>Michel Mauny announced</cwn_who>
      <cwn_what>
The OCaml 2013 (preliminary) program is now available:

http://ocaml.org/meetings/ocaml/2013/program.html

The workshop is just the day before ICFP, and the registration is now
open (from &lt;http://icfpconference.org/icfp2013/&gt;).

It is time to plan your trip and to make hotel reservations!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>enhancements for "perf" on OCaml code</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2013-07/msg00087.html</cwn_url>
      <cwn_who>Mark Shinwell announced</cwn_who>
      <cwn_what>
Linux has a tool called "perf" that enables the display of source code
alongside time profiling information and the corresponding assembly code.
(See &lt;https://perf.wiki.kernel.org/index.php/Tutorial&gt;, "perf annotate").

I am pleased to announce an alpha version of the OCaml native code compiler
that permits perf to do the same for OCaml code. This compiler works only on
x86-64 Linux, although porting it to other Linux targets should be
straightforward.

The compiler is available in OPAM. If you add the remote repository
git://github.com/mshinwell/opam-repo-dev then you should be able to
"opam switch" to the 4.01-perf-annotate compiler. Please let me have any
reports of problems.

After compilation, you can run "perf record" to gather data about your
OCaml program, and then use "perf report" to interactively examine it.
If you hit Return on a function, then you should be given the option to
annotate it, and then you should see the OCaml code as above. Note that
line number information is not yet as fine-grained for OCaml as it might
be for C code.

You need to have the source files available at the same location on the
filesystem when you run "perf report" as you did when you compiled the
program.

This work forms part of a larger project in collaboration with OCaml Labs
at Cambridge, UK, to enhance the level of debugging information emitted
by the OCaml compiler. The perf-annotate compiler emits debugging sections
that aim to be compliant with the DWARF-2 standard.

Mark

P.S. The eagle-eyed of you will notice that there is another compiler,
4.01-allocation-profiling, also available in that OPAM repo. This provides
allocation profiling capabilities for native code, documentation for which I
will endeavour to circulate to the list shortly.
      </cwn_what>
			<cwn_who>Maxime Dénès asked and Mark Shinwell replied</cwn_who>
			<cwn_what>
&gt; Is it related to the recently introduced "-with-frame-pointers" configure
&gt; flag http://caml.inria.fr/mantis/view.php?id=5721 ?
&gt;
&gt; The purpose of this flag seemed to be the use of the same perf tool.

Compilation with a frame pointer enables the display of callgraph
information in perf. It is effectively a workaround for the fact that the
in-kernel stack unwinder used by perf does not use the debugging
information in the executable.

The perf-annotate compiler is designed specifically to make the
"perf annotate" feature of the perf tools work in a satisfactory way
for OCaml code. It's roughly speaking orthogonal, but you probably
want to use both.
			</cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocaml.org/&gt;.

Full Time: Software Developer (Functional Programming) at Jane Street in New York, NY; London, UK; Hong Kong:
  &lt;http://jobs.github.com/positions/0a9333c4-71da-11e0-9ac7-692793c00b45&gt;

Better Inlining: Progress Report:
  &lt;http://www.ocamlpro.com/blog/2013/07/11/inlining-progress-report.html&gt;

Experimenting in API Design: Riakc:
  &lt;http://functional-orbitz.blogspot.com/2013/07/experimenting-in-api-design-riakc.html&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
