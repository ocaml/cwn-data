<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2010.10.19</cwn_date>
    <cwn_prev>2010.10.12</cwn_prev>
    <cwn_next>2010.10.26</cwn_next>
    <cwn_date_text>October 12 to 19, 2010</cwn_date_text>
  </cwn_head>
	<cwn_body>
	  <cwn_entry>
      <cwn_title>convertion between OCaml Big_int and C</cwn_title>
      <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/209b1fd9fc343eb1#</cwn_url>
      <cwn_who>Jianzhou Zhao asked and Olivier Schwander suggested</cwn_who>
      <cwn_what>
&gt; I am not sure if this is a reasonable question. Does OCaml already 
&gt; have functions that do convertion between arbitrary-precision integers 
&gt; big_int in OCaml and any representation of large intergers in C? The 
&gt; implementation of big_int (otherlibs/num/big_int.*) uses nat 
&gt; (otherlibs/num/nat.*). Nat is a customized allocation (in C) as a list 
&gt; of native integers to represent arbitrary-precision. So converting 
&gt; big_int into C seems possible to me. 

It seems you should have a look at the numerix library or at the OCaml 
binding for GMP. I never used any of them so I cannot guaranty there are 
really working (there are not a lot of references to them) but I think 
they are more likely to be usable on both OCaml and C side. 
      </cwn_what>
      <cwn_who>Jianzhou Zhao then asked and Olivier Schwander replied</cwn_who>
      <cwn_what>
&gt; Thanks. Are they the MLGMP and Numerix listed in "the Caml Hump: 
&gt; General purpose libraries :: Numeric computation" ? 
&gt;   http://caml.inria.fr/cgi-bin/hump.en.cgi?sort=0&amp;browse=75 
&gt; From the documents of Numerix, it runs much faster than the big_int 
&gt; library, although it may not be as portable as the 'nat' that big_int 
&gt; replies on. 

Yes, there is also mlgmpidl 
&lt;http://www.inrialpes.fr/pop-art/people/bjeannet/mlxxxidl-forge/mlgmpidl/&gt;. 
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Books for review in the Journal of Functional Programming</cwn_title>
      <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/bd1730b85fb3ecc2#</cwn_url>
      <cwn_who>Simon Thompson announced</cwn_who>
      <cwn_what>
The Journal of Functional Programming publishes book reviews. I have just
updated: list of books for review in the journal of functional programming,
available here:

http://www.cs.kent.ac.uk/people/staff/sjt/JFP/available.html

which also has a link to a set of review guidelines. If you review a book you
get a free copy (in some cases of an e-book): the typical deadline for a
review is three months.
      </cwn_what>
    </cwn_entry>
	  <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

Coq 8.3:
  &lt;http://caml.inria.fr/cgi-bin/hump.cgi?contrib=110&gt;

Hypomnemata:
  &lt;https://forge.ocamlcore.org/projects/hypomnemata/&gt;

Text to PDF:
  &lt;http://alaska-kamtchatka.blogspot.com/2010/10/text-to-pdf.html&gt;

Onotify 0.6.2 released:
  &lt;http://forge.ocamlcore.org/forum/forum.php?forum_id=704&gt;

Pattern matching costs:
  &lt;http://www.sairyx.org/2010/10/pattern-matching-costs/&gt;

Coq 8.3 is out !:
  &lt;http://coq.inria.fr/coq-83-is-out&gt;

Running OCaml directly on top of Xen for massive performance gains in the cloud:
  &lt;http://www.sairyx.org/2010/10/running-ocaml-directly-on-top-of-xen-for-massive-performance-gains-in-the-cloud/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>