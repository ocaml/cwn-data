<?xml version="1.0" encoding="utf-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2022.05.31</cwn_date>
    <cwn_prev>2022.05.24</cwn_prev>
    <cwn_next>2022.06.07</cwn_next>
    <cwn_date_text>May 24 to 31, 2022</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>carray.0.0.1</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-carray-0-0-1/9938/1</cwn_url>
      <cwn_who>Danny Willems announced</cwn_who>
      <cwn_what>
I'm glad to announce the first (experimental) release of ocaml-carray, a library mocking the Array interface to work
with contiguous C array.
*Disclaimer*: this first version is experimental and must be used with caution. A restricted set of values are
supported at the moment (custom block with no out-of-heap values). Depending on the demand, more values might be
supported.
Feel free to use this thread to suggest ideas, make opinions, etc.

- Repository :: https://gitlab.com/dannywillems/ocaml-carray
- License :: [MIT](https://gitlab.com/dannywillems/ocaml-carray/-/blob/0.0.1/LICENSE)
- Release :: [0.0.1](https://gitlab.com/dannywillems/ocaml-carray/-/tags/0.0.1)
- Documentation :: https://dannywillems.gitlab.io/ocaml-carray/carray/index.html
- Nomadic Labs website :: https://nomadic-labs.com
- Tezos ZK-rollups repository :: https://gitlab.com/nomadic-labs/privacy-team

*** Motivation

OCaml arrays are not always contiguous piece of memory, requiring accessing different chunks of memory when accessing
individual elements. When requiring a value in memory, the CPU will fetch the RAM and load not only the particular
value but a memory page (a contiguous piece of memory) and add it to its cache. The CPU will use its cache to load
the values in its registers. It is not efficient with large OCaml arrays as the CPU will constantly fetch the RAM to
load different memory pages in its cache.
Also, when using the C FFI, the user must know the memory representation of an array and use the non user-friendly
low-level interface macro ~Field~.

*** This work

This library provides a polymorphic interface mocking a subset of the ~Array~ interface to work with contiguous piece
of memory. Using the library should be as easy as adding ~module Array = Carray~.
A C macro ~Carray_val~ is also provided for developers writing bindings and requires to simply cast in the underlying
C type.
It has also been observed sub arrays are sometimes used for read-only operations. However, ~Array.sub~ allocates a
fresh copy of the requested sub part. ~Carray~ leverages this memory cost by providing noalloc variants, like
~sub_noalloc~.

*** Performances

The concept has been tested and used in real world applications like the polynomial library used by Nomadic Labs to
implement zk-rollups. A speed up of around 50% has been observed when using contiguous arrays compared to OCaml
arrays to compute NTT/FFT.

*** Usage

This library is *experimental*. Use this library with caution. The interface might change in the future.

#+begin_example
opam install carray.0.0.1
#+end_example
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml Users and Developers Workshop 2022</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ocaml-users-and-developers-workshop-2022/9726/2</cwn_url>
      <cwn_who>Continuing this thread, Matija Pretnar announced</cwn_who>
      <cwn_what>
This is a reminder for anyone interested in contributing to OCaml Workshop 2022. The deadline has been slightly
extended to Friday, June 3 (anywhere on Earth), which means you have roughly *four days left* to prepare your
submissions.
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
