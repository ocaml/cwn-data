<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2009.07.07</cwn_date>
    <cwn_prev>2009.06.30</cwn_prev>
    <cwn_next>2009.07.14</cwn_next>
    <cwn_date_text>June 30 to July 7, 2009</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Ingénieur Caml jeune diplômé</cwn_title>
      <cwn_url>http://caml.inria.fr/pub/ml-archives/caml-list/2009/06/e9078dae1a841f36a925ffc8c02a5b23.en.html</cwn_url>
      <cwn_who>Frédéric Besson announced</cwn_who>
      <cwn_what>
L'équipe Inria Celtique recherche un programmeur OCaml (ingénieur  
jeune diplômé)
pour développer des analyses statiques pour le langage Java.

L'annonce  est consultable à l'adresse suivante
http://www.inria.fr/travailler/mrted/en/eng/details.html?id=PNGFK026203F3VBQB6G68LOE1&amp;LOV5=4510&amp;LOV2=4491&amp;LG=EN&amp;Resultsperpage=20&amp;nPostingID=3501&amp;nPostingTargetID=7707&amp;option=52&amp;sort=DESC&amp;nDepartmentID=10

Mots-clés   : compilation, vérification, analyse statique
Langages    : OCaml
Éligibilité : ingénieur jeune diplômé (diplômé 2008 ou 2009)
Contrat     : un an (renouvelable une fois)
Lieu        : Rennes
Date limite : 30 août 2009
Contact     : frederic.besson@inria.fr
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml users and developpers map</cwn_title>
      <cwn_url>http://caml.inria.fr/pub/ml-archives/caml-list/2009/07/1baa5f5182013c4cde58eb104fe4268b.en.html</cwn_url>
      <cwn_who>Adrien Nader said</cwn_who>
      <cwn_what>
A few days ago, on the #ocaml irc channel, it appeared the location of
most ocaml users wasn't known and that some live very (very) close to
each others without knowing it.

A map of users would be a good thing for the community. For instance,
it could help create local user groups or help chose the location for
a meeting.
Currently the only such map I know of is ohloh's[1]. It currently has
about 30 people (23 users, 3 devs). The map is public and you can have
a look at it (note that "contributors" are not shown on the same map
as "users").

If you want to add yourself to the map, you'll need to register on
ohloh.net[2], fill in your location in your account settings and
finally click on the "I use this" button on the page for the ocaml
project[3].

It is assumed most ocaml coders are French, let's see if that really holds. :)


[1] https://www.ohloh.net/p/ocaml/map
[2] https://www.ohloh.net/accounts/new
[1] https://www.ohloh.net/p/ocaml
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Concurrent Cell Version 2.0.0</cwn_title>
      <cwn_url>http://caml.inria.fr/pub/ml-archives/caml-list/2009/07/ee3eac2cb2555a4f5475737ba43046af.en.html</cwn_url>
      <cwn_who>Satoshi Ogasawara announced</cwn_who>
      <cwn_what>
I'm please to announce a new release of Concurrent Cell version 2.0.0 which
supports new variable 'Dvar'. This variable is a kind of Mvar that can hold
dependency between variables, and resolve thease dependency automatically when
the value of the variable is changed. This system is similar to Functional
Reactive Programming style.

the main signatures are:

type 'a t
type 'a eq = 'a -&gt; 'a -&gt; bool
val make : ?name:string -&gt; ?eq:'a eq -&gt; ?event:'a Mbox.t -&gt; 'a -&gt; 'a t
val depend : ?name:string -&gt; ?eq:'b eq -&gt; 'a t -&gt; ('a -&gt; 'b) -&gt; 'b t
val read : 'a t -&gt; 'a Event.event
val set : 'a t -&gt; ('a option -&gt; 'a) -&gt; unit Event.event
val filter : ?name:string -&gt; ?eq:'b eq -&gt; 'a t -&gt; ('a -&gt; 'b option) -&gt; 'b t
val connect : 'a t -&gt; ('a -&gt; 'b -&gt; 'b) -&gt; 'b t -&gt; unit
val disconnect : src:'a t -&gt; dst:'b t -&gt; unit
val depend2 : ?name:string -&gt; ?eq:'c eq -&gt; 'a t -&gt; 'b t -&gt; ('a -&gt; 'b -&gt; 'c) -&gt; 'c t
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>RegSTAB released</cwn_title>
      <cwn_url>http://caml.inria.fr/pub/ml-archives/caml-list/2009/07/1380432b63d587d8195e3b66dd6ea553.en.html</cwn_url>
      <cwn_who>Vincent Aravantinos announced</cwn_who>
      <cwn_what>
I am pleased to announce the first release of RegSTAB.

RegSTAB is a SAT-solver able to deal with formula schemas: you can give it a
scheme of formulas such as "/\i=1..n P_i -&gt; P_i+1" (where n is a variable) and
it will be able to answer you if *all the formulas of this form (i.e. for
every value of n) are unsatisfiable*. i.e. it can treat at once an infinite
set of propositional formulas.

Link: http://forge.ocamlcore.org/projects/regstab/
Manual: manual
RegSTAB is based on a recent paper:
http://membres-liglab.imag.fr/aravantinos/Publis/tableaux2009/tab09.pdf
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

RegSTAB first release:
  &lt;http://forge.ocamlcore.org/forum/forum.php?forum_id=395&gt;

Hash tables: separate chaining vs. double hashing:
  &lt;http://eigenclass.org/R2/writings/separate-chaining-vs-double-hashing&gt;

Math typesetting with jsMath:
  &lt;http://eigenclass.org/R2/writings/ocsiblog-jsmath-support&gt;

Three More for the Debian New Queue.:
  &lt;http://www.mega-nerd.com/erikd/Blog/CodeHacking/Debian/polyparse_dataenc_json.html&gt;

Concurrent Cell now supports  Dvar.:
  &lt;http://forge.ocamlcore.org/forum/forum.php?forum_id=394&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>