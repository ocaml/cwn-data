<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2010.10.05</cwn_date>
    <cwn_prev>2010.09.28</cwn_prev>
    <cwn_next>2010.10.12</cwn_next>
    <cwn_date_text>September 28 to October 05, 2010</cwn_date_text>
    <cwn_extra_head></cwn_extra_head>
  </cwn_head>
	<cwn_body>
	  <cwn_entry>
      <cwn_title>ocaml-expect v0.0.2: Expect-like framework</cwn_title>
      <cwn_url>http://groups.google.com/group/fa.caml/browse_thread/thread/809d4646c7cdea00#</cwn_url>
      <cwn_who>Sylvain Le Gall announced</cwn_who>
      <cwn_what>
This is a simple implementation of `expect` to help building unitary testing
of interactive program.

It helps to receive question and send answers from an interactive process.
You can match the question using a regular expression (Str). You can also
use a timeout to ensure that the process answer in time.

See the [Expect manual](&lt;http://expect.nist.gov/&gt;) for more information and
example.

Changes:
* Add a ~fmatch to expect, to dynamically define expect results
* Allow to pass environment and redirect stderr to spawn
* Add `Suffix/`Prefix/`Contains tests
* Separate Str, add Pcre, create findlib packages expect.str and 
Â expect.pcre

Homepage:
http://forge.ocamlcore.org/projects/ocaml-expect/

Get source code:
$ darcs get http://darcs.ocamlcore.org/repos/ocaml-expect

Browse source code:
http://darcs.ocamlcore.org/cgi-bin/darcsweb.cgi?r=ocaml-expect;a=summary
      </cwn_what>
    </cwn_entry>
	  <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

New features in libguestfs 1.6: Inspect disk images from any programming language:
  &lt;http://rwmj.wordpress.com/2010/10/03/new-features-in-libguestfs-1-6-inspect-disk-images-from-any-programming-language/&gt;

ocaml-expect v0.0.2:
  &lt;http://forge.ocamlcore.org/forum/forum.php?forum_id=692&gt;

Sphinx searchd client:
  &lt;https://forge.ocamlcore.org/projects/sphinx/&gt;

LDAP (2):
  &lt;http://gaiustech.wordpress.com/2010/09/30/ldap-2/&gt;

Delimited continuations in eff:
  &lt;http://math.andrej.com/2010/09/30/delimited-continuations-in-eff/&gt;

How eff handles built-in effects:
  &lt;http://math.andrej.com/2010/09/28/how-eff-handles-built-in-effects/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>