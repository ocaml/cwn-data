#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[http://alan.petitepomme.net/cwn/2020.01.14.html][Previous Week]] [[http://alan.petitepomme.net/cwn/index.html][Up]] [[http://alan.petitepomme.net/cwn/2020.01.28.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of January 14 to 21, 2020.

#+TOC: headlines 1


* How does the compiler check for exhaustive pattern matching?
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/how-does-the-compiler-check-for-exhaustive-pattern-matching/5013/1

** Dylan Irlbeck asked


Hi all. I'm relatively new to OCaml, and I was curious on how the compiler is
able to give a warning when a case list is non-exhaustive - both from a
high-level and, if possible, the implementation of this check. I have some ideas
about how one could do this, but none of my ideas seem like they'd be nearly as
efficient as the OCaml compiler is.
      

** gasche replied


The canonical reference for exhaustivity-checking in OCaml is the scientific publication

#+begin_quote
[[http://moscova.inria.fr/~maranget/papers/warn/index.html][Warnings for pattern matching]]
Luc Maranget
2007
#+end_quote

The general idea is to consider all the patterns of a given pattern-matching at
once, generalize this structure to a "matrix" of patterns (matching on several
values in parallel), and devise an algorithm to "explore" these pattern matrices
in such a way that you eventually tell if a given pattern-matrix is exhaustive,
or can propose a counter-example.

(I guess we should write a high-level/accessible blog post about this.)
      



* resto 0.2 released
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/ann-resto-0-2-released/5028/1

** RaphaÃ«l Proust announced


On behalf on Nomadic Labs, I'm happy to announce the release of version 0.2 of ~resto~, a library to create type-safe HTTP/JSON services.

The library is available through opam (~opam install resto~), distributed under LGPL, and hosted on https://gitlab.com/nomadic-labs/resto.

~resto~ was previously released as ~ocplib-resto~ maintained by OCamlPro. The project is now maintained by Nomadic Labs.

Along with many bugfixes and a few added features, the main change of this release is that the library is split into multiple packages with fine-grained dependencies.
      



* opam 2.0.6 release
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/ann-opam-2-0-6-release/5038/1

** R. Boujbel announced


We are pleased to announce the minor release of [[https://github.com/ocaml/opam/releases/tag/2.0.6][opam 2.0.6]].

This new version contains mainly build update & fixes. You can find more information in this [[https://opam.ocaml.org/blog/opam-2-0-6][blog post]].

_opam is a source-based package manager for OCaml. It supports multiple simultaneous compiler installations, flexible package constraints, and a Git-friendly development workflow._
      



* soupault: a static website generator based on HTML rewriting
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/ann-soupault-a-static-website-generator-based-on-html-rewriting/4126/11

** Daniil Baturin announced


soupault 1.8.0 is [[https://soupault.neocities.org/blog/soupault-1.8.0-release/][released]] along with Lua-ML 0.9.1.

Lua-ML now raises ~Failure~ when Lua code execution fails. There's much room for improvement in that area, for now I've just done something that is better than just displaying errors on stderr but otherwise allowing syntax and runtime
errors pass silently.

If you have any ideas how perfect interpreter error reporting _should_ work, please share!

As of improvements in soupault itself, there's now:
- A way for plugins to specify their minimum supported soupault version like ~Plugin.require_version("1.8.0")~
- ~TARGET_DIR~ environment variable and ~target_dir~ Lua global that contains the directory where the rendered page will be written, to make it easier for plugins/scripts to place processed assets together with pages.
- "Build profiles": if you add ~profile = "production"~ or similar to widget config, that widget will be ignored unless you run ~soupault --profile production~.
- A bunch of new utility functions for plugins.
      



* Spin: Project scaffolding tool and set of templates for Reason and OCaml
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/spin-project-scaffolding-tool-and-set-of-templates-for-reason-and-ocaml/5047/1

** Mohamed Elsharnouby announced


https://github.com/tmattio/spin
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[http://alan.petitepomme.net/cwn/][the archive]] or the [[http://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].

#+BEGIN_authorname
[[http://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
