#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2024.04.30.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2024.05.14.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of April 30 to May 07, 2024.

#+TOC: headlines 1


* Deploying Ocsigen applications
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/deploying-ocsigen-applications/14572/1

** Hans Ole Rafaelsen announced


I have written a short text on how Ocsigen applications might be packed in order to be deployed to other nodes, that don't have your
development environment installed.

[[https://github.com/hansole/deploying_ocsigen][Deploying Ocsigen]]

If you happen to have a better way, or solutions to parts that I have not been able to solve, please let me know.
      



* OCaml linting tools and techniques
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/blog-ocaml-linting-tools-and-techniques/14574/1

** Simmo Saan announced


Recently, I started wondering about linting tools for OCaml, so I went looking. This ended up being a quite extensive survey.
Therefore, I decided to publish my findings in a blog post: [[https://sim642.eu/blog/2024/05/01/ocaml-linting][OCaml linting tools and
techniques]].

In particular, I focused on linting with dune and Ppxlib because there's many variations out there. In the post I describe the
technical choices that go into such linters and provide an overview of those that work and how well. In the process of experimenting,
I tried them out myself and published them as demos on GitHub: [[https://github.com/sim642/dune-lint-demo][sim642/dune-lint-demo]].

Feel free to let me know if I missed any tools out there or you have any questions/comments. There isn't much information about this
out there (and existing tool does it slightly differently), so I hope this overview benefits others as well.
      



* dune 3.15
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/ann-dune-3-15/14438/2

** Etienne Millon announced


We've released 3.15.1 and 3.15.2. The latter is particularly important for Coq users since it fixes a regression in incremental
compilation introduced in 3.13.0.

Here's the combined changelog:

*** Fixed

- Fix overflow in sendfile stubs (copy of large files could fail or end with truncated files) (#10333, @tonyfettes)
- Fix crash when a rule with a directory target is disabled with `enabled_if` (#10382, fixes #10310, @gridbugs)
- melange: remove all restrictions around virtual libraries in Melange. They may be used as otherwise in libraries and executables. (#10412, @anmonteiro)
- spawn: fix compatibility with RHEL7 (#10428, @emillon)
- If no directory targets are defined, then do not evaluate `enabled_if` (#10442, @rgrinberg)
- Fix a bug where Coq projects were being rebuilt from scratch each time the dependency graph changed. (#10446, fixes #10149, @alizter)
      



* bitgenerators v0.1.0
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/ann-bitgenerators-v0-1-0/14577/1

** zoj613 announced


Hi everyone. I'd like to announce the first release of [[https://github.com/zoj613/bitgenerators][bitgenerators]]. This library implements an OCaml port of NumPy's bitgenerator interface for working with Psuedo-random numbers (see: https://numpy.org/doc/stable/reference/random/bit_generators/index.html). 

- This library implements several PRNGs that are exposed through this common interface. It also implements an ~SeedSequence~ module for seeding PRNGs using high quality initial states based on the ideas discussed [[https://www.pcg-random.org/posts/developing-a-seed_seq-alternative.html][here]].
- Morever, the module provides functions that help easily generate independent and non-overlapping instances of a PRNG for use in parallel computation in a /reproducible/ manner.
- Implemented PRNG's include [[https://www.cs.hmc.edu/tr/hmc-cs-2014-0905.pdf][PCG64]], [[https://pracrand.sourceforge.net/RNG_engines.txt][SFC64]], [[https://ieeexplore.ieee.org/document/6114424/][Philox4x64]], [[https://prng.di.unimi.it/][Xoshiro256**]] and [[https://cr.yp.to/chacha/chacha-20080128.pdf][ChaCha]]. All of which pass stringent statistical randomness tests like PractRand and Testu01.
- The API documentation can be found [[https://zoj613.github.io/bitgenerators/bitgenerators/Bitgen/index.html][here]]
- The source code is hosted on github: https://github.com/zoj613/bitgenerators
- The README file contains examples of how the library can be used.

This is my first Ocaml project and therefore I would highly appreciate feedback from experienced users regarding it's usefulness and possibly how it could be improved (e.g. usability and performance). I tried to keep the implementation as functional as possible, though not very sure if that's the best approach here.
      



* checked_oint v0.1.0
:PROPERTIES:
:CUSTOM_ID: 5
:END:
Archive: https://discuss.ocaml.org/t/ann-checked-oint-v0-1-0/14580/1

** Sima Kinsart announced


I'd like to announce a new library: [[https://github.com/Hirrolot/checked_oint][~checked_oint~]]. It implements checked arithmetic for both signed and unsigned integers of 8, 16, 32, 64, and 128 bits. Unlike ~stdint~ or ~ocaml-integers~, routines in this library either return an option or raise an exception when a result of an arithmetic operation cannot be represented in a desired integer type. In addition, it contains abstractions for manipulating arbitrary integers and integer types in a generic and type-safe manner, which I find quite useful for compiler/interpreter implementations.

Usage example:

#+begin_src ocaml
open Checked_oint

let () =
  let x = U8.of_int_exn 50 in
  let y = U8.of_int_exn 70 in
  assert (U8.equal (U8.add_exn x y) (U8.of_int_exn 120));
  assert (Option.is_none (U8.mul x y))
#+end_src

Feel free to ask any questions in the comments.
      



* Liquidsoap 2.2.5 is out!
:PROPERTIES:
:CUSTOM_ID: 6
:END:
Archive: https://discuss.ocaml.org/t/ann-liquidsoap-2-2-5-is-out/14582/1

** Romain Beauxis announced


Liquidsoap ~2.2.5~ has out! Full release details are here: https://github.com/savonet/liquidsoap/releases/tag/v2.2.5

Liquidsoap is a statically typed scripting general-purpose language with dedicated operators and backend for all thing media, streaming, file generation, automation, HTTP backend and more.

This is hopefully the *last* release of the ~2.2.x~ release cycle before we kick off the new ~2.3.x~ release cycle. We've got a couple feature to bring there and then it'll be ready for more testing.

Liquidsoap ~2.2.5~ has some good bugfixes and some minor changes but its most exciting feature is the *autocue* . It was developed in close collaboration with several users. The feature is an opt-in crossfade extension that computes the /perfect/ crossfade transitions for your tracks.

Over the years, it's been very interesting to maintain an application and language that is now pretty large and complex using the OCaml compiler and ecosystem. It's amazing to see how easy it is now to build integrate new packages. It also brings in some interesting, real-life challenges such as some very specific [[https://github.com/ocaml/ocaml/issues/13123][memory issues]].

Next, we would like to work on optimizing the language by introducing modules, to reduce the standard library's memory footprint, and to use the new OCaml parallelism to fully leverage CPU and memory usage when streaming large amount of data such as video streams.
      



* OCaml 5.2.0 - First Release Candidate
:PROPERTIES:
:CUSTOM_ID: 7
:END:
Archive: https://discuss.ocaml.org/t/ocaml-5-2-0-first-release-candidate/14584/1

** octachron announced


The release of OCaml 5.2.0 is imminent.
As a final step, we are publishing a release candidate to check that everything is in order before the release in the upcoming week(s).

If you find any bugs, please report them on [[https://github.com/ocaml/ocaml/issues][OCaml's issue tracker]].

Compared to the second beta, this release contains one small compiler-libs printer fix and one configuration tweak.

The full change log for OCaml 5.2.0 is available [[https://github.com/ocaml/ocaml/blob/5.2/Changes][on
GitHub]]. 
A short summary of the changes since the second beta release is also available below.

*** Installation Instructions

The base compiler can be installed as an opam switch with the following commands on opam 2.1 and later:
#+begin_src shell
opam update
opam switch create 5.2.0~rc1
#+end_src

The source code for the release candidate is also directly available on:

- [[https://github.com/ocaml/ocaml/archive/5.2.0-rc1.tar.gz][GitHub]]
- [[https://caml.inria.fr/pub/distrib/ocaml-5.2/ocaml-5.2.0~rc1.tar.gz][OCaml archives at Inria]]

*** Fine-Tuned Compiler Configuration

If you want to tweak the configuration of the compiler, you can switch to the option variant with:
#+begin_src shell
opam update
opam switch create <switch_name> ocaml-variants.5.2.0~rc1+options <option_list>
#+end_src
where ~<option_list>~ is a space-separated list of ~ocaml-option-*~ packages. For instance, for a ~flambda~ and ~no-flat-float-array~ switch:
#+begin_src shell
opam switch create 5.2.0~rc1+flambda+nffa ocaml-variants.5.2.0~rc1+options ocaml-option-flambda ocaml-option-no-flat-float-array
#+end_src

All available options can be listed with ~opam search ocaml-option~.

*** Changes since the second beta
  
- [[https://github.com/ocaml/ocaml/issues/13130][#13130]]: Minor fixes to ~pprintast~ for raw identifiers and local module open syntax for types. (Chet Murthy, review by Gabriel Scherer)
- [[https://github.com/ocaml/ocaml/issues/13100][#13100]] Fix detection of ~zstd~ when compiling with ~musl-gcc~ (David Allsopp, review by Samuel Hym)
      



* Announcing DBCaml, Silo, Serde Postgres and a new driver for postgres
:PROPERTIES:
:CUSTOM_ID: 8
:END:
Archive: https://discuss.ocaml.org/t/announcing-dbcaml-silo-serde-postgres-and-a-new-driver-for-postgres/14585/1

** Emil Priver announced


https://priver.dev/blog/dbcaml/dbcaml-project/
      



* Pretty Printing in OCaml: Format Primer
:PROPERTIES:
:CUSTOM_ID: 9
:END:
Archive: https://discuss.ocaml.org/t/blog-pretty-printing-in-ocaml-format-primer/14599/1

** Vladimir Keleshev announced


Hi folks, I wrote another +monad+ Format tutorial.

https://keleshev.com/pretty-printing-in-ocaml-a-format-primer

Here's some of layouts that are covered:

#+begin_src ocaml
[[],
 ["one", "two", "three"],
 ["one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "ten"]]
#+end_src

#+begin_src ocaml
[
  [],
  ["one", "two", "three"],
  [
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ten",
  ]
]
#+end_src

#+begin_src ocaml
[ []
, [ "one", "two", "three" ]
, [ "one"
  , "two"
  , "three"
  , "four"
  , "five"
  , "six"
  , "seven"
  , "eight"
  , "nine"
  , "ten"
  ]
]
#+end_src

I tried to share some of my experience using Format. As a bonus—JSON pretty printer.
      



* Send us Talk and Workshop Proposals for Fun OCaml 2024 in Berlin, September 16+17
:PROPERTIES:
:CUSTOM_ID: 10
:END:
Archive: https://discuss.ocaml.org/t/send-us-talk-and-workshop-proposals-for-fun-ocaml-2024-in-berlin-september-16-17/14603/1

** Sabine Schmaltz announced


*Fun OCaml 2024* is a *2 days open source hacking event* dedicated to OCaml enthusiasts and professionals. We focus on the impact and potential of OCaml for solving real-world problems and get together in Berlin for a conference/hackathon over two days:
- Day 1 (Monday, September 16): talks (which are live-streamed) and socializing/hacking.
- Day 2 (Tuesday, September 17): Workshops and hacking.

Topics we're interested in:
- how you use OCaml in your business / in your projects
- OCaml libraries, frameworks, and other Open Source projects built on OCaml
- hands-on demonstrations that encourage people to try things on the second day of the event or at home
- seeing actual code and reasoning behind design decisions
- experience reports

For more details, check out the website and the CFP linked from there:

https://fun-ocaml.com

Registration for attendees will be announced later this week in advance, but is not open yet.

Thanks! :sparkles: :orange_heart: :camel:
      



* OCaml Workshop 2024 at ICFP -- announcement and call for proposals
:PROPERTIES:
:CUSTOM_ID: 11
:END:
Archive: https://discuss.ocaml.org/t/ocaml-workshop-2024-at-icfp-announcement-and-call-for-proposals/14371/5

** Sonja Heinze continued this thread


As mentioned above, the submission deadline for the OCaml Workshop at ICFP is getting closer.

As a new note: A few weeks after the OCaml Workshop at ICFP, there'll be the new initiative [[https://discuss.ocaml.org/t/send-us-talk-and-workshop-proposals-for-fun-ocaml-2024-in-berlin-september-16-17/14603][Fun OCaml]] in Berlin. It's super exciting to have three OCaml-related workshops (first the ML Workshop and the OCaml Workshop at ICFP, and then Fun OCaml) over the course of a few weeks, and we're also very much looking forward to Fun OCaml!

We've already mentioned that when reading the submissions, as every year, we'll collaborate closely with the organizers of the ML workshop at ICFP, which intersects with the OCaml Workshop on talks with a strong theoretical and research-oriented focus. We'll also collaborate with the organizers of Fun OCaml this year, which might intersect on talks with a strong practical focus. With collaboration, we mainly mean potentially transferring submissions from one workshop to another after checking in with the authors (side-note: if you want your presentation to be taken into account for a potential transfer, you need to respect the earlier of the two submission deadlines).

Best, and looking forward to this exciting year of OCaml workshops,
@Armael and @pitag
      



* Other OCaml News
:PROPERTIES:
:CUSTOM_ID: 12
:END:
** From the ocaml.org blog


Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://tarides.com/blog/2024-05-01-we-host-our-first-ocaml-retreat-in-india][We Host Our First OCaml Retreat in India!]]
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe to the [[https://sympa.inria.fr/sympa/info/caml-list][caml-list]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
