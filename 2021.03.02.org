#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2021.02.23.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2021.03.09.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of February 23 to March 02, 2021.

#+TOC: headlines 1


* Release of ~fmlib.0.1.0~
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/ann-release-of-fmlib-0-1-0/7352/1

** Hbr announced


I am pleased to announce the release of the first version (0.1) of ~fmlib~, a functional monadic library.

Beside some primitive data types ~fmlib~ has support for

- pretty printing

- combinator parsing

It features a functional monadic style of programming.

The pretty printer does not actually print. It generates a lazy stream of characters and can therefore adapted to
any input/output method.

The parsers are combinator parsers which can parse indentation sensitive content easily. The combinators are
~parsec~ like. The parsers are fully incremental and do not read any data. Therefore you can choose your on input
method and just push the read characters (or bytes) into the parser until success or failure is reached.

~fmlib~ can be installed from opam via ~opam install fmlib~.

Please read the [[https://hbr.github.io/fmlib/odoc][documentation here]]

Any comments, issues etc. are welcome.
      



* Resources for building a Polymorphic Lambda Calculus compiler?
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/resources-for-building-a-polymorphic-lambda-calculus-compiler/7357/1

** Tom Brunoli asked


Hey all, apologies if this isn't a good place to post this, but this board seems like a good intersection of folks
interested in FP, type theory, and compilers (and obviously OCaml).

I'm currently trying to write a functional programming language in OCaml without formal knowledge of type theory or
compilers (I don't have a CS degree). I've been reading up as much as I can across a lot of different papers, github
projects, and some books that I've found online. Slowly I think I've started to build some of the knowledge I may
have gotten from a compilers course.

So far I've implemented a type checker for higher-kinded polymorphic lambda calculus (System F omega - [[https://github.com/tominated/system_f_omega/][code is
here]]), but I've found it incredibly hard to find resources on going
from this to a call-by-value compiled program. I decided to implement System F Omega because I read that it's what
one of Haskell's intermediate representations are built upon. System F is a really painful term to google, and most
resources I've found are about formal verification or are nigh impenetrable for a hobbyist.

Ideally i'd like to take a type-checked System-F-omega AST and output LLVM, Cranelift or webassembly IR, but I don't
know what steps I'm missing in the middle. I have read enough to know that I'll probably need some kind of abstract
machine, and need to somehow convert that to CPS or SSA form before I can get it to machine code. I have heard about
a few different abstract machines (Like G-Machine, SECD, Krivine), and have read about the CPS transform, but I
don't think I have enough knowledge or context to put them all together in practice.

I have found plenty of resources on the type-inference side of things so I don't think that'll be a big issue
(famous last words :sweat_smile:).

Does anyone know any resources I should check out related to the above? Again, apologies for the somewhat off-topic
post.
      

** Jack Feser replied


Have you seen "Implementing functional languages: a tutorial"? Might have some more of the practical side that
you're looking for.

https://www.microsoft.com/en-us/research/publication/implementing-functional-languages-a-tutorial/
      

** Josh Berdine also replied


I think you probably can't go wrong by having a read of:

J. Gregory Morrisett, David Walker, Karl Crary, Neal Glew:
From system F to typed assembly language. ACM Trans. Program. Lang. Syst. 21(3): 527-568 (1999)

Also, while not about the type systems you mention, the Rabbit and series of "Lambda the Ultimate" papers are
excellent.
      

** dimitris also replied


Hi, maybe this is a good starting point or at least useful reading:

- "Compiling functional languages"  https://xavierleroy.org/talks/compilation-agay.pdf
- "From Krivine’s machine to the Caml implementations" https://xavierleroy.org/talks/zam-kazam05.pdf
      

** Qifan Wang also replied


I think Appel’s famous book /Compiling with Continuations/ is still practically enough for compiling call by value
typed programs to assembly using CPS along.
      



* OCaml 4.12.0 released (with 4.11.2 too)
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/ocaml-4-12-0-released-with-4-11-2-too/7358/2

** octachron announced


The OCaml team has the pleasure of celebrating the birthday of Jacques de Vaucanson
by announcing the joint releases of OCaml version 4.12.0 and 4.11.2.

Some of the highlights in the 4.12.0 release are:

- Major progress in reducing the difference between the mainline and multicore runtime
- A new configuration option ~ocaml-option-nnpchecker~ which emits an alarm
  when the garbage collector finds out-of-heap pointers that could cause a crash
  in the multicore runtime
- Support for macOS/arm64
- Mnemonic names for warnings
- Many quality of life improvements
- Many bug fixes

The 4.11.2 release is a collection of safe bug fixes, cherry-picked from the 4.12.0 development
cycle. If you were using OCaml 4.11.1 and cannot yet upgrade to 4.12.0, this release is for you.

The full list of changes can be found in the changelogs below.

Those releases are available as OPAM switches, and as a source download here:

- https://github.com/ocaml/ocaml/archive/4.12.0.tar.gz
- https://caml.inria.fr/pub/distrib/ocaml-4.12/

and there:

- https://github.com/ocaml/ocaml/archive/4.11.2.tar.gz
- https://caml.inria.fr/pub/distrib/ocaml-4.11/

Happy hacking,

-- Florian Angeletti for the OCaml team.

*** OCaml 4.11.2 (24 February 2021)

**** Build system:

- [[https://github.com/ocaml/ocaml/issues/9938][9938]], [[https://github.com/ocaml/ocaml/issues/9939][9939]]: Define __USE_MINGW_ANSI_STDIO=0 for the mingw-w64 ports to prevent their C99-compliant snprintf conflicting with ours. (David Allsopp, report by Michael Soegtrop, review by Xavier Leroy)

**** Runtime system:

- [[https://github.com/ocaml/ocaml/issues/10056][10056]]: Memprof: ensure young_trigger is within the bounds of the minor heap in caml_memprof_renew_minor_sample (regression from [[https://github.com/ocaml/ocaml/issues/8684][8684]]) (David Allsopp, review by Guillaume Munch-Maccagnoni and Jacques-Henri Jourdan)

- [[https://github.com/ocaml/ocaml/issues/9654][9654]]: More efficient management of code fragments. (Xavier Leroy, review by Jacques-Henri Jourdan, Damien Doligez, and Stephen Dolan)

**** Tools:

- [[https://github.com/ocaml/ocaml/issues/9606][9606]], [[https://github.com/ocaml/ocaml/issues/9635][9635]], [[https://github.com/ocaml/ocaml/issues/9637][9637]]: fix performance regression in the debugger (behaviors quadratic in the size of the debugged program) (Xavier Leroy, report by Jacques Garrigue and Virgile Prevosto, review by David Allsopp and Jacques-Henri Jourdan)

**** Code generation and optimizations:

- [[https://github.com/ocaml/ocaml/issues/9969][9969]], [[https://github.com/ocaml/ocaml/issues/9981][9981]]: Added mergeable flag to ELF sections containing mergeable constants.  Fixes compatibility with the integrated assembler in clang 11.0.0. (Jacob Young, review by Nicolás Ojeda Bär)

**** Bug fixes:

- [[https://github.com/ocaml/ocaml/issues/9970][9970]], [[https://github.com/ocaml/ocaml/issues/10010][10010]]: fix the declaration scope of extensible-datatype constructors. A regression that dates back to 4.08 makes extensible-datatype constructors with inline records very fragile, for example: ~type 'a t += X of {x : 'a}~ (Gabriel Scherer, review by Thomas Refis and Leo White, report by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/9096][9096]], [[https://github.com/ocaml/ocaml/issues/10096][10096]]: fix a 4.11.0 performance regression in classes/objects declared within a function (Gabriel Scherer, review by Leo White, report by Sacha Ayoun)

- [[https://github.com/ocaml/ocaml/issues/9326][9326]], [[https://github.com/ocaml/ocaml/issues/10125][10125]]: Gc.set incorrectly handles the three ~custom_*~ fields, causing a performance regression (report by Emilio Jesús Gallego Arias, analysis and fix by Stephen Dolan, code by Xavier Leroy, review by Hugo Heuzard and Gabriel Scherer)

*** OCaml 4.12.0 (24 February 2021)

**** Supported platforms (highlights):

- [[https://github.com/ocaml/ocaml/issues/9699][9699]]: add support for iOS and macOS on ARM 64 bits (Eduardo Rafael, review by Xavier Leroy, Nicolás Ojeda Bär and Anil Madhavapeddy, additional testing by Michael Schmidt)

**** Standard library (highlights):

- [[https://github.com/ocaml/ocaml/issues/9797][9797]]: Add Sys.mkdir and Sys.rmdir. (David Allsopp, review by Nicolás Ojeda Bär, Sébastien Hinderer and Xavier Leroy)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9765][9765]]: add init functions to Bigarray. (Jeremy Yallop, review by Gabriel Scherer, Nicolás Ojeda Bär, and Xavier Leroy)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9668][9668]]: List.equal, List.compare (This could break code using "open List" by shadowing Stdlib.{equal,compare}.) (Gabriel Scherer, review by Nicolás Ojeda Bär, Daniel Bünzli and Alain Frisch)

- [[https://github.com/ocaml/ocaml/issues/9066][9066]]: a new Either module with ~type 'a Either.t = Left of 'a | Right of 'b~ (Gabriel Scherer, review by Daniel Bünzli, Thomas Refis, Jeremy Yallop)

- [[https://github.com/ocaml/ocaml/issues/9066][9066]]: ~List.partition_map : ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list~ (Gabriel Scherer, review by Jeremy Yallop)

- [[https://github.com/ocaml/ocaml/issues/9865][9865]]: add Format.pp_print_seq (Raphaël Proust, review by Nicolás Ojeda Bär)

**** Compiler user-interface and warnings (highlights):

- [[https://github.com/ocaml/ocaml/issues/9657][9657]]: Warnings can now be referred to by their mnemonic name. The names are displayed using `-warn-help` and can be utilized anywhere where a warning list specification is expected.
  #+begin_example
      ocamlc -w +fragile-match
      ...[@@ocaml.warning "-fragile-match"]
  #+end_example
  Note that only a single warning name at a time is supported for now:
  "-w +foo-bar" does not work, you must use "-w +foo -w -bar".
  (Nicolás Ojeda Bär, review by Gabriel Scherer, Florian Angeletti and
   Leo White)

- [[https://github.com/ocaml/ocaml/issues/8939][8939]]: Command-line option to save Linear IR before emit.
  (Greta Yorsh, review by Mark Shinwell, Sébastien Hinderer and Frédéric Bour)

- [[https://github.com/ocaml/ocaml/issues/9003][9003]]: Start compilation from Emit when the input file is in Linear IR format. (Greta Yorsh, review by Jérémie Dimino, Gabriel Scherer and Frédéric Bour)

**** Language features (highlights):

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9500][9500]], [[https://github.com/ocaml/ocaml/issues/9727][9727]], [[https://github.com/ocaml/ocaml/issues/9866][9866]], [[https://github.com/ocaml/ocaml/issues/9870][9870]], [[https://github.com/ocaml/ocaml/issues/9873][9873]]: Injectivity annotations One can now mark type parameters as injective, which is useful for abstract types:
  #+begin_src ocaml
    module Vec : sig type !'a t end = struct type 'a t = 'a array end
  #+end_src
  On non-abstract types, this can be used to check the injectivity of
  parameters. Since all parameters of record and sum types are by definition
  injective, this only makes sense for type abbreviations:
  #+begin_src ocaml
    type !'a t = 'a list
  #+end_src
  Note that this change required making the regularity check stricter.
  (Jacques Garrigue, review by Jeremy Yallop and Leo White)

**** Runtime system (highlights):

- [[https://github.com/ocaml/ocaml/issues/9534][9534]], [[https://github.com/ocaml/ocaml/issues/9947][9947]]: Introduce a naked pointers checker mode to the runtime (configure option --enable-naked-pointers-checker).  Alarms are printed when the garbage collector finds out-of-heap pointers that could cause a crash in no-naked-pointers mode. (Enguerrand Decorne, KC Sivaramakrishnan, Xavier Leroy, Stephen Dolan, David Allsopp, Nicolás Ojeda Bär review by Xavier Leroy, Nicolás Ojeda Bär)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/1128][1128]], [[https://github.com/ocaml/ocaml/issues/7503][7503]], [[https://github.com/ocaml/ocaml/issues/9036][9036]], [[https://github.com/ocaml/ocaml/issues/9722][9722]], [[https://github.com/ocaml/ocaml/issues/10069][10069]]: EINTR-based signal handling. When a signal arrives, avoid running its OCaml handler in the middle of a blocking section. Instead, allow control to return quickly to a polling point where the signal handler can safely run, ensuring that I/O locks are not held while it runs. A polling point was removed from caml_leave_blocking_section, and one added to caml_raise. (Stephen Dolan, review by Goswin von Brederlow, Xavier Leroy, Damien Doligez, Anil Madhavapeddy, Guillaume Munch-Maccagnoni and Jacques- Henri Jourdan)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/5154][5154]], [[https://github.com/ocaml/ocaml/issues/9569][9569]], [[https://github.com/ocaml/ocaml/issues/9734][9734]]: Add ~Val_none~, ~Some_val~, ~Is_none~, ~Is_some~, ~caml_alloc_some~, and ~Tag_some~. As these macros are sometimes defined by authors of C bindings, this change may cause warnings/errors in case of redefinition. (Nicolás Ojeda Bär, review by Stephen Dolan, Gabriel Scherer, Mark Shinwell, and Xavier Leroy)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9674][9674]]: Memprof: guarantee that an allocation callback is always run in the same thread the allocation takes place (Jacques-Henri Jourdan, review by Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/10025][10025]]: Track custom blocks (e.g. Bigarray) with Memprof (Stephen Dolan, review by Leo White, Gabriel Scherer and Jacques-Henri Jourdan)

- [[https://github.com/ocaml/ocaml/issues/9619][9619]]: Change representation of function closures so that code pointers can be easily distinguished from environment variables (Xavier Leroy, review by Mark Shinwell and Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/9654][9654]]: More efficient management of code fragments. (Xavier Leroy, review by Jacques-Henri Jourdan, Damien Doligez, and Stephen Dolan)

**** Other libraries (highlights):

- [[https://github.com/ocaml/ocaml/issues/9573][9573]]: reimplement Unix.create_process and related functions without
  Unix.fork, for better efficiency and compatibility with threads.
  (Xavier Leroy, review by Gabriel Scherer and Anil Madhavapeddy)

- [[https://github.com/ocaml/ocaml/issues/9575][9575]]: Add Unix.is_inet6_addr
  (Nicolás Ojeda Bär, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9930][9930]]: new module Semaphore in the thread library, implementing
  counting semaphores and binary semaphores
  (Xavier Leroy, review by Daniel Bünzli and Damien Doligez,
   additional suggestions by Stephen Dolan and Craig Ferguson)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9206][9206]], [[https://github.com/ocaml/ocaml/issues/9419][9419]]: update documentation of the threads library;
  deprecate Thread.kill, Thread.wait_read, Thread.wait_write,
  and the whole ThreadUnix module.
  (Xavier Leroy, review by Florian Angeletti, Guillaume Munch-Maccagnoni,
   and Gabriel Scherer)

**** Manual and documentation (highlights):

- [[https://github.com/ocaml/ocaml/issues/9755][9755]]: Manual: post-processing the html generated by ocamldoc and
   hevea. Improvements on design and navigation, including a mobile
   version, and a quick-search functionality for the API.
   (San Vũ Ngọc, review by David Allsopp and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/9468][9468]]: HACKING.adoc: using dune to get merlin support
  (Thomas Refis, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9684][9684]]: document in address_class.h the runtime value model in
  naked-pointers and no-naked-pointers mode
  (Xavier Leroy and Gabriel Scherer)

**** Internal/compiler-libs changes (highlights):

- [[https://github.com/ocaml/ocaml/issues/9464][9464]], [[https://github.com/ocaml/ocaml/issues/9493][9493]], [[https://github.com/ocaml/ocaml/issues/9520][9520]], [[https://github.com/ocaml/ocaml/issues/9563][9563]], [[https://github.com/ocaml/ocaml/issues/9599][9599]], [[https://github.com/ocaml/ocaml/issues/9608][9608]], [[https://github.com/ocaml/ocaml/issues/9647][9647]]: refactor the pattern-matching compiler
  (Thomas Refis and Gabriel Scherer, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/9696][9696]]: ocamltest now shows its log when a test fails. In addition, the log
  contains the output of executed programs.
  (Nicolás Ojeda Bär, review by David Allsopp, Sébastien Hinderer and Gabriel
  Scherer)

**** Build system (highlights):

- [[https://github.com/ocaml/ocaml/issues/9824][9824]], [[https://github.com/ocaml/ocaml/issues/9837][9837]]: Honour the CFLAGS and CPPFLAGS variables. (Sébastien Hinderer, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/10063][10063]]: (Re-)enable building on illumos (SmartOS, OmniOS, ...) and
  Oracle Solaris; x86_64/GCC and 64-bit SPARC/Sun PRO C compilers.
  (partially revert [[https://github.com/ocaml/ocaml/issues/2024][2024]]).
  (Tõivo Leedjärv and Konstantin Romanov,
   review by Gabriel Scherer, Sébastien Hinderer and Xavier Leroy)

**** Language features:

- [[https://github.com/ocaml/ocaml/issues/1655][1655]]: pattern aliases do not ignore type constraints
  (Thomas Refis, review by Jacques Garrigue and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9429][9429]]: Add unary operators containing ~#~ to the parser for use in ppx rewriters (Leo White, review by Damien Doligez)

**** Runtime system:

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9697][9697]]: Remove the Is_in_code_area macro and the registration of DLL code
  areas in the page table, subsumed by the new code fragment management API
  (Xavier Leroy, review by Jacques-Henri Jourdan)

- [[https://github.com/ocaml/ocaml/issues/9756][9756]]: garbage collector colors change
  removes the gray color from the major gc
  (Sadiq Jaffer and Stephen Dolan reviewed by Xavier Leroy,
  KC Sivaramakrishnan, Damien Doligez and Jacques-Henri Jourdan)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9513][9513]]: Selectively initialise blocks in ~Obj.new_block~. Reject ~Custom_tag~
  objects and zero-length ~String_tag~ objects.
  (KC Sivaramakrishnan, review by David Allsopp, Xavier Leroy, Mark Shinwell
  and Leo White)

- [[https://github.com/ocaml/ocaml/issues/9564][9564]]: Add a macro to construct out-of-heap block header.
  (KC Sivaramakrishnan, review by Stephen Dolan, Gabriel Scherer,
   and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9951][9951]]: Ensure that the mark stack push optimisation handles naked pointers
  (KC Sivaramakrishnan, reported by Enguerrand Decorne, review by Gabriel
   Scherer, and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9678][9678]]: Reimplement ~Obj.reachable_words~ using a hash table to
  detect sharing, instead of temporary in-place modifications.  This
  is a prerequisite for Multicore OCaml.
  (Xavier Leroy, review by Jacques-Henri Jourdan and Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/1795][1795]], [[https://github.com/ocaml/ocaml/issues/9543][9543]]: modernize signal handling on Linux i386, PowerPC, and s390x,
  adding support for Musl ppc64le along the way.
  (Xavier Leroy and Anil Madhavapeddy, review by Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/9648][9648]], [[https://github.com/ocaml/ocaml/issues/9689][9689]]: Update the generic hash function to take advantage
  of the new representation for function closures
  (Xavier Leroy, review by Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/9649][9649]]: Update the marshaler (output_value) to take advantage
  of the new representation for function closures
  (Xavier Leroy, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/10050][10050]]: update {PUSH,}OFFSETCLOSURE* bytecode instructions to match new
  representation for closures
  (Nathanaël Courant, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9728][9728]]: Take advantage of the new closure representation to simplify the
  compaction algorithm and remove its dependence on the page table
  (Damien Doligez, review by Jacques-Henri Jourdan and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/2195][2195]]: Improve error message in bytecode stack trace printing and load
  debug information during bytecode startup if OCAMLRUNPARAM=b=2.
  (David Allsopp, review by Gabriel Scherer and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9466][9466]]: Memprof: optimize random samples generation.
  (Jacques-Henri Jourdan, review by Xavier Leroy and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/9628][9628]]: Memprof: disable sampling when memprof is suspended.
  (Jacques-Henri Jourdan, review by Gabriel Scherer and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/10056][10056]]: Memprof: ensure young_trigger is within the bounds of the minor
  heap in caml_memprof_renew_minor_sample (regression from [[https://github.com/ocaml/ocaml/issues/8684][8684]])
  (David Allsopp, review by Guillaume Munch-Maccagnoni and
  Jacques-Henri Jourdan)

- [[https://github.com/ocaml/ocaml/issues/9506][9506]]: Remove support for FreeBSD prior to 4.0R, that required explicit
  floating-point initialization to behave like IEEE standard
  (Hannes Mehnert, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/8807][8807]], [[https://github.com/ocaml/ocaml/issues/9503][9503]]: Use different symbols for do_local_roots on bytecode and native
  (Stephen Dolan, review by David Allsopp and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9670][9670]]: Report full major collections in Gc stats.
  (Leo White, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9675][9675]]: Remove the caml_static_{alloc,free,resize} primitives, now unused.
  (Xavier Leroy, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9710][9710]]: Drop "support" for an hypothetical JIT for OCaml bytecode
   which has never existed.
  (Jacques-Henri Jourdan, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9742][9742]], [[https://github.com/ocaml/ocaml/issues/9989][9989]]: Ephemerons are now compatible with infix pointers occurring
   when using mutually recursive functions.
   (Jacques-Henri Jourdan, review by François Bobot)

- [[https://github.com/ocaml/ocaml/issues/9888][9888]], [[https://github.com/ocaml/ocaml/issues/9890][9890]]: Fixes a bug in the ~riscv~ backend where register t0 was not
  saved/restored when performing a GC. This could potentially lead to a
  segfault.
  (Nicolás Ojeda Bär, report by Xavier Leroy, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9907][9907]]: Fix native toplevel on native Windows.
  (David Allsopp, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/9909][9909]]: Remove caml_code_area_start and caml_code_area_end globals (no longer
  needed as the pagetable heads towards retirement).
  (David Allsopp, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9949][9949]]: Clarify documentation of GC message 0x1 and make sure it is
  displayed every time a major cycle is forcibly finished.
  (Damien Doligez, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/10062][10062]]: set ARCH_INT64_PRINTF_FORMAT correctly for both modes of mingw-w64
  (David Allsopp, review by Xavier Leroy)

**** Code generation and optimizations:

- [[https://github.com/ocaml/ocaml/issues/9551][9551]]: ocamlc no longer loads DLLs at link time to check that
  external functions referenced from OCaml code are defined.
  Instead, .so/.dll files are parsed directly by pure OCaml code.
  (Nicolás Ojeda Bär, review by Daniel Bünzli, Gabriel Scherer,
   Anil Madhavapeddy, and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9620][9620]]: Limit the number of parameters for an uncurried or untupled
   function.  Functions with more parameters than that are left
   partially curried or tupled.
   (Xavier Leroy, review by Mark Shinwell)

- [[https://github.com/ocaml/ocaml/issues/9752][9752]]: Revised handling of calling conventions for external C functions.
   Provide a more precise description of the types of unboxed arguments,
   so that the ARM64 iOS/macOS calling conventions can be honored.
   (Xavier Leroy, review by Mark Shinwell and Eduardo Rafael)

- [[https://github.com/ocaml/ocaml/issues/9838][9838]]: Ensure that Cmm immediates are generated as Cconst_int where
  possible, improving instruction selection.
  (Stephen Dolan, review by Leo White and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9864][9864]]: Revised recognition of immediate arguments to integer operations.
  Fixes several issues that could have led to producing assembly code
  that is rejected by the assembler.
  (Xavier Leroy, review by Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/9969][9969]], [[https://github.com/ocaml/ocaml/issues/9981][9981]]: Added mergeable flag to ELF sections containing mergeable
  constants.  Fixes compatibility with the integrated assembler in clang 11.0.0.
  (Jacob Young, review by Nicolás Ojeda Bär)

**** Standard library:

- [[https://github.com/ocaml/ocaml/issues/9781][9781]]: add injectivity annotations to parameterized abstract types
  (Jeremy Yallop, review by Nicolás Ojeda Bär)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9554][9554]]: add primitive __FUNCTION__ that returns the name of the current method
  or function, including any enclosing module or class.
  (Nicolás Ojeda Bär, Stephen Dolan, review by Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/9075][9075]]: define to_rev_seq in Set and Map modules.
  (Sébastien Briais, review by Gabriel Scherer and Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/9561][9561]]: Unbox Unix.gettimeofday and Unix.time
  (Stephen Dolan, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/9570][9570]]: Provide an Atomic module with a trivial purely-sequential
  implementation, to help write code that is compatible with Multicore
  OCaml.
  (Gabriel Scherer, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/10035][10035]]: Make sure that flambda respects atomicity in the Atomic module.
  (Guillaume Munch-Maccagnoni, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9571][9571]]: Make at_exit and Printexc.register_printer thread-safe.
  (Guillaume Munch-Maccagnoni, review by Gabriel Scherer and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9587][9587]]: Arg: new Rest_all spec to get all rest arguments in a list
  (this is similar to Rest, but makes it possible to detect when there
   are no arguments (an empty list) after the rest marker)
  (Gabriel Scherer, review by Nicolás Ojeda Bär and David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/9655][9655]]: Obj: introduce type raw_data and functions raw_field, set_raw_field
   to manipulate out-of-heap pointers in no-naked-pointer mode,
   and more generally all other data that is not a well-formed OCaml value
   (Xavier Leroy, review by Damien Doligez and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9663][9663]]: Extend Printexc API for raw backtrace entries.
  (Stephen Dolan, review by Nicolás Ojeda Bär and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9763][9763]]: Add function Hashtbl.rebuild to convert from old hash table
  formats (that may have been saved to persistent storage) to the
  current hash table format.  Remove leftover support for the hash
  table format and generic hash function that were in use before OCaml 4.00.
  (Xavier Leroy, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/10070][10070]]: Fix Float.Array.blit when source and destination arrays coincide.
  (Nicolás Ojeda Bär, review by Alain Frisch and Xavier Leroy)

**** Other libraries:

- [[https://github.com/ocaml/ocaml/issues/8796][8796]]: On Windows, make Unix.utimes use FILE_FLAG_BACKUP_SEMANTICS flag
  to allow it to work with directories.
  (Daniil Baturin, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/9593][9593]]: Use new flag for non-elevated symbolic links and test for Developer
  Mode on Windows
  (Manuel Hornung, review by David Allsopp and Nicolás Ojeda Bär)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9601][9601]]: Return EPERM for EUNKNOWN -1314 in win32unix (principally affects
  error handling when Unix.symlink is unavailable)
  (David Allsopp, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9338][9338]], [[https://github.com/ocaml/ocaml/issues/9790][9790]]: Dynlink: make sure *_units () functions report accurate
  information before the first load.
  (Daniel Bünzli, review by Xavier Leroy and Nicolás Ojeda Bär)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9757][9757]], [[https://github.com/ocaml/ocaml/issues/9846][9846]], [[https://github.com/ocaml/ocaml/issues/10161][10161]]: check proper ownership when operating over mutexes.
  Now, unlocking a mutex held by another thread or not locked at all
  reliably raises a Sys_error exception.  Before, it was undefined
  behavior, but the documentation did not say so.
  Likewise, locking a mutex already locked by the current thread
  reliably raises a Sys_error exception.  Before, it could
  deadlock or succeed (and do recursive locking), depending on the OS.
  (Xavier Leroy, report by Guillaume Munch-Maccagnoni, review by
  Guillaume Munch-Maccagnoni, David Allsopp, and Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/9802][9802]]: Ensure signals are handled before Unix.kill returns
  (Stephen Dolan, review by Jacques-Henri Jourdan)

- [[https://github.com/ocaml/ocaml/issues/9869][9869]], [[https://github.com/ocaml/ocaml/issues/10073][10073]]: Add Unix.SO_REUSEPORT
  (Yishuai Li, review by Xavier Leroy, amended by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/9906][9906]], [[https://github.com/ocaml/ocaml/issues/9914][9914]]: Add Unix._exit as a way to exit the process immediately,
  skipping any finalization action
  (Ivan Gotovchits and Xavier Leroy, review by Sébastien Hinderer and
   David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/9958][9958]]: Raise exception in case of error in Unix.setsid.
  (Nicolás Ojeda Bär, review by Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/9971][9971]], [[https://github.com/ocaml/ocaml/issues/9973][9973]]: Make sure the process can terminate when the last thread
  calls Thread.exit.
  (Xavier Leroy, report by Jacques-Henri Jourdan, review by David Allsopp
  and Jacques-Henri Jourdan).

**** Tools:

- [[https://github.com/ocaml/ocaml/issues/9551][9551]]: ocamlobjinfo is now able to display information on .cmxs shared
  libraries natively; it no longer requires libbfd to do so
  (Nicolás Ojeda Bär, review by Daniel Bünzli, Gabriel Scherer,
   Anil Madhavapeddy, and Xavier Leroy)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9299][9299]], [[https://github.com/ocaml/ocaml/issues/9795][9795]]: ocamldep: do not process files during cli parsing. Fixes
  various broken cli behaviours.
  (Daniel Bünzli, review by Nicolás Ojeda Bär)

**** Debugging and profiling:

- [[https://github.com/ocaml/ocaml/issues/9606][9606]], [[https://github.com/ocaml/ocaml/issues/9635][9635]], [[https://github.com/ocaml/ocaml/issues/9637][9637]]: fix 4.10 performance regression in the debugger
  (behaviors quadratic in the size of the debugged program)
  (Xavier Leroy, report by Jacques Garrigue and Virgile Prevosto,
  review by David Allsopp and Jacques-Henri Jourdan)

- [[https://github.com/ocaml/ocaml/issues/9948][9948]]: Remove Spacetime.
  (Nicolás Ojeda Bär, review by Stephen Dolan and Xavier Leroy)

**** Manual and documentation:

- [[https://github.com/ocaml/ocaml/issues/10142][10142]], [[https://github.com/ocaml/ocaml/issues/10154][10154]]: improved rendering and latex code for toplevel code examples.
  (Florian Angeletti, report by John Whitington, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9745][9745]]: Manual: Standard Library labeled and unlabeled documentation unified
  (John Whitington, review by Nicolás Ojeda Bär, David Allsopp,
   Thomas Refis, and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/9877][9877]]: manual, warn that multi-index indexing operators should be defined in
  conjunction of single-index ones.
  (Florian Angeletti, review by Hezekiah M. Carty, Gabriel Scherer,
   and Marcello Seri)

- [[https://github.com/ocaml/ocaml/issues/10233][10233]]: Document ~-save-ir-after scheduling~ and update ~-stop-after~ options.
  (Greta Yorsh, review by Gabriel Scherer and Florian Angeletti)

**** Compiler user-interface and warnings:

- [[https://github.com/ocaml/ocaml/issues/1931][1931]]: rely on levels to enforce principality in patterns
  (Thomas Refis and Leo White, review by Jacques Garrigue)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/9011][9011]]: Do not create .a/.lib files when creating a .cmxa with no modules. macOS ar doesn't support creating empty .a files ([[https://github.com/ocaml/ocaml/issues/1094][1094]]) and MSVC doesn't permit .lib files to contain no objects. When linking with a .cmxa containing no modules, it is now not an error for there to be no .a/.lib file. (David Allsopp, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9560][9560]]: Report partial application warnings on type errors in applications.
  (Stephen Dolan, report and testcase by whitequark, review by Gabriel Scherer
   and Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/9583][9583]]: when bytecode linking fails due to an unavailable module, the module
  that requires it is now included in the error message.
  (Nicolás Ojeda Bär, review by Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/9615][9615]]: Attach package type attributes to core_type.
  When parsing constraints on a first class module, attributes found after the
  module type were parsed but ignored. Now they are attached to the
  corresponding core_type.
  (Etienne Millon, review by Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/6633][6633]], [[https://github.com/ocaml/ocaml/issues/9673][9673]]: Add hint when a module is used instead of a module type or
  when a module type is used instead of a module or when a class type is used
  instead of a class.
  (Xavier Van de Woestyne, report by whitequark, review by Florian Angeletti
  and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9754][9754]]: allow [@tailcall true] (equivalent to [@tailcall]) and
  [@tailcall false] (warns if on a tailcall)
  (Gabriel Scherer, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/9751][9751]]: Add warning 68. Pattern-matching depending on mutable state
  prevents the remaining arguments from being uncurried.
  (Hugo Heuzard, review by Leo White)

- [[https://github.com/ocaml/ocaml/issues/9783][9783]]: Widen warning 16 (Unerasable optional argument) to more cases.
  (Leo White, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/10008][10008]]: Improve error message for aliases to the current compilation unit.
  (Leo White, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/10046][10046]]: Link all DLLs with -static-libgcc on mingw32 to prevent dependency
  on libgcc_s_sjlj-1.dll with mingw-w64 runtime 8.0.0 (previously this was
  only needed for dllunix.dll).
  (David Allsopp, report by Andreas Hauptmann, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9634][9634]]: Allow initial and repeated commas in ~OCAMLRUNPARAM~.
  (Nicolás Ojeda Bär, review by Gabriel Scherer)

**** Internal/compiler-libs changes:

- [[https://github.com/ocaml/ocaml/issues/8987][8987]]: Make some locations more accurate
  (Thomas Refis, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9216][9216]]: add Lambda.duplicate which refreshes bound identifiers
  (Gabriel Scherer, review by Pierre Chambart and Vincent Laviron)

- [[https://github.com/ocaml/ocaml/issues/9376][9376]]: Remove spurious Ptop_defs from #use
  (Leo White, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/9604][9604]]: refactoring of the ocamltest codebase.
  (Nicolás Ojeda Bär, review by Gabriel Scherer and Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/9498][9498]], [[https://github.com/ocaml/ocaml/issues/9511][9511]]: make the pattern-matching analyzer more robust to
  or-pattern explosion, by stopping after the first counter-example to
  exhaustivity
  (Gabriel Scherer, review by Luc Maranget, Thomas Refis and Florian Angeletti,
   report by Alex Fedoseev through Hongbo Zhang)

- [[https://github.com/ocaml/ocaml/issues/9514][9514]]: optimize pattern-matching exhaustivity analysis in the single-row case
  (Gabriel Scherer, review by Stephen DOlan)

- [[https://github.com/ocaml/ocaml/issues/9442][9442]]: refactor the implementation of the [@tailcall] attribute
  to allow for a structured attribute payload
  (Gabriel Scherer, review by Vladimir Keleshev and Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/9688][9688]]: Expose the main entrypoint in compilerlibs
  (Stephen Dolan, review by Nicolás Ojeda Bär, Greta Yorsh and David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/9715][9715]]: recheck scope escapes after normalising paths
  (Matthew Ryan, review by Gabriel Scherer and Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/9778][9778]]: Fix printing for bindings where polymorphic type annotations and
  attributes are present.
  (Matthew Ryan, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/9797][9797]], [[https://github.com/ocaml/ocaml/issues/9849][9849]]: Eliminate the routine use of external commands in ocamltest.
  ocamltest no longer calls the mkdir, rm and ln external commands (at present,
  the only external command ocamltest uses is diff).
  (David Allsopp, review by Nicolás Ojeda Bär, Sébastien Hinderer and
   Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9801][9801]]: Don't ignore EOL-at-EOF differences in ocamltest.
  (David Allsopp, review by Damien Doligez, much input and thought from
   Daniel Bünzli, Damien Doligez, Sébastien Hinderer, and Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9889][9889]]: more caching when printing types with -short-path.
  (Florian Angeletti, review by Gabriel Scherer)

-  [[https://github.com/ocaml/ocaml/issues/9591][9591]]: fix pprint of polyvariants that start with a core_type, closed,
   not low (Chet Murthy, review by Florian Angeletti)

-  [[https://github.com/ocaml/ocaml/issues/9590][9590]]: fix pprint of extension constructors (and exceptions) that rebind
   (Chet Murthy, review by octachron@)

- [[https://github.com/ocaml/ocaml/issues/9963][9963]]: Centralized tracking of frontend's global state
  (Frédéric Bour and Thomas Refis, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9631][9631]]: Named text sections for caml_system__code_begin/end symbols
  (Greta Yorsh, review by Frédéric Bour)

- [[https://github.com/ocaml/ocaml/issues/9896][9896]]: Share the strings representing scopes, fixing some regression
  on .cmo/.cma sizes
  (Alain Frisch and Xavier Clerc, review by Gabriel Scherer)

**** Build system:

- [[https://github.com/ocaml/ocaml/issues/9332][9332]], [[https://github.com/ocaml/ocaml/issues/9518][9518]], [[https://github.com/ocaml/ocaml/issues/9529][9529]]: Cease storing C dependencies in the codebase. C
  dependencies are generated on-the-fly in development mode. For incremental
  compilation, the MSVC ports require GCC to be present.
  (David Allsopp, review by Sébastien Hinderer, YAML-fu by Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/7121][7121]], [[https://github.com/ocaml/ocaml/issues/9558][9558]]: Always have the autoconf-discovered ld in PACKLD, with
  extra flags in new variable PACKLD_FLAGS. For
  cross-compilation, this means the triplet-prefixed version will always be
  used.
  (David Allsopp, report by Adrian Nader, review by Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/9527][9527]]: stop including configuration when running 'clean' rules
  to avoid C dependency recomputation.
  (Gabriel Scherer, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/9804][9804]]: Build C stubs of libraries in otherlibs/ with debug info.
  (Stephen Dolan, review by Sébastien Hinderer and David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/9938][9938]], [[https://github.com/ocaml/ocaml/issues/9939][9939]]: Define __USE_MINGW_ANSI_STDIO=0 for the mingw-w64 ports to
  prevent their C99-compliant snprintf conflicting with ours.
  (David Allsopp, report by Michael Soegtrop, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9895][9895]], [[https://github.com/ocaml/ocaml/issues/9523][9523]]: Avoid conflict with C++20 by not installing VERSION to the OCaml
  Standard Library directory.
  (Bernhard Schommer, review by David Allsopp)

- [[https://github.com/ocaml/ocaml/issues/10044][10044]]: Always report the detected ARCH, MODEL and SYSTEM, even for bytecode-
  only builds (fixes a "configuration regression" from 4.08 for the Windows
  builds)
  (David Allsopp, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/10071][10071]]: Fix bug in tests/misc/weaklifetime.ml that was reported in [[https://github.com/ocaml/ocaml/issues/10055][10055]]
  (Damien Doligez and Gabriel Scherer, report by David Allsopp)

**** Bug fixes:

- [[https://github.com/ocaml/ocaml/issues/7538][7538]], [[https://github.com/ocaml/ocaml/issues/9669][9669]]: Check for misplaced attributes on module aliases
  (Leo White, report by Thomas Leonard, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/7813][7813]], [[https://github.com/ocaml/ocaml/issues/9955][9955]]: make sure the major GC cycle doesn't get stuck in Idle state
  (Damien Doligez, report by Anders Fugmann, review by Jacques-Henri Jourdan)

- [[https://github.com/ocaml/ocaml/issues/7902][7902]], [[https://github.com/ocaml/ocaml/issues/9556][9556]]: Type-checker infers recursive type, even though -rectypes is
  off.
  (Jacques Garrigue, report by Francois Pottier, review by Leo White)

- [[https://github.com/ocaml/ocaml/issues/8746][8746]]: Hashtbl: Restore ongoing traversal status after filter_map_inplace
  (Mehdi Bouaziz, review by Alain Frisch)

- [[https://github.com/ocaml/ocaml/issues/8747][8747]], [[https://github.com/ocaml/ocaml/issues/9709][9709]]: incorrect principality warning on functional updates of records
  (Jacques Garrigue, report and review by Thomas Refis)

- *breaking change* [[https://github.com/ocaml/ocaml/issues/8907][8907]], [[https://github.com/ocaml/ocaml/issues/9878][9878]]: ~Typemod.normalize_signature~ uses wrong environment
  (Jacques Garrigue, report and review by Leo White)

- [[https://github.com/ocaml/ocaml/issues/9421][9421]], [[https://github.com/ocaml/ocaml/issues/9427][9427]]: fix printing of ~(::)~ in ocamldoc
  (Florian Angeletti, report by Yawar Amin, review by Damien Doligez)

- [[https://github.com/ocaml/ocaml/issues/9440][9440]]: for a type extension constructor with parameterised arguments, REPL displayed <poly> for each as opposed to the concrete values used.
  (Christian Quinn, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9433][9433]]: Fix package constraints for module aliases
  (Leo White, review by Jacques Garrigue)

- [[https://github.com/ocaml/ocaml/issues/9469][9469]]: Better backtraces for lazy values
  (Leo White, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/9521][9521]], [[https://github.com/ocaml/ocaml/issues/9522][9522]]: correctly fail when comparing functions
  with Closure and Infix tags.
  (Gabriel Scherer and Jeremy Yallop and Xavier Leroy,
   report by Twitter user @st_toHKR through Jun Furuse)

- [[https://github.com/ocaml/ocaml/issues/9611][9611]]: maintain order of load path entries in various situations: when passing
  them to system linker, ppx contexts, etc.
  (Nicolás Ojeda Bär, review by Jérémie Dimino and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9633][9633]]: ocamltest: fix a bug when certain variables set in test scripts would
  be ignored (eg ~ocamlrunparam~).
  (Nicolás Ojeda Bär, review by Sébastien Hinderer)

- [[https://github.com/ocaml/ocaml/issues/9681][9681]], [[https://github.com/ocaml/ocaml/issues/9690][9690]], [[https://github.com/ocaml/ocaml/issues/9693][9693]]: small runtime changes
  for the new closure representation ([[https://github.com/ocaml/ocaml/issues/9619][9619]])
  (Xavier Leroy, Sadiq Jaffer, Gabriel Scherer,
   review by Xavier Leroy and Jacques-Henri Jourdan)

- [[https://github.com/ocaml/ocaml/issues/9739][9739]], [[https://github.com/ocaml/ocaml/issues/9747][9747]]: Avoid calling type variables, types that are not variables in
  recursive occurrence error messages
  (for instance, "Type variable int occurs inside int list")
  (Florian Angeletti, report by Stephen Dolan, review by Armaël Guéneau)

- [[https://github.com/ocaml/ocaml/issues/9759][9759]], [[https://github.com/ocaml/ocaml/issues/9767][9767]]: Spurious GADT ambiguity without -principal
  (Jacques Garrigue, report by Thomas Refis,
   review by Thomas Refis and Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9799][9799]], [[https://github.com/ocaml/ocaml/issues/9803][9803]]: make pat_env point to the correct environment
  (Thomas Refis, report by Alex Fedoseev, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9825][9825]], [[https://github.com/ocaml/ocaml/issues/9830][9830]]: the C global variable caml_fl_merge and the C function
  caml_spacetime_my_profinfo (bytecode version) were declared and
  defined with different types.  This is undefined behavior and
  cancause link-time errors with link-time optimization (LTO).
  (Xavier Leroy, report by Richard Jones, review by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/9753][9753]]: fix build for Android
  (Eduardo Rafael, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9848][9848]], [[https://github.com/ocaml/ocaml/issues/9855][9855]]: Fix double free of bytecode in toplevel
  (Stephen Dolan, report by Sampsa Kiiskinen, review by Gabriel Scherer)

- [[https://github.com/ocaml/ocaml/issues/9858][9858]], [[https://github.com/ocaml/ocaml/issues/9861][9861]]: Compiler fails with Ctype.Nondep_cannot_erase exception
  (Thomas Refis, report by Philippe Veber, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/9860][9860]]: wrong range constraint for subtract immediate on zSystems / s390x
  (Xavier Leroy, review by Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/9868][9868]], [[https://github.com/ocaml/ocaml/issues/9872][9872]], [[https://github.com/ocaml/ocaml/issues/9892][9892]]: bugs in {in,out}_channel_length and seek_in
  for files opened in text mode under Windows
  (Xavier Leroy, report by Alain Frisch, review by Nicolás Ojeda Bär
  and Alain Frisch)

- [[https://github.com/ocaml/ocaml/issues/9925][9925]]: Correct passing -fdebug-prefix-map to flexlink on Cygwin by prefixing
  it with -link.
  (David Allsopp, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9927][9927]]: Restore Cygwin64 support.
  (David Allsopp, review by Xavier Leroy)

- [[https://github.com/ocaml/ocaml/issues/9940][9940]]: Fix unboxing of allocated constants from other compilation units
  (Vincent Laviron, report by Stephen Dolan, review by Xavier Leroy and
  Stephen Dolan)

- [[https://github.com/ocaml/ocaml/issues/9991][9991]]: Fix reproducibility for ~-no-alias-deps~
  (Leo White, review by Gabriel Scherer and Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/9998][9998]]: Use Sys.opaque_identity in CamlinternalLazy.force
  This removes extra warning 59 messages when compiling afl-instrumented
  code with flambda -O3.
  (Vincent Laviron, report by Louis Gesbert, review by Gabriel Scherer and
   Pierre Chambart)

- [[https://github.com/ocaml/ocaml/issues/9999][9999]]: fix -dsource printing of the pattern ~(`A as x | (`B as x))~.
  (Gabriel Scherer, report by Anton Bachin, review by Florian Angeletti)

- [[https://github.com/ocaml/ocaml/issues/9970][9970]], [[https://github.com/ocaml/ocaml/issues/10010][10010]]: fix the declaration scope of extensible-datatype constructors.
  A regression that dates back to 4.08 makes extensible-datatype constructors
  with inline records very fragile, for example:
  #+begin_src ocaml
    type 'a t += X of {x : 'a}
  #+end_src
  (Gabriel Scherer, review by Thomas Refis and Leo White,
   report by Nicolás Ojeda Bär)

- [[https://github.com/ocaml/ocaml/issues/10048][10048]]: Fix bug with generalized local opens.
  (Leo White, review by Thomas Refis)

- [[https://github.com/ocaml/ocaml/issues/10106][10106]], [[https://github.com/ocaml/ocaml/issues/10112][10112]]: some expected-type explanations were forgotten
  after some let-bindings
  (Gabriel Scherer, review by Thomas Refis and Florian Angeletti,
   report by Daniil Baturin)
      

** Anil Madhavapeddy then said


And the [[https://www.ocaml.org/manual/][4.12.0 manual is now live]] on the website. Thank for you the excellent
improvement, @sanette!
      



* latest batteries release: v3.3.0
:PROPERTIES:
:CUSTOM_ID: 4
:END:
Archive: https://discuss.ocaml.org/t/ann-latest-batteries-release-v3-3-0/7389/1

** UnixJunkie announced


The batteries maintainers are pleased to announce the latest minor release of OCaml batteries-included: v3.3.0.
Batteries is an open-source, community-maintained, extended standard library for OCaml.
The latest version is available in opam.

Many thanks to all the contributors for this release!

The change log follows:
*** v3.3.0 (minor release)

- Several fixes for OCaml-4.12
  #994, #992,
  (kit-ty-kate)

- Support for ocaml-multicore in the Gc module
  #991
  (kit-ty-kate, review by Gabriel Scherer)

- Significant work preparing switch to dune
  #1025, #1024, #1023, #1022, #1021, #1020, #1019, #1017
  (Gabriel Scherer, review by Francois Berenger)

- Remove ~-rectypes~ from BatFingerTree and simpler implementation
  #1012
  (Gabriel Scherer)

- new BatEither module; available in all OCaml versions supported by batteries
  #1027
  The implementation comes from the stdlib and is due to Gabriel Scherer.
  (Francois Berenger, review by Gabriel Scherer)

- BatList.partition_map: ~('a -> ('b, 'c) BatEither.t) -> 'a list -> 'b list * 'c list~
  #1028                                                                         
  (Francois Berenger, review by Gabriel Scherer)                                

- BatSet: added several missing methods for compatibility with stdlib.          
        The implementation of filter, map and filter_map was adapted from       
        stdlib, authors of the original implementation are Xavier Leroy,        
        Albin Coquereau and Gabriel Scherer                                     
  #1006, #1008                                                                  
  (Jakob Krainz, review by Gabriel Scherer)                                     

- BatSeq: compatibility with stdlib.Seq
  #1005, #1007
  (Jakob Krainz, review by Gabriel Scherer)

- BatMap, BatSplay: find_first, find_first_opt, find_last, find_last_opt,
        to_rev_seq
        For compatibility with the stdlib.
        The implementation in BatMap was adapted from stdlib;
        authors of the original implementation are Albin Coquereau
        and Gabriel de Perthuis.
  #1000, #1031
  (Jakob Krainz, review by Gabriel Scherer)

- BatArray.remove_at: ~int -> 'a array -> 'a array~
  #996
  For compatibility with BatList
  (Francois Berenger, review by Cedric Cellier)

- BatDynArray: several new functions
  BatDynArray now exposes almost the same functionalities as BatArray
  #872
  (andrepd, review by Florent Monnier and Francois Berenger)

- BatDynArray: uniformization of exceptions and more documentation
  #988
  (Florent Monnier, review by Francois Berenger)

- BatDynArray: user input checks in left, right, tail
  #987
  (Florent Monnier, review by Francois Berenger)

- Fix stack overflow on Int32/64.pow with negative exponent (issue #989)
  #990
  (Cedric Cellier, review by Francois Berenger)

- BatList.unfold_exn is an alias for unfold_exc.
  BatRefList.find_exn is an alias for find_exc.
  #978
  (Cedric Cellier, review by Francois Berenger)
      



* Other OCaml News
:PROPERTIES:
:CUSTOM_ID: 5
:END:
** From the ocamlcore planet blog


Here are links from many OCaml blogs aggregated at [[http://ocaml.org/community/planet/][OCaml Planet]].

- [[https://coq.inria.fr/news/coq-platform-2021.02.0-is-out.html][Coq Platform 2021.02.0 is out]]
- [[https://coq.inria.fr/news/coq-8-13-1-is-out.html][Coq 8.13.1 is out]]
- [[http://math.andrej.com/2021/02/22/burali-forti-in-hott-uf/][The Burali-Forti argument in HoTT/UF]]
- [[https://tarides.com/blog/2021-02-15-partenering-for-more-diversity-in-tech][Partenering for more diversity in Tech]]
- [[https://www.ocamlpro.com/2021/02/09/opam-2-0-8-release/][opam 2.0.8 release]]
- [[https://rescript-lang.org/blog/release-9-0][ ReScript 9.0]]
- [[https://opam.ocaml.org/blog/opam-2-0-8/][opam 2.0.8 release]]
- [[https://opam.ocaml.org/blog/opam-2-1-0-beta4/][opam 2.1.0~beta4 released]]
- [[http://math.andrej.com/2021/02/03/synthetic-mathematics-with-excursion-to-computability/][Synthetic mathematics with an excursion into computability theory]]
- [[https://www.ocamlpro.com/2021/02/02/2020-at-ocamlpro/][2020 at OCamlPro]]
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
