<?xml version="1.0" encoding="utf-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2020.12.01</cwn_date>
    <cwn_prev>2020.11.24</cwn_prev>
    <cwn_next>2020.12.08</cwn_next>
    <cwn_date_text>November 24 to December 01, 2020</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>drom.0.2.0: OCaml Project Manager, beta release</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-drom-0-2-0-ocaml-project-manager-beta-release/6841/1</cwn_url>
      <cwn_who>Fabrice Le Fessant announced</cwn_who>
      <cwn_what>
I am happy to announce the first release of ~drom~, version 0.2.0, a
tool to create and manage OCaml projects. ~drom~ is a simple layer on
top of ~opam~ and ~dune~, with project and package descriptions
written in TOML syntax. It is an attempt at providing a ~cargo~-like
experience for developers, with builtin support for standard OCaml
tools (~opam~, ~dune~, ~odoc~, etc.) and source managers (Github for
now, with Github Actions and Github Pages).

There are mainly 2 use-cases of ~drom~:

- Scafolding tool: ~drom~ makes it easy to create OCaml projects by
  generating all the files needed for a standard OCaml project. It
  creates files for ~opam~ and ~dune~, formatters (~ocp-index~ and
  ~ocamlformat~), documentation (~sphinx~ and ~odoc~), testing
  directories and Github CI. Once these files have been created,
  ~drom~ is not needed anymore and you can keep using your preferred
  tools.

- Management tool: ~drom~ can also be used to keep managing the
  project afterwards. It has commands like ~drom build~ to build the
  project, automatically installing a local switch with all needed
  dependencies, ~drom doc~ to generate the documentation and ~drom
  test~ to execute tests. ~drom~ works as a simple interface over
  ~opam~ and ~dune~ so you almost never need to use them directly.

https://ocamlpro.github.io/drom

(this site and the documentation was mostly generated by ~drom~ itself)

~drom~ is available in the official opam repository.

Examples:

#+begin_example
$ drom new mylib --skeleton library // generate library project
                                    //           or
$ drom new hello                    // generate program project

$ cd hello
$ emacs drom.toml // edit the project description
$ drom project    // update files
$ drom build                  // create local switch and build
                              //      or
$ drom build --switch 4.10.0  // use global switch and build
$ ./hello         // run the executable
$ drom test       // run tests
$ drom install    // install in opam switch
#+end_example

This is an early release to get feedback from users. ~drom~ has been
tested on several of our internal projects, like ~opam-bin~ and
~ez_file~.

Since ~drom~ creates local ~opam~ switches for every project by
default (though it is possible to use global switches too), it is
advised to use it with ~opam-bin~ to speed up switch creation and
upgrades.

~drom~ works by creating projects using "skeletons", i.e. project and
package templates. ~drom~ comes with a few predefined skeletons
(~program~ or ~library~), and allows users to add their own
skeletons. We will of course extend the substitution language to help
users develop such new skeletons.

~drom~ is a collaborative work between OCamlPro and Origin Labs.
      </cwn_what>
      <cwn_who>François Bobot asked and Fabrice Le Fessant replied</cwn_who>
      <cwn_what>
#+begin_quote
I'm very happy to see work in the OCaml world in that direction. I was currently looking for
duniverse for that kind of need. Do they fullfil different needs or how do they compare?
#+end_quote

My understanding is that ~duniverse~ tackles the problem of the
"mono-repo", i.e. when you want to manage many different projects as
just one project, using ~dune~ capacity to build them all at once. I
would say that ~drom~ tackles an orthogonal problem, which is to
simplify the creation of simple OCaml projects (generating all the
standard files you need, like Makefile, dune-project, dune,
.ocamlformat, .github CI, documentation, license, etc.) and day-to-day
management (changing dependencies, having a copy of headers that you
can insert in new files, etc.). It also provides a single interface
over basic opam/dune commands.

It would probably be possible to use ~duninverse~ on a set of projects
containing projects generated by ~dune~, but I don't know enough about
~duniverse~ to be sure.

Of course, ~drom~ can manage projects composed of multiple libraries
and executables (called ~packages~ because ~drom~ generates one ~opam~
file for every one of them), but I wouldn't call that a mono-repo,
it's just frequent to have more than one package in a small project.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml on the BEAM webinar</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ocaml-on-the-beam-webinar/6851/1</cwn_url>
      <cwn_who>Yawar Amin announced</cwn_who>
      <cwn_what>
Erlang Solutions is going to do a webinar on Leandro Ostera's new BEAM backend for OCaml:
https://www2.erlang-solutions.com/webinar-registration-2

Should be exciting!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>ocaml-lsp-server 1.3.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-ocaml-lsp-server-1-3-0/6856/1</cwn_url>
      <cwn_who>Rudi Grinberg announced</cwn_who>
      <cwn_what>
On behalf of the ocaml-lsp team, I’d like to announce version 1.3.0.

This release an improvement in keyword completion and a new code action. Keywords are now filtered by
the context the user requested the completion, and there's a new code action to quickly populate .mli
files with the the inferred types from the .ml file.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml User Survey 2020</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-ocaml-user-survey-2020/6624/28</cwn_url>
      <cwn_who>Xavier Leroy announced</cwn_who>
      <cwn_what>
Here is a summary and analysis of the survey results I wrote on behalf of the OCaml Software
Foundation: https://www.dropbox.com/s/omba1d8vhljnrcn/OCaml-user-survey-2020.pdf?dl=0
Enjoy!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>http-cookie 2.0.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-http-cookie-2-0-0/6866/1</cwn_url>
      <cwn_who>Bikal Lem announced</cwn_who>
      <cwn_what>
A new version of ~cookies~ package - now named ~http-cookie~-  has been released to opam. This
version has been rewritten to remove all its external and ppx dependencies and now only depends on
stock ocaml and its stdlib.

~http-cookie~ is a [RFC 6265](https://tools.ietf.org/html/rfc6265) compliant HTTP cookie library.
RFC 6265 is a HTTP cookie standard specifying cookie data validity requirements.

Additionally, I have also removed the use of ~Result.t~ from the previous version and have used
plain old exceptions to denote any cookie data validation errors.

- [Github - http-cookie](https://github.com/lemaetech/http-cookie)
- [Docs - http-cookie](https://lemaetech.co.uk/http-cookie/)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>reparse 2.0.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-reparse-2-0-0/6868/1</cwn_url>
      <cwn_who>Bikal Lem announced</cwn_who>
      <cwn_what>
A new version of ~reparse~ 2.0.0 has been released to opam.

Reparse is a monadic, recursive descent based, comprehensive, parser construction library for ocaml.

*** CHANGES for version 2.0.0:

- Rewrite the whole package to use exceptions rather than ~result~ type
- Adds many more parsing combinators
- Adds comprehensive unit tests
- Adds comprehensive documentation, host documentation and add links in repo home page
- Adds abstraction for input source
- Provides unix file source and string input source
- Adds separate package ~reparse-unix~ for unix file input
- Adds calc.ml and json.ml in examples.

Additionally, the API is now comprehensively documented with at least an example for each API call.

- [Github Reparse](https://github.com/lemaetech/reparse)
- [API Docs](https://lemaetech.co.uk/reparse/)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>VSCode OCaml Platform v1.5.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-vscode-ocaml-platform-v1-5-0/6871/1</cwn_url>
      <cwn_who>Max Lantas announced</cwn_who>
      <cwn_what>
We are happy to announce the v1.5.0 release of [VSCode OCaml
Platform](https://github.com/ocamllabs/vscode-ocaml-platform), a Visual Studio Code extension for
OCaml. It is available on the [VSCode
Marketplace](https://marketplace.visualstudio.com/items?itemName=ocamllabs.ocaml-platform) and [Open
VSX Registry](https://open-vsx.org/extension/ocamllabs/ocaml-platform).

This release has the following changes:
- Highlight ~rec~ keyword in OCaml mli files for recursive modules ([#434](https://github.com/ocamllabs/vscode-ocaml-platform/pull/434))
- Highlight ~cram~ stanza in dune-project files ([#441](https://github.com/ocamllabs/vscode-ocaml-platform/pull/441))
- Fix reason highlighting of let extensions ([#447](https://github.com/ocamllabs/vscode-ocaml-platform/pull/447))
- Improve highlighting of Menhir new syntax ([#450](https://github.com/ocamllabs/vscode-ocaml-platform/pull/450))
- Improve Menhir syntax highlighting ([#455](https://github.com/ocamllabs/vscode-ocaml-platform/pull/455))
- Add ~Alt + P~ keyboard shortcut for infer interface code action ([#448](https://github.com/ocamllabs/vscode-ocaml-platform/pull/448))
- Infer interface when switching to a non-existing interface file ([#437](https://github.com/ocamllabs/vscode-ocaml-platform/pull/437))

This is the first release to be automatically published to Open VSX, which will benefit users of
[VSCodium](https://github.com/VSCodium/vscodium) and other editors.

Please feel free to share feedback.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Database modelling</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/database-modelling/1150/2</cwn_url>
      <cwn_who>Reviving this very old thread, paul announced</cwn_who>
      <cwn_what>
And a version for postgresql:
https://github.com/pat227/ocaml-pgsql-model.git
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Opium 0.19.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-opium-0-19-0/6876/1</cwn_url>
      <cwn_who>Thibaut Mattio announced</cwn_who>
      <cwn_what>
On behalf of the Opium team, I am pleased to announce a new version of Opium (~0.19.0~) is available on
Opam.

This release comes with a complete rewrite of Opium's internals to switch from Cohttp to Httpaf (work
done by @anuragsoni).

As demonstrated in several benchmarks, Httpaf's latency is much lower than Cohttp's in stress tests, so
it is expected that Opium will perform better in these high-pressure situations.

The underlying HTTP server implementation is now contained in a ~rock~ package, that provides a Service
and Filter implementation, inspired by Finagle's. The architecture is similar to Ruby's Rack library
(hence the name), so one can compose complex web applications by combining Rock applications.

The ~rock~ package offers a very slim API, with very few dependencies, so it should be an attractive
option for other Web frameworks to build on, which would allow the re-usability of middlewares and
handlers, independently of the framework used (e.g. one could use Sihl middlewares with Opium, and vice
versa).

Apart from the architectural changes, this release comes with a lot of additional utilities and
middlewares which should make Opium a better candidate for complex web applications, without having to
re-write a lot of common Web server functionalities.

The Request and Response modules now provide:
- JSON encoders/decoders with ~Yojson~
- HTML encoders/decoders with ~Tyxml~
- XML encoders/decoders with ~Tyxml~
- SVG encoders/decoders with ~Tyxml~
- multipart/form encoders/decoders with ~multipart_form_data~
- urlencoded encoders/decoders with ~Uri~

And the following middlewares are now built-in:
- ~debugger~ to display an HTML page with the errors in case of failures
- ~logger~ to log requests and responses, with a timer
- ~allow_cors~ to add CORS headers
- ~static~ to serve static content given a custom read function (e.g. read from S3)
- ~static_unix~ to serve static content from the local filesystem
- ~content_length~ to add the ~Content-Length~ header to responses
- ~method_override~ to replace the HTTP method with the one found in the ~_method~ field of ~application/x-www-form-urlencoded~ encoded ~POST~ requests.
- ~etag~ to add ~ETag~ header to the responses and send an HTTP code ~304~ when the computed ETag matches the one specified in the request.
- ~method_required~ to filter the requests by the HTTP method and respond with an HTTP code ~405~ if the method is not allowed.
- ~head~ to add supports for ~HEAD~ request for handlers that receive ~GET~ requests.

Lastly, this release also adds a package ~opium-testing~ that can be used to test Opium applications
with Alcotest. It provides ~Testable~ modules for every Opium types, and implements helper functions to
easily get an ~Opium.Response~ from an ~Opium.Request~.

As this release changes the API drastically, we will keep maintaining the ~0.18.0~ branch for bug
fixes, for users who don't want to (or can't) migrate to ~0.19.0~.

*** What's next?

Recent discussions have shown that building optimized applications was not trivial. This is partly due
to the lack of documentation, and probably because some configurations that should come by default, are
left to the user to optimize. Therefore, we will keep performance in mind for the next release and
investigate the current bottlenecks in Opium.

We will also continue adding higher-level functionalities to Opium to make users productive with
real-world applications. This includes:
- Sessions support (with signed cookies)
- Handlers for authentication
- Adding more middlewares (compression, flash messages, caching, etc.)

Your feedback is welcome, don't hesitate to open Issues on Github!
      </cwn_what>
      <cwn_who>Andreas Poisel asked and Anurag Soni replied</cwn_who>
      <cwn_what>
#+begin_quote
Does Opium + Httpaf support TLS?
#+end_quote

It doesn't at the moment.
      </cwn_what>
      <cwn_who>Calascibetta Romain then said</cwn_who>
      <cwn_what>
According the interface of ~opium~, it's possible to have the support of TLS (with ~ocaml-tls~) with
the [new version of Conduit](https://discuss.ocaml.org/t/ann-new-release-of-conduit/6611) and
[~paf~](https://github.com/dinosaure/paf-le-chien/) (which is a MirageOS compatible layer of HTTP/AF -
unreleased):

#+begin_src ocaml
let stack ip =
  Tcpip_stack_socket.UDPV4.connect (Some ip) >>= fun udpv4 ->
  Tcpip_stack_socket.TCPV4.connect (Some ip) >>= fun tcpv4 ->
  Tcpip_stack_socket.connect [ ip ] udpv4 tcpv4

let http_with_conduit (ip, port) error_handler request_handler =
  Paf.https httpaf_config ~error_handler ~request_handler:(fun _ -> request_handler)
    ({ Paf.TCP.stack= stack ip
     ; keepalive= None
     ; nodelay= false
     ; port= port}, Tls.Config.server ~certificates ())

let () = match Lwt_main.run (Opium.run (https_with_conduit (Ipaddr.V4.localhost, 4343)) opium_app) with
  | Ok () -> ()
  | Error err -> Fmt.epr "%a.\n%!" Conduit_mirage.pp_error err
#+end_src

I used it for a long time on my personal unikernels and did some tests to ensure that [it does fails
when it handles many requests](https://github.com/dinosaure/paf-le-chien/pull/12). Note that you are
able to use OpenSSL too if you want.
      </cwn_what>
      <cwn_who>Robin Björklin also replied</cwn_who>
      <cwn_what>
If you want to use this new version of Opium there are ways around this problem. You could have Haproxy
(or similar) terminate your TLS connections externally and if your environment requires TLS for your
internal network something like [Consul
Connect](https://learn.hashicorp.com/tutorials/consul/get-started-service-networking?in=consul/getting-started)
can cover that use-case for you.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Operator lookup tool for OCaml</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-operator-lookup-tool-for-ocaml/6882/1</cwn_url>
      <cwn_who>Craig Ferguson announced</cwn_who>
      <cwn_what>
I'm pleased to announce the initial release of craigfe.io/operator-lookup/, a search tool for OCaml
operators and syntax elements:

https://aws1.discourse-cdn.com/standard11/uploads/ocaml/optimized/2X/e/ee41569b4426c9b77fd6d367e50ff5ac759f4e46_2_1034x558.png

For each operator, the tool provides a short explanation of its behaviour, examples of usage and
warnings of common misuses and misunderstandings:

https://aws1.discourse-cdn.com/standard11/uploads/ocaml/optimized/2X/8/879ae652a8895fa0258bc288c8d0c819cb9ef314_2_920x1000.png

The intent of writing this tool was to give OCaml beginners a quick way to find the standard /
conventional operators in the language and to disambiguate "operator-like" syntax that can be hard to
search for otherwise. It currently supports:

- all standard library operators,
- conventional infix operators (~>>=~, ~>>|~, ~>|=~),
- binding operators (~let+~, ~let*~, ~and+~, etc.),
- syntax that is often confused for an operator (~#~, ~;;~).

Please let me know if you have any suggestions for improvements. I hope you find it useful!

*** Acknowledgements

This tool is heavily based on the [JavaScript operator
lookup](https://www.joshwcomeau.com/operator-lookup/) utility by [Josh
Comeau](https://twitter.com/JoshWComeau). Thanks to him for the initial idea and for allowing me to
re-use his design elements.
      </cwn_what>
      <cwn_who>Kakadu asked and Craig Ferguson replied</cwn_who>
      <cwn_what>
#+begin_quote
It's not obvious for me are these operators hardcoded or do you scan opam packages from time to time?
#+end_quote

They're hardcoded. The operators fall into three classes:

-  The vast majority of them are from the ~Stdlib~ module, so I don't expect those to change very regularly.

- A small number of  "conventional" operators used in the community (~>>=~, ~let*~, etc.). Even for that small set there is some divergence in Opam – c.f. ~>>|~ vs ~>|=~ for a _map_ operator – so I suspect there are not many other candidates for this group.

- There are a few regexes behind the scenes for catching valid operator names that don't fall into the first two categories. e.g. many search terms are classified as "_a left-associative operator_" with a correspondingly vague description.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at [[http://ocaml.org/community/planet/][OCaml Planet]].

- [[https://seb.mondet.org/b/0009-dune-universe-hack.html][“Universal” Dune Tip: Rebuild Stuff, Sometimes]]
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
