<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2015.12.15</cwn_date>
    <cwn_prev>2015.12.08</cwn_prev>
    <cwn_next>2015.12.22</cwn_next>
    <cwn_date_text>December 08 to 15, 2015</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Next OUPS meetup, 16th of December 2015</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-12/msg00057.html</cwn_url>
      <cwn_who>Louis Roché announced</cwn_who>
      <cwn_what>
The next OUPS meetup will take place on the 16th of December 7pm, at
the school 42 (96 Boulevard Bessières). We will have a few talks, followed by
pizzas.

The talks will be the following:

- David Giron - Présentation de la pédagogie de 42 appliqué à OCaml
- Francois Berenger: Le logiciel Daft (Distributed file transfer application in user space)
- Benjamin Canou: Présentation du MOOC OCaml

Note that we are always in demand of talk *proposals* for future
meetups.

To register, or for more information, go here:
http://www.meetup.com/fr/ocaml-paris/events/227210014/
(Registration is recommended, so that we can order enough food.)

Videos from previous sessions are available online:
https://www.irill.org/videos/

Map:
École 42
96 Boulevard Bessières
75017 Paris
https://goo.gl/maps/bpSUmxd48UL2
The meetup organizers.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>webmachine.0.3.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-12/msg00058.html</cwn_url>
      <cwn_who>Spiros Eliopoulos announced</cwn_who>
      <cwn_what>
I wanted to bring to your attention the latest release of webmachine, weighing
in at version 0.3.0. This release includes bugfixes and a few major API
changes. Most notably is the way that users must create redirect responses.
There was an ambiguity in the state machine when dealing with POST requests
and redirects. To allow both a Location header to be set for a POST response
and redirection, users should use the redirect function on the Rd record like
so:

Webmachine.continue body (Rd.redirect "/path/to/resource" rd)

Setting the Location header for a POST response remains unchanged.

In addition, the is_authorized handler now deviates slightly from the original
Erlang implementation. The return type for that function now looks like this:

type auth =
[ `Authorized (* The request is authorized to proceed *)
| `Basic of string (* Basic authentication challenge[0] for the given realm *)
| `Redirect of Uri.t (* Use the given URI to authenticate *)
]

You can see the full list of changes in the release notes:

https://github.com/inhabitedtype/ocaml-webmachine/releases/tag/0.3.0

As always, issues and pull requests are welcomed.

-Spiros E.

[0]: https://tools.ietf.org/html/rfc2617
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Do you use a debugger with OCaml? If not, why not?</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-12/msg00059.html</cwn_url>
      <cwn_who>A long time ago, John Whitington asked; Richard Jones now replied</cwn_who>
      <cwn_what>
&gt; So, I ask: What do you use for debugging small and large OCaml programs? If
&gt; not a debugger, why not? What problems prevent it? How does your debugging
&gt; process differ when writing OCaml compared with other languages you use?

No one seems to have mentioned gdb in this thread.  I use it on OCaml
programs quite often.  It's especially useful for finding bugs in my C
libraries :-)  In fact I missed gdb when we ported the tools to aarch64
because stack traces didn't work properly for quite a while [now fixed].
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Astring 0.8.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-12/msg00066.html</cwn_url>
      <cwn_who>Daniel Bünzli announced</cwn_who>
      <cwn_what>
I grew tired of the String module. Here's the first release of astring,
described by:

  Astring exposes an alternative String module for OCaml. This module tries to 
  balance minimality and expressiveness for basic, index-free, string processing 
  and provides types and functions for substrings, string sets and string maps.

  Remaining compatible with the OCaml String module is a non-goal. The 
  String module exposed by Astring has exception safe functions, removes 
  deprecated and rarely used functions, alters some signatures and names, adds
  a few missing functions and fully exploits OCaml's newfound string immutability.

  Astring depends only on the OCaml standard library. It is distributed 
  under the BSD3 license.


Feedback on the API is welcome, it could still slightly change before
stabilizing on a 1.0.0 release.

Homepage: http://erratique.ch/software/astring
API docs: http://erratique.ch/software/astring/doc/Astring

My thanks to David Kaloper for a heated and useful discussion about the API.
Remaining misconceptions are mine.
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
