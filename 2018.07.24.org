#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+TITLE: OCaml Weekly News
[[http://alan.petitepomme.net/cwn/2018.07.17.html][Previous Week]] [[http://alan.petitepomme.net/cwn/index.html][Up]] [[http://alan.petitepomme.net/cwn/2018.08.21.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of July 17 to 24, 2018.

The OCaml Weekly News are taking a summer break. See you on August 21st.

#+TOC: headlines 1


-----

* Cucumber.ml 1.0.0
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/ann-cucumber-ml-1-0-0/2304/1

** Christopher Yocum announced


Today I would like to announce the 1.0.0 release of [[https://github.com/cucumber/cucumber.ml][Cucumber.ml]], which brings [[https://en.wikipedia.org/wiki/Behavior-driven_development][Behaviour Driven Development]] via
[[https://docs.cucumber.io/][Cucumber]] to OCaml. Before I start though, I would
like to thank @Thegaram for his contributions and feedback.

I am declaring this 1.0.0 because I wanted to avoid the "forever beta" issue and most of the main features for using Cucumber are implemented so I decided to "just do it".

*** Why?

While many of OCaml's language features tend to reduce the need for testing in
general, I still feel that communicating between stakeholders and programmers is
important and Cucumber is well-placed to help in that. Additionally, I felt that
this was a good way for me to contribute to the OCaml ecosystem in a positive
way.

*** Installing

There are a few complications when working with Cucumber.ml. The first and the
most important is that Cucumber.ml delegates its Gherkin parsing to the
[[https://github.com/cucumber/cucumber/tree/master/gherkin/c][gherkin-c]]
implementation using OCaml's C interface. I did not use CStubs for this because
I am not familiar with it and I needed to deal with ~wchar_t~ that is used in
the gherkin-c and I did not know how to deal with that type via CStubs. This
means that, before you can use Cucumber.ml, you will need to compile and
install the gherkin-c as a shared library on your system.  On Linux, this means you will need to install libgherkin.so in ~/usr/lib~ and copy the gherkin-c header files into ~/usr/include/gherkin~.

Cucumber.ml uses the [[https://github.com/ocaml/dune][Dune build system]].  Unfortunately,
I have not yet added Cucumber.ml to the [[https://opam.ocaml.org/][Opam package manager]].  If anyone would like to help me do that, I would be very grateful.

Once you have checked out the code and have the above prerequisites installed, all you need to do is:

#+begin_src shell
dune build && dune install
#+end_src

which will install the ~cucumber~ package into your local Opam repository.  From there you can write your step definitions in OCaml and run your feature files against them.  For more information on how
to use Cucumber.ml, please see the Cucumber.ml [[https://github.com/cucumber/cucumber.ml/blob/v1.0.0/README.md][README]] file in the repository.

One of the more unusual aspects of Cucumber.ml is that it assumes that once you
start executing your step definitions that it will control the command line
arguments (and uses Cmdliner for that purpose). This can be surprising so please
be aware of it. Basically, the executable created by the compilation process
is the cucumber runner and it is that executable which will run your step definitions.

*** Features

There are many features that come with Cucumber.ml.

- Gherkin 5.0 is supported (Feature, Background, Given, When, Then, etc.)
- Datatable transforms (the user can define transformations for datatables but this is not done automatically and must be applied by the user)
- Before and After steps
- State passing is handled by the runner and is passed to Step definitions automatically

The state passing feature is, I believe, a first for a Cucumber implementation.

*** Roadmap

Cucumber.ml will work today and please let me know if you would like any more features.  However, here are a few things that I (or anyone else who wants to contribute) will be working on.

- Update to Gherkin 6.0 using [[https://github.com/cucumber/cucumber/issues/425][gherkin-go]]
- [[https://ocsigen.org/lwt/manual/][Lwt]] threading
- Bring Cucumber.ml fully within the Opam package manager

My main focus will be the first task on the list so I am looking forward to moving to the gherkin-go universal runner.

I hope you enjoy using it as much as I have had making it. If you have
any questions, you can ask on the [[https://cucumberbdd.slack.com][Cucumber Slack]] or you can drop an issue on the Github issue tracker.
      



-----

* Owl's Computation Graph
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/owls-computation-graph/2326/1

** Liang announced


Here is an article on Owl's new functor stack (with computation graph injected).
The article briefly goes through the motivation, design, and impact of the
recent inclusion of computation graph stack into Owl's base library.

Feedback are welcome so I can revise the article. I hope this is useful for you.

link to the article: http://ocaml.xyz/chapter/cgraph_intro.html
      



-----

* Color: library to work with css color formats
:PROPERTIES:
:CUSTOM_ID: 3
:END:
Archive: https://discuss.ocaml.org/t/color-library-to-work-with-css-color-formats/2328/1

** Anurag Soni announced


[[https://github.com/anuragsoni/color][Color]] is a small library that has
utilities to work with different color formats on web frontends. The goal will
be to make this easy to use for Css stylings. For now it allows converting
between some color formats. I also plan to look into color mixing and adding
built-in color names.

This is a first step in exploring typed css descriptions in OCaml.

Any feedback is welcome :slight_smile:
      



-----

* Other OCaml News
:PROPERTIES:
:CUSTOM_ID: 4
:END:
** From the ocamlcore planet blog


Here are links from many OCaml blogs aggregated at [[http://ocaml.org/community/planet/][OCaml Planet]].

- [[http://frama-c.com/index.html][frama-clang 0.0.6, compatible with Frama-C 17 Chlorine is out. Download it here.]]
- [[http://math.andrej.com/2018/07/22/algebraic-effects-and-handlers-at-oplss-2018/][Algebraic effects and handlers at OPLSS 2018]]
- [[http://www.ocamlpro.com/2018/07/20/new-updates-on-tzscan-2/][OCamlPro’s Tezos block explorer TzScan’s last updates]]
      



-----

* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[http://alan.petitepomme.net/cwn/][the archive]] or the [[http://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe [[http://lists.idyll.org/listinfo/caml-news-weekly/][online]].
-----
#+BEGIN_authorname
[[http://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
