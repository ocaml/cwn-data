<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2019.06.11</cwn_date>
    <cwn_prev>2019.06.04</cwn_prev>
    <cwn_next>2019.06.18</cwn_next>
    <cwn_date_text>June 04 to 11, 2019</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Dune 1.10.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-dune-1-10-0/3896/1</cwn_url>
      <cwn_who>Rudi Grinberg announced</cwn_who>
      <cwn_what>
On behalf of the dune team, I'm pleased to announce the 1.10.0 release of dune. This release is packed with bug fixes, but it also introduces a few interesting features. I'll highlight one important feature that we've introduced and plan to improve in future versions:

Dune allows you to specify package metadata in the dune project file and generate an appropriate opam file. This is advantageous to writing opam files manually as dune will correctly fill in some boilerplate such as the build command:

Here's a snippet from dune's own project file as a demonstration:

#+begin_example
(generate_opam_files true) ;; necessary to enbale the generation

(license MIT)
(maintainers "Jane Street Group, LLC &lt;opensource@janestreet.com&gt;")
(authors "Jane Street Group, LLC &lt;opensource@janestreet.com&gt;")
(source (github ocaml/dune))
(documentation "https://dune.readthedocs.io/")

(package
 (name dune)
 (depends
  (ocaml (&gt;= 4.02))
  base-unix
  base-threads)
 (conflicts
  (jbuilder (&lt;&gt; "transition"))
  (odoc (&lt; 1.3.0))
  (dune-release (&lt; 1.3.0)))
 (synopsis "Fast, portable and opinionated build system")
 (description "&lt;redacted&gt;"))
#+end_example

Generating the opam file is done via ~$ dune build @check~ (the ~@install~, and ~@all~ aliases will also work).

Later, we plan to have dune do some sanity checks on the ~depends~ field. In the more distant future, we might even skip the generation step altogether by having opam invoke dune to get the generated opam file directly.

As usual, the change log is replicated here for your convenience:

*** 1.10.0 (04/06/2019)

- Restricted the set of variables available for expansion in the destination
  filename of ~install~ stanza to simplify implementation and avoid dependency
  cycles. (#2073, @aalekseyev, @diml)

- [menhir] call menhir from context root build_dir (#2067, @ejgallego,
  review by @diml, @rgrinberg)

- [coq] Add ~coq.pp~ stanza to help with pre-processing of grammar
  files (#2054, @ejgallego, review by @rgrinberg)

- Add a new more generic form for the *promote* mode: ~(promote
  (until-clean) (into &lt;dir&gt;))~ (#2068, @diml)

- Allow to promote only a subset of the targets via ~(promote (only
  &lt;pred&gt;))~. For instance: ~(promote (only *.mli))~ (#2068, @diml)

- Improve the behavior when a strict subset of the targets of a rule is already
  in the source tree for projects using the dune language &lt; 1.10 (#2068, fixes
  #2061, @diml)

- With lang dune &gt;= 1.10, rules in standard mode are no longer allowed to
  produce targets that are present in the source tree. This has been a warning
  for long enough (#2068, @diml)

- Allow %{...} variables in pps flags (#2076, @mlasson review by @diml and
  @aalekseyev).

- Add a 'cookies' option to ppx_rewriter/deriver flags in library stanzas. This
  allow to specify cookie requests from variables expanded at each invocation of
  the preprocessor. (#2106, @mlasson @diml)

- Add more opam metadata and use it to generate ~.opam~ files. In particular, a
  ~package~ field has been added to specify package specific information.
  (#2017, #2091, @avsm, @jonludlam, @rgrinberg)

- Clean up the special support for ~findlib.dynload~. Before, Dune would simply
  match on the library name. Now, we only match on the findlib package name when
  the library doesn't come from Dune. Someone writing a library called
  ~findlib.dynload~ with Dune would have to add ~(special_builtin_support
  findlib_dynload)~ to trigger the special behavior. (#2115, @diml)

- Install the ~future_syntax~ preprocessor as ~ocaml-syntax-shims.exe~ (#2125,
  @rgrinberg)

- Hide full command on errors and warnings in development and show them in CI.
  (detected using the ~CI~ environment variable). Commands for which the
  invocation might be omitted must output an error prefixed with ~File ~. Add an
  ~--always-show-command-line~ option to disable this behavior and always show
  the full command. (#2120, fixes #1733, @rgrinberg)

- In ~dune-workspace~ files, add the ability to choose the host context and to
  create duplicates of the default context with different settings. (#2098,
  @TheLortex, review by @diml, @rgrinberg and @aalekseyev)

- Add support for hg in ~dune subst~ (#2135, @diml)

- Don't build documentation for implementations of virtual libraries (#2141,
  fixes #2138, @jonludlam)

- Fix generation of the ~-pp~ flag in .merlin (#2142, @rgrinberg)

- Make ~dune subst~ add a ~(version ...)~ field to the ~dune-project~
  file (#2148, @diml)

- Add the ~%{os_type}~ variable, which is a short-hand for
  ~%{ocaml-config:os_type}~ (#1764, @diml)

- Allow ~enabled_if~ fields in ~library~ stanzas, restricted to the
  ~%{os_type}~, ~%{model}~, ~%{architecture}~, ~%{system}~ variables (#1764,
  #2164 @diml, @rgrinberg)

- Fix ~chdir~ on external and source paths. Dune will also fail gracefully if
  the external or source path does not exist (#2165, fixes #2158, @rgrinberg)

- Support the ~.cc~ extension fro C++ sources (#2195, fixes #83, @rgrinberg)

- Run ~ocamlformat~ relative to the context root. This improves the locations of
  errors. (#2196, fixes #1370, @rgrinberg)

- Fix detection of ~README~, ~LICENSE~, ~CHANGE~, and ~HISTORY~ files. These
  would be undetected whenever the project was nested in another workspace.
  (#2194, @rgrinberg)

- Fix generation of ~.merlin~ whenever there's more than one stanza with the
  same ppx preprocessing specification (#2209 ,fixes #2206, @rgrinberg)

- Fix generation of ~.merlin~ in the presence of the ~copy_files~ stanza and
  preprocessing specifications of other stanazs. (#2211, fixes #2206,
  @rgrinberg)

- Run ~refmt~ from the context's root directory. This improves error messages in
  case of syntax errors. (#2223, @rgrinberg)

- In .merlin files, don't pass ~-dump-ast~ to the ~future_syntax~ preprocessor.
  Merlin doesn't seem to like it when binary AST is generated by a ~-pp~
  preprocessor. (#2236, @aalekseyev)

- ~dune install~ will verify that all files mentioned in all .install files
  exist before trying to install anything. This prevents partial installation of
  packages (#2230, @rgrinberg)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml 4.08.0+rc2</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2019-06/msg00010.html</cwn_url>
      <cwn_who>Damien Doligez announced</cwn_who>
      <cwn_what>
The release of OCaml version 4.08.0 is imminent.  We have
created a second release candidate that you can test.

The source code is available at these addresses:

 https://github.com/ocaml/ocaml/archive/4.08.0+rc2.tar.gz \\
 https://caml.inria.fr/pub/distrib/ocaml-4.08/4.08.0+rc2.tar.gz

The compiler can also be installed as an OPAM switch with one of the
following commands.

#+begin_example
opam switch create ocaml-variants.4.08.0+rc2 --repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_example

or

#+begin_example
opam switch create ocaml-variants.4.08.0+rc2+&lt;VARIANT&gt; --repositories=default,beta=git+https://github.com/ocaml/ocaml-beta-repository.git
#+end_example

where you replace &lt;VARIANT&gt; with one of these:
- afl
- default_unsafe_string
- flambda
- fp
- fp+flambda

We want to know about all bugs. Please report them here:
 https://github.com/ocaml/ocaml/issues

Happy hacking,

-- Damien Doligez for the OCaml team.


The only change from rc1 is the bug fix for #8705:\\
  https://github.com/ocaml/ocaml/issues/8705\\
  https://github.com/ocaml/ocaml/pull/8706

Editor's note: please follow the archive link for the full changelog from 4.07.1.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>hdf5 0.1.5</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-hdf5-0-1-5/3897/1</cwn_url>
      <cwn_who>Vladimir Brankov announced</cwn_who>
      <cwn_what>
hdf5 0.1.5 is not available in OPAM.  Since the version 0.1.2 it mostly got bug fixes.

https://en.wikipedia.org/wiki/Hierarchical_Data_Format

https://github.com/vbrankov/hdf5-ocaml
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>2-year Postdoc Position on Frama-C/E-ACSL</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2019-06/msg00011.html</cwn_url>
      <cwn_who>Julien Signoles announced</cwn_who>
      <cwn_what>
The Software Reliability and Security Lab at CEA LIST (Paris Saclay,
France) is hiring a 2-year postdoctoral researcher who will improve E-ACSL,
the runtime verification plug-in of Frama-C.

Frama-C is an opensource framework providing several analyzers for C code.
The analyzed programs can be annotated by formal specifications written in
the ACSL specification language. E-ACSL is one of the existing Frama-C
analyzers. It converts ACSL annotations into C code in order to verify
their validity at runtime, when the program is being executed.

The goal of this postdoctoral position is twofolds: on the one hand, the
postdoctoral researcher shall propose new compilation schemes to support
additional ACSL constructs; on the other hand (s)he shall define new
compilation techniques (or adapt existing ones) in order to optimize the
generated code for reducing the time overhead and the memory footprint of
the generated program. The work will be guided by and evaluated on case
studies providing by a few of our academic and industrial partners.

Knowledge in at least one of the following fields is required:
- functional programming (ideally OCaml)
- C programming
- compilation
- static analysis
- semantics of programming languages
- runtime verification
- formal specification

A full description of the position is available online:

    http://julien.signoles.free.fr/positions/postdoc-eacsl.pdf

Feel free to contact me for additional details.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Category theory for Programmers book - OCaml flavor</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/category-theory-for-programmers-book-ocaml-flavor/3905/1</cwn_url>
      <cwn_who>Anton Kochkov announced</cwn_who>
      <cwn_what>
There is an amazing book called [Category Theory for Programmers by Bartosz Milewski](https://github.com/hmemcpy/milewski-ctfp-pdf). At first it was focused on Haskell mostly, added Scala support after. But then [someone stepped in](https://github.com/hmemcpy/milewski-ctfp-pdf/issues/169) to add the OCaml variant of this book.
So writing this message as both recommendation for the [book](https://github.com/hmemcpy/milewski-ctfp-pdf/releases/download/v1.2.1/category-theory-for-programmers.pdf) itself, and to be aware (and even better - to help) of the ongoing effort to make it OCaml-friendly.

https://aws1.discourse-cdn.com/standard11/uploads/ocaml/original/2X/5/57d74aa703578b90c1d348a3f97226d30ec3c864.jpeg

See the current progress at https://github.com/ArulselvanMadhavan/ocaml-ctfp.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Genprint - general value printing</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-genprint-general-value-printing/3912/1</cwn_url>
      <cwn_who>progman announced</cwn_who>
      <cwn_what>
This is a patch/switch for basic printing of any value (excepting abstract and polymorphic elements) exactly as printed by the toplevel for a final result.

It's appropriate for debug purposes where custom crafted or ppx-deriving printers are overkill/inconvenient.

https://github.com/progman1/genprint
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
