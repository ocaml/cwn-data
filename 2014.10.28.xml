<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2014.10.28</cwn_date>
    <cwn_prev>2014.10.21</cwn_prev>
    <cwn_next>2014.11.04</cwn_next>
    <cwn_date_text>October 21 to 28, 2014</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>String.create</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00165.html</cwn_url>
      <cwn_who>SÃ©bastien Hinderer asked and David Allsopp replied</cwn_who>
      <cwn_what>
&gt; OCaml 4.02.0 prints the following warning:
&gt; Warning 3: deprecated: String.create
&gt; 
&gt; The code that triggers this warning looks like this:
&gt; 
&gt; let buf = String.create size in
&gt; really_input ic buf 0 size;
&gt; 
&gt; Is there a way to fix the code so that it does not trigger this warning
&gt; but still compiles also with older versions of Caml, up to 3.10?

Yes - write your code to use Bytes
(&lt;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bytes.html&gt;) and
then add a requirement for findlib &gt;= 1.5 which includes the "bytes"
package (this is a dummy package for OCaml &gt;= 4.02 and a compatibility
layer for OCaml &lt; 4.02).

Alternatively, if for some very strange reason you're not happy to
depend on findlib, you can borrow its compatibility layer directly
(src/bytes/bytes.ml) and integrate that into your build system.
      </cwn_what>
      <cwn_who>Sylvain Pogodalla also replied</cwn_who>
      <cwn_what>
You can pass the -w -3 option to the compiler to disable waring
messages on deprecated features.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Upcoming OCaml Users in PariS meetups: 10/29 and 12/09</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00175.html</cwn_url>
      <cwn_who>Thomas Braibant announced</cwn_who>
      <cwn_what>
The next OUPS meetings will take place on the following dates:
- the 29th of october (next week!), we will have a compiler hacking
session at IRILL, starting at 7pm. More details are available here [1]
- the 9th of december, we will have a "regular" OUPS meetup. The
program will soon be available here [2]. If you would like to give a
talk, feel free to send me an email!

[1] http://www.meetup.com/ocaml-paris/events/215013812/
[2] http://www.meetup.com/ocaml-paris/events/215017872/
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OASIS v0.4.5</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00178.html</cwn_url>
      <cwn_who>Jacques-Pascal Deplaix announced</cwn_who>
      <cwn_what>
I and Sylvain Le Gall just released OASIS 0.4.5.

OASIS is a tool to help OCaml developers to integrate configure, build
and install systems in their projects. It should help to create
standard entry points in the source code build system, allowing
external tools to analyse projects easily.

Important changes:
* Build and install annotation files.
* Use builtin bin_annot and annot tags.
* Tag .mly files on the same basis as .ml and .mli files (required by
menhir).
* Remove 'program' constraint from C-dependencies. Currently, when a
library has C-sources and e.g. an executable depends on that library,
then changing the C-sources and running '-build' does not yield a
rebuild of the library. By adding these dependencies (rather removing
the constraint), it seems to work fine.
* Some bug fixes 

Features:
* no_automatic_syntax (alpha): Disable the automatic inclusion of -
syntax camlp4o for packages that matches the internal heuristic (if a
dependency ends with a .syntax or is a well known syntax).
* compiled_setup_ml (alpha): Fix a bug using multiple arguments to the
configure script.

Full blog post here:
http://le-gall.net/sylvain+violaine/blog/index.php?post/2014/10/23/Release-of-OASIS-0.4.5

Download here:
https://forge.ocamlcore.org/frs/?group_id=54&amp;release_id=1109
      </cwn_what>
      <cwn_who>Jacques-Pascal Deplaix later added</cwn_who>
      <cwn_what>
The new release is now available on opam.        
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>exn-source - exception backtraces with source code printing</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00180.html</cwn_url>
      <cwn_who>Continuing the thread from last week, John Whitington announced</cwn_who>
      <cwn_what>
Have cut a v0.1, now in OPAM "opam install exn-source".

a) Now finds the stdlib automatically;
b) Fixed to underline multiple-line errors;
c) Compiles with -linkall so activated merely by linking.
      </cwn_what>
      <cwn_who>Gabriel Scherer later added</cwn_who>
      <cwn_what>
exn-source produces an output using ANSI escape codes. Here is a text
version (ansifilter --text):
http://gallium.inria.fr/~scherer/tmp/tmp/exnsource-example.text
and a HTML version
http://gallium.inria.fr/~scherer/tmp/tmp/exnsource-example.html

To (re)produce this output I ran the command
OCAMLRUNPARAM="b" ./cpdf -debug foo.pdf
from the the tag v1.7 of the repo
https://github.com/johnwhitington/cpdf-source/
(after installing both camlpdf (from OPAM) and exnsource (from
github))
with the following patch applied:

diff --git a/Makefile b/Makefile
index d706771..c4f9523 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@ SOURCES = $(foreach x,$(MODS),$(x).ml $(x).mli)
cpdfcommandrun.ml

RESULT = cpdf

-PACKS = camlpdf
+PACKS = camlpdf exnsource

OCAMLNCFLAGS = -g
OCAMLBCFLAGS = -g
diff --git a/cpdfcommandrun.ml b/cpdfcommandrun.ml
index 2a43a43..bb0af72 100644
--- a/cpdfcommandrun.ml
+++ b/cpdfcommandrun.ml
@@ -1,2 +1,4 @@
+let _ = Exnsource.add_dir ""
+
let _ = Cpdfcommand.go ()
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>ppx_deriving 1.0, ppx_deriving_yojson 2.0, ppx_deriving_protobuf 2.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00184.html</cwn_url>
      <cwn_who>Peter Zotov announced</cwn_who>
      <cwn_what>
I'm glad to announce the release of ppx_deriving and several
deriving plugins that I maintain. This release includes several
breaking changes; however, the interface can now be considered
stable and I do not expect it to change significantly.

The OPAM packages will be available shortly.

The two most important changes are:

  * The deriver names are now lowercase. I.e. you should replace
    all instances of [@@deriving Foo] with [@@deriving foo].

  * ppx_deriving now integrates better with ocamlfind.
    Specifically, it does not automatically discover the deriver
    plugins based on their names; rather, it now expects you to
    explicitly require the corresponding plugin.

    In order to write code that uses [@@deriving yojson],
    it is now enough to add -package ppx_deriving_yojson to
    the ocamlfind ocamlc command line, or package(ppx_deriving_yojson)
    to the _tags file.

    This will also automatically include any runtime component
    that a deriving plugin may need.

    The package ppx_deriving.std depends on all deriver plugins
    that come with ppx_deriving itself.

The changes were made in order to bring ppx_deriving closer to
type_conv and ease migration.

Some of the less important but interesting changes:

  * The [%derive.foo:] can now be shortened to [%foo:], given that
    deriving plugin foo is registered. For example, the following
    code will print a list of number pairs:

        print_endline ([%show: (int*float) list] pairs)

  * It is possible to combine several deriving plugins into a single
    executable, e.g. for cross-compiling:

        ocamlfind opt -predicates ppx_driver \
                      -package ppx_deriving_foo -package
ppx_deriving_bar \
                      -package ppx_deriving.main -linkpkg -linkall \
                      -o ppx_driver

Full changelogs:

ppx_deriving 1.0
----------------

  * Make deriver names lowercase.
  * Remove Findlib+dynlink integration. All derivers must now be
    explicitly required.
  * Allow shortening [%derive.x:] to [%x:] when deriver x exists.
  * Make Ppx_deriving.core_type field optional to allow ignoring
    unsupported [%x:] shorthands.
  * Add support for [@@deriving foo { optional = true }] that does
    not error out if foo is missing, useful for optional dependencies.
  * Rename ~name and ~prefix of Ppx_deriving.attr and
    Ppx_deriving.Arg.payload to ~deriver.
  * Renamed Ppx_deriving.Arg.payload to get_attr.
  * Add Ppx_deriving.Arg.get_expr and get_flag.

ppx_deriving_yojson 2.0
-----------------------

  * Update to accomodate syntactic changes in _deriving_ 1.0.
  * Common helper functions have been extracted into
    ppx_deriving_yojson.runtime, reducing code size.
  * Add support for `[@@deriving to_yojson, of_yojson]`
    and `[%to_yojson:]`, `[%of_yojson:]` shortcuts.
  * Add support for `[@@deriving yojson { strict = false }]`.

ppx_deriving_protobuf 2.0
-------------------------

  * Update to accomodate syntactic changes in _deriving_ 1.0.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>The OCaml Forge has been compromised, please check your files</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00188.html</cwn_url>
      <cwn_who>Sylvain Le Gall announced</cwn_who>
      <cwn_what>
Here is the full blog post:
https://forge.ocamlcore.org/forum/forum.php?forum_id=913

Sorry again for the problem
Sylvain Le Gall
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OPAM 1.2.0</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00190.html</cwn_url>
      <cwn_who>Louis Gesbert announced</cwn_who>
      <cwn_what>
We're very proud to announce the final release of OPAM 1.2.0

This is a big step after 1.1, with lots of new features and a huge
effort put into improving the ease of use, output and error
handling. Read the full announcement at

    http://opam.ocaml.org/blog/opam-1-2-0-release

Or head straight to the install instructions at

    http://opam.ocaml.org/doc/Install.html

(but know that your existing 1.1 ~/.opam will be updated on first run)

With big thanks to all the beta-testers who took the time to report issues.

Louis Gesbert, OCamlPro, on behalf of the OPAM team.
      </cwn_what>
      <cwn_who>Louis Gesbert said and Mehdi Dogguy announced</cwn_who>
      <cwn_what>
&gt; Indeed, 1.2.0-rc4 has been promoted to 1.2.0 ; the sources are
&gt; identical, and no upgrade is required if you were already on RC4.

Ok. Thanks for the confirmation. Then, I'm happy to announce that
(for once :-P) Debian has Opam's latest release in Sid, will migrate
in a few days to testing... and will be part of the forthcoming
Jessie release.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>gasoline 0.1 â Applicative framework for OCaml</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00194.html</cwn_url>
      <cwn_who>Michael GrÃ¼newald announced</cwn_who>
      <cwn_what>
The Gasoline project aims at implementing a Unix-ish application
development framework for OCaml. The framework will provide application
templates factoring application components bootstrapping, configuration
analyse and offering homogeneous diagnostic facilities.

It can be installed with opam, see below.

It is written by Michael GrÃ¼newald and is distributed under the CeCILL-B
license agreement.


Users of Gasoline should be enabled to:

- Rapidly develop applications by using application patterns such as
âUnix filterâ, âtabular data processorâ or âcompilerâ.
- Write large software suites whose elements offer homogeneous interfaces.
- Easily pass configuration parameters to an application
- Use standardised diagnostic facilities supporting internationalisation.
- Cleanly distinguish between application components and lower-level
software engineering artifacts.
- Easily bootstrap and shutdown applications consisting of many modules.
- Use common file formats such as CSV or JSON in their applications.

  Github: https://github.com/michipili/gasoline
  Wiki: https://github.com/michipili/gasoline/wiki
  OCamldoc reference:
http://michipili.github.io/gasoline/reference/index.html


0 EXAMPLES

There is three examples of applications using Gasoline in the example
tree. These are:

* punishment, a simple program claiming âIt shall not talk in classâ and
illustrating the use of configuration parameters and configuration sources.

* wordcount, an over-engineered version of wc illustrating the use of
application components.

* wordgen, a random name generator (as found in Angband for instance)
also illustrating the use of application components.


1 WHAT ARE APPLICATION PATTERNS

Developing a Unix filter â for instance â should require little more
than writing a function

   parameter -&gt; in_channel -&gt; out_channel -&gt; unit

where parameter is a fictional type representing filter parameters. A
goal of Gasoline is to define application templates taking care of all
the house-keeping required by the bootstrapping of an application. This
should increase development speed of applications and ease the
preparation of large software suite presenting a consistent interface.

Some application patterns are scheduled for v0.3, see the issue tracker.


2 WHAT THE LIBRARY ALREADY DO

It implements a poweful configuration parameter framework, see the wiki
page Configuration.

It implements a generic diagnostic facility, allowing fine-grained
control of application diagnostics (like what xdvi does), see the wiki
page GenericDiagnostic.

It implements basic software component management, see the wiki page
Component.


3 HOW TO INSTALL

There is detailed build instructions in the README. There is also an
experimental OPAM package in my opam-repository clone, it works on
FreeBSD, Debian and MacPorts.

  https://github.com/michipili/opam-repository/tree/port/gasoline


4 CLOSINGS

I am looking forward hearing your comments and suggestions about
Gasoline. This is still experimental software and many areas should be
refactored.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Beta release of ppx_string_interpolate, and help needed with ocamlfind/opam</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00200.html</cwn_url>
      <cwn_who>Jan Rehders announced</cwn_who>
      <cwn_what>
To get familiar with ppx filters I made a simple filter to produce
strings by interpolation like [%str âvalue of foobar is $(foobar)â].
Itâs loosely based on Peter Zotov's getenv example but demonstrates a
few more things like fixing up source locations and emitting
compilation errors. Find it at
https://github.com/sheijk/ppx_string_interpolate

Some open issues:

= Packaging =
opam/ocamlfind packaging. There are META and opam files plus ocamlfind
based install/uninstall steps. I think I got this mostly right but
currently it does not work. The problem is that after installation
using opam ocamlfind wonât find my package.

I followed the steps from &lt;https://opam.ocaml.org/doc/Packaging.html&gt;.
After installation I see the META and ppx_string.native files in
~/.opam/4.02.1/lib/ppx_string_interpolate/.. but âocamlfind listâ
wonât contain ppx_string_interpolate. Iâm not sure how to investigate
this as I canât find too much documentation about the internals of
ocamlfind/opam (like which files does it expect, where should they be,
etc.). I tried to check with ppx_tools and sedlex to see what Iâm
missing but donât see anything, either. So any hints what might be the
issue here would also be appreciated.

= Using \ instead of $ =
Using Swift style \(foo) instead of $(foo) would be nice but will
produce warnings from the lexer which I can't suppress w/o suppressing
all warnings about invalid escape sequences. Also this requires doing
this from the makefile so every user would have to do it. Is there
some API Iâve missed to suppress specific warnings on the code inside
[%str ..] from ppx filters?

Any feedback is appreciated (and thanks to the people in #ocaml who
already provided some very valuable suggestions!).
      </cwn_what>
      <cwn_who>Alain Frisch then suggested</cwn_who>
      <cwn_what>
You might want to use the new syntax for string literals:

  {| .... |}

or:

  {id| .... |id}

(for an arbitrary id).  Contrary to regular string literals, OCaml
doesn't apply any lexing convention to the string contents: what you
have in the Parsetree is exactly the sequence of bytes from the source
file.  This allows you to use you own conventions:

   \(foo)

Also, you can map in an exact way between from an index in the string
to a location in the source code (in a regular string, you cannot
distinguish \065 from A in the Parsetree, which makes this exact
mapping impossible).


Combined with an extension node, this would give:

 [%str{| blabla \(x) blabla |}]
      </cwn_what>
      <cwn_who>Jan Rehders then replied</cwn_who>
      <cwn_what>
Alain: yes, for the new string literals this issue does not exist (and
they are already supported). But I'd like to keep support for regular
strings, too. I guess I could also simply expand something like
{istr|...|istr} but I think transforming anything that isn't in "my"
annotations is a bad idea.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Vagaries of Printf variants</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-10/msg00203.html</cwn_url>
      <cwn_who>David Allsopp asked and Daniel BÃ¼nzli replied</cwn_who>
      <cwn_what>
&gt; Given:
&gt; 
&gt; let f fmt = Printf.printf fmt;;
&gt; 
&gt; [f] will have type ('a, out_channel, unit, unit) format4
&gt; 
&gt; Given:
&gt; 
&gt; let f fmt = Printf.ksprintf print_string fmt
&gt; 
&gt; [f] will have type ('a, unit, string, unit) format4
&gt; 
&gt; They do exactly the same thing (at least in terms of side effects) - what's
&gt; the fundamental reason for having to suffer their having incompatible format
&gt; types? It becomes excessively irritating when trying to switch between
&gt; different formatters (as a given format string cannot be used in a way in
&gt; which it appears to have more than one type, obviously), but I'm sure
&gt; there's a reason for its being that way!

You may be interested in reading this:

http://gallium.inria.fr/blog/format6/

Daniel

P.S. If you are using formatters the problem is less acute. Nowadays
you can simply define formatters for each of your types with:

pp : Format.formatter -&gt; t -&gt; unit  

and a to_string function is one `Format.asprintf "%a" pp` away.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the OCaml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocaml.org/&gt;.

Visualising an asynchronous monad:
  &lt;http://roscidus.com/blog/blog/2014/10/27/visualising-an-asynchronous-monad/&gt;

Coq 8.4pl5 is out:
  &lt;http://coq.inria.fr/coq-84pl5-is-out&gt;

Interviewing At Jane Street:
  &lt;https://blogs.janestreet.com/interviewing-at-jane-street/&gt;

Recent reboots explained: the forge has been compromised:
  &lt;https://forge.ocamlcore.org/forum/forum.php?forum_id=913&gt;

OPAM 1.2.0 Released:
  &lt;http://ocaml.org/&gt;

Release of OASIS 0.4.5:
  &lt;http://le-gall.net/sylvain+violaine/blog/index.php?post/2014/10/23/Release-of-OASIS-0.4.5&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
