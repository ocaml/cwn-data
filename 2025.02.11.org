#+OPTIONS: ^:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+HTML_HEAD: <style type="text/css">#table-of-contents h2 { display: none } .title { display: none } .authorname { text-align: right }</style>
#+HTML_HEAD: <style type="text/css">.outline-2 {border-top: 1px solid black;}</style>
#+TITLE: OCaml Weekly News
[[https://alan.petitepomme.net/cwn/2025.02.04.html][Previous Week]] [[https://alan.petitepomme.net/cwn/index.html][Up]] [[https://alan.petitepomme.net/cwn/2025.02.18.html][Next Week]]

Hello

Here is the latest OCaml Weekly News, for the week of February 04 to 11, 2025.

#+TOC: headlines 1


* ocamlmig, a tool to rewrite ocaml code, and complement ~[@@deprecated]~
:PROPERTIES:
:CUSTOM_ID: 1
:END:
Archive: https://discuss.ocaml.org/t/ann-ocamlmig-a-tool-to-rewrite-ocaml-code-and-complement-deprecated/16090/1

** v-gb announced


Hi,

I'm glad to announce ocamlmig, a command line tool for rewriting ocaml source code with access to scope and type information.

As the simplest example of what it's intended for, let's say an opam-installed library A provides this interface:

#+begin_src ocaml
val new_name : int -> int

val old_name : int -> int
[@@migrate { repl = Rel.new_name }]
#+end_src

and your repository contains a file b.ml:

#+begin_src ocaml
let _ = A.old_name 1
#+end_src

then you could run:

#+begin_example
$ git diff b.ml
$ ocamlmig migrate -w
$ git diff b.ml
-let _ = A.old_name 1
+let _ = A.new_name 1
#+end_example

Obviously, it's not limited to renames.

When I meant by "complement ~[@@deprecated]~" is that instead of providing a textual description ~[@@deprecated "please use this thing instead" ]~ , you get to provide an executable description. The goal is to reduce the friction when the interface of a library evolves. If people get in the habit of running this regularly (after every ~opam upgrade~/~dune pkg lock~, say), then it could also be a way to get users to switch to new interfaces without having to deprecate the old interfaces immediately.

Additionally, using that and a couple of other builtin transformations like removing ~open~s, you can execute some refactorings, without learning anything like ppxlib or the ocaml ast, for instance:

- [[https://github.com/v-gb/Gillian/commit/e15ac20a5fac0849dae51523d1b73f1612f976e5][Renaming operators]] (not easy with sed or the like, because the operators change precedence)
- [[https://github.com/v-gb/ortografe/commit/b0b6a0c323edb67c03ae938d122e73b4f6a8affc][Switching code using both Stdlib and Core to mostly Core]]

If that piqued your interest, here is more information about [[https://github.com/v-gb/ocamlmig/blob/main/doc/what.md][what ocamlmig does]], and [[https://github.com/v-gb/ocamlmig/blob/main/doc/using.md][using it]].

This is decidedly work in progress, many things are not fully implemented, and it needs a lot of polish, but the existing functionality as is should still be interesting.
      



* Mopsa 1.1 -- Modular Open Platform for Static Analysis
:PROPERTIES:
:CUSTOM_ID: 2
:END:
Archive: https://discuss.ocaml.org/t/ann-mopsa-1-1-modular-open-platform-for-static-analysis/16095/1

** Raphaël Monat announced


Dear all,

On behalf of all its developers, I am glad to announce the release of [[https://gitlab.com/mopsa/mopsa-analyzer/][Mopsa v1.1]]! You can just ~opam install mopsa~ .

*What is Mopsa?* Mopsa stands for Modular and Open Platform for Static Analysis. It aims at easing the development and use of static analyzers. More specifically, Mopsa is a generic framework for building sound static analyzer based on the theory of abstract interpretation. Mopsa is independent of language and abstraction choices. Developers are free to add arbitrary abstractions (numeric, pointer, memory, etc.) and syntax iterators for new languages. Mopsa encourages the development of independent abstractions which can cooperate or be combined to improve precision.

*v1.1 changes.* This new version brings several expressivity, precision and interface improvements, notably:

- [[https://mopsa.gitlab.io/mopsa-analyzer/user-manual/options/general.html#partitioning][Trace and state partitioning]]. ⚠️ introduces [[https://gitlab.com/mopsa/mopsa-analyzer/-/merge_requests/130#breaking-changes][breaking changes]] in the API of domains.
- [[https://mopsa.gitlab.io/mopsa-analyzer/user-manual/debugging/automated-testcase-reduction.html][Suggestions to trigger automatic testcase reduction whenever Mopsa crashes]]
- * As a side-effect, Mopsa is able to generate preprocessed files from make targets using option ~-c-preprocess-and-exit=file.i~, which might be useful for other users too! This has been experimented on our coreutils benchmarks, and can also be used to generate the preprocessed files used in the [[https://gitlab.com/sosy-lab/benchmarking/sv-benchmarks#programs][Software-Verification Benchmarks]].
- Bash completion support, thanks to [[https://opam.ocaml.org/packages/arg-complete/][arg-complete]] developped by [[http://sim642.eu/][Simmo Saan]].

[[https://gitlab.com/mopsa/mopsa-analyzer/-/blob/fb3fa9bdf9a225f041c8d03dfa248991f92c674d/CHANGELOG.md][Here is the detailed changelog]].
      



* Other OCaml News
:PROPERTIES:
:CUSTOM_ID: 3
:END:
** From the ocaml.org blog


Here are links from many OCaml blogs aggregated at [[https://ocaml.org/blog/][the ocaml.org blog]].

- [[https://tarides.com/blog/2025-02-06-mirageos-on-ocaml-5][MirageOS on OCaml 5!]]
      



* Old CWN
:PROPERTIES:
:UNNUMBERED: t
:END:

If you happen to miss a CWN, you can [[mailto:alan.schmitt@polytechnique.org][send me a message]] and I'll mail it to you, or go take a look at [[https://alan.petitepomme.net/cwn/][the archive]] or the [[https://alan.petitepomme.net/cwn/cwn.rss][RSS feed of the archives]].

If you also wish to receive it every week by mail, you may subscribe to the [[https://sympa.inria.fr/sympa/info/caml-list][caml-list]].

#+BEGIN_authorname
[[https://alan.petitepomme.net/][Alan Schmitt]]
#+END_authorname
