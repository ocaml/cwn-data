<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2005.11.15</cwn_date>
  <cwn_prev>2005.11.08</cwn_prev>
  <cwn_next>2005.11.22</cwn_next>
  <cwn_date_text>08 to 15 November, 2005</cwn_date_text>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>Get a page from the Web</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31116</cwn_url>
    <cwn_who>Continuing the thread from last week, Richard Jones said</cwn_who>
    <cwn_what>
And yet another way is to use perl4caml[1] and WWW::Mechanize[2] which
is wrapped by perl4caml.  This allows you to fairly easily navigate
websites (click links, push buttons, fill in forms and so on).

Rich.

[1] http://merjis.com/developers/perl4caml/
[2] http://search.cpan.org/dist/WWW-Mechanize/lib/WWW/Mechanize.pm
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Sexplib - library for S-expression conversions</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31123</cwn_url>
    <cwn_who>Following last week's announcement by Markus Mottl, Owen Gunden said</cwn_who>
    <cwn_what>
&gt; we'd like to announce the availability of "Sexplib"

There is now a godi package: godi-sexplib
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>The best way to circumvent the lack of Thread.kill ?</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31022</cwn_url>
    <cwn_who>Continuing last week's thread, Jonathan Bryant asked and Richard Jones said</cwn_who>
    <cwn_what>
&gt; First of all, what is going on in the Event module?  I can't exactly get
&gt; it to work an I fear I'm missing some important concept.  I can't find
&gt; any documentation other than the interface.  Does anybody know of any
&gt; further documeeentation or have a good explanation of exactly what's
&gt; going on.

Yes, the Event module is quite confusing.  I have used it in this code
(in the file adwords_mt.ml) to implement a simple command pipe between
a parent thread and worker threads, so you might want to download and
take a look at this code:

http://merjis.com/developers/adwords_api
http://merjis.com/_file/adwords-api-1.0.6.tar.gz
    </cwn_what>
    <cwn_who>Grégory Guyomarc'h also answered</cwn_who>
    <cwn_what>
I found these two references useful to understand the Event library:

CML: A higher-order concurrent language 
John H. Reppy, In ACM SGPLAN '91 Conference on Programming Language Design and Implementation, pages 293-305. ACM Press, 1991.
http://portal.acm.org/ft_gateway.cfm?id=113470&amp;type=pdf

Higher-order Concurrency 
John H. Reppy, Computer Science Technical Report 92-1285, Cornell University, June 1992. 
http://people.cs.uchicago.edu/~jhr/papers/1992/phd-thesis.html

I think there is also a short example on how to use this module in OCaml Oreilly book.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Finalization and object dependencies</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31196</cwn_url>
    <cwn_who>Florian Weimer asked and Damien Doligez answered</cwn_who>
    <cwn_what>
&gt; I've got to different types of objects, say database tables and
&gt; cursors for one table.  Caml code is expected to access these objects
&gt; using some handle reference.
&gt;
&gt; 
&gt;   * If the GC detects that no handles for a particular cursor exist
&gt;     anymore, the underlying cursor object should be closed (which may
&gt;     free external resources such as locks).  At this time, all "equal"
&gt;     handles become invalid, subsequent operations will fail.
&gt; 
&gt;   * If the GC detects that no handles for some table object exist, and
&gt;     there are no handles for that table, this table is closed.
&gt;     Subsequent operations on "equal" table handles will fail.
&gt; 
&gt;   * The user may explicitly close a cursor handle.  In this case, the
&gt;     underlying object is closed, and the handle is marked invalid.
&gt;     (Same as above.)
&gt; 
&gt;   * The user may explicitly close a table handle.  In this case, all
&gt;     cursor which are still open are closed.  Future operations on
&gt;     them, or the table, will fail.
&gt;
&gt;   * When the program exits, all cursors and tables shall be closed,
&gt;     even if the program was termined by an exception.
&gt;
&gt; (Here, "to fail" means to raise an exception or some other kind of
&gt; deterministic error signaling mechanism.)

This will be hard to do if you really want to be complete.  Some run- 
time
errors (most notably, "out of memory") are not exceptions, they stop the
program immediately.  Moreover, under Unix there are signals that cannot
be caught or ignored.

&gt; Usually, application code will gracefully close all cursors, and the
&gt; table, but I want my library to be as safe as possible to use, and
&gt; avoid random crashes or memory leaks.
&gt; 
&gt; There are a couple of approaches to implement the desired behavior:
&gt;
&gt;   (1) Just use weak arrays of tables and cursor, together with  
&gt; Gc.alarm.
&gt;
&gt;   (2) Use Gc.finalise for handler objects which contain an index into
&gt;       (plain) arrays of tables and cursors.  Use reference counting
&gt;       (or back pointers) to prevent premature finalization of table
&gt;       objects while there are still cursors around.

A simple pointer from the cursor to the table should be enough.

&gt;   (3) Same as (2), but using custom blocks and C code.

You'd need reference counts in this case.

I can't see how (1) would work.  (2) is normal if your objects are
implemented as OCaml data structures.  (3) if they are implemented by  
some
C library.

&gt;   (4) Some hybrid approach.

&gt; I'm not exactly happy with each appraoch because it seems I must
&gt; implement a simple memory manager on my own for managing the array
&gt; elements.  Perhaps I'm missing something?

Maybe simply that when you implement a program, you have to do some of
the work, the GC cannot do everything for you...

&gt; How is the performance of the three approaches?  Each one uses a
&gt; different GC mechanism to achieve its goals, so I'm a bit puzzled.

Different mechanisms for solving different problems.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>IoXML by DDR no longer maintained?</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31241</cwn_url>
    <cwn_who>Alessandro Baretta asked and Maxence Guesdon answered</cwn_who>
    <cwn_what>
&gt; Is anyone still using the clever ioXML syntax extension by Daniel de Rauglaudre? 
&gt;   Has anyone updated it to ocaml 3.08.4? 3.09.0?
&gt; 
&gt; I believe Maxence's Cameleon used to depend on it. Is it still so?

Hello Alex,

I had to update it in cameleon, since I encountered errors with "loc" ids.
I changed all "loc" variables in the code to "_loc" (file pa_ioXML.ml).

Later, I was told that the -loc option of camlp4 was made for this usage.
So a 'camlp4 -loc fooo' should work, but I did not test.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Sudoku solver</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/31252</cwn_url>
    <cwn_who>Jon Harrop announced</cwn_who>
    <cwn_what>
Here is a little OCaml program to solve Sudoku puzzles:

  http://www.ffconsultancy.com/free/sudoku/
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
