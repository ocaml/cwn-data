<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2012.02.14</cwn_date>
    <cwn_prev>2012.02.07</cwn_prev>
    <cwn_next>2012.02.21</cwn_next>
    <cwn_date_text>February 07 to 14, 2012</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>Vim plugin</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2012-02/msg00045.html</cwn_url>
      <cwn_who>Continuing the thread from last week, Pierre Vittet announced</cwn_who>
      <cwn_what>
I have made a minor update of the plugin: When we print the type using
&lt;LocalLeader&gt;t, the type is also copied in the unnamed register. This allows
to copy it easily.

http://www.vim.org/scripts/script.php?script_id=3906
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>llpp v10</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2012-02/msg00047.html</cwn_url>
      <cwn_who>malc announced</cwn_who>
      <cwn_what>
New version of llpp is now available (tagged v10) at
http://repo.or.cz/w/llpp.git ;

Blurb:

llpp a graphical PDF viewer which aims to superficially resemble
less(1)

Changes (relative to v7, last version being announced here):

* MuPDF grown itslef XPS and CBZ support
* Margin trimming
* Multi column mode
* Probably more, since:

llpp$ git diff --stat v7..v10 | tail -1
 11 files changed, 5206 insertions(+), 2514 deletions(-)

How to build/run: http://www.youtube.com/watch?v=9xtIqD_mHRw
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml/MinGW</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2012-02/msg00055.html</cwn_url>
      <cwn_who>malc announced</cwn_who>
      <cwn_what>
GCC shipped with (current) MingW no longer recognizes -mno-cygwin
argument, my oline searches for a workaround were fruitless, but
turns out there is one, one can create a self specs file and
make gcc (the driver) strip -mno-cygwin from cc1 invokation. This
can be done by putting a file named "specs" into a directory listed
under "install:" in the output of `gcc -print-search-dirs' containing
following line:
*cc1: %&lt;mno-cygwin

Hope that would save someone the trouble of making things run.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>interval trees</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2012-02/msg00056.html</cwn_url>
      <cwn_who>Francois Berenger asked and Richard Jones replied</cwn_who>
      <cwn_what>
&gt; I need to use an interval tree.
&gt; 
&gt; Biocaml has one, batteries have imap/iset, nice!
&gt; 
&gt; However, I have intervals of reals, not integers. :(
&gt; 
&gt; I want to build the tree (once), then query it with a real number
&gt; (many times) like in: which intervals contain the query real number?
&gt; 
&gt; Should I convert my floats to ints (by sorting them then ranking) before
&gt; inserting them into some existing interval tree for integers?
&gt; I am not so concerned about the pre-processing time.
&gt; 
&gt; Should I write from scratch?

I wrote a segment tree (integers, not floats), which is similar.  It
wasn't very hard.  The code is here if it helps:

http://git.annexia.org/?p=virt-mem.git;a=blob;f=lib/virt_mem_mmap.ml;hb=HEAD
      </cwn_what>
      <cwn_who>Goswin von Brederlow asked, Eliot Handelman replied and Sebastien Ferre added</cwn_who>
      <cwn_what>
&gt; &gt;  Anyone have something like this but for non-overlapping intervals and
&gt; &gt;  allowing interval insertion and removal with merging and spliting of the
&gt; &gt;  internaly used intervals?
&gt; &gt;  
&gt; &gt;  Cis from Sébastien Ferré?
&gt; &gt;  
&gt; &gt;  http://www.irisa.fr/LIS/ferre/software.en.html

The Cis library (Cis for Compact Integer Sets) is
designed for representing sets of integers, but it
could easily be adapted to the insertion and
removal of intervals since it already handles
the merging and spliting og intervals.
      </cwn_what>
      <cwn_who>Edgar Friendly also replied and Philippe Veber said</cwn_who>
      <cwn_what>
&gt; Yes, IMap / ISet (borrowed from camomile and improved) do this.  I assume
&gt; biocaml's is the same.

Actually no, biocaml_intervalTree keeps the inserted intervals untouched, it
is in fact pretty similar to an interval multimap, with some specialized
operations. In cases when we want to describe a set of integers (vs a set of
intervals), we use ISet from Batteries. With these two structures we can
describe an interesting range of genome annotations.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Package installation assumptions made by odb</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2012-02/msg00077.html</cwn_url>
      <cwn_who>Edgar Friendly said</cwn_who>
      <cwn_what>
odb is a simple ocaml program to install ocaml packages with
dependencies. I've written a document on the assumptions it makes of the
packages it's to install. By sharing this, I hope to influence library and
application developers to use a standard interface for compiling their
program.

The details are here: https://github.com/thelema/odb/blob/master/guidelines.md

Thank you for any feedback. Please bear in mind that odb is meant to be
simple, so the complexity of configuring, building and installing any packages
is expected to be in that package's build system, and not odb itself.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Interval programming library</cwn_title>
      <cwn_url>https://sympa-roc.inria.fr/wws/arc/caml-list/2012-02/msg00090.html</cwn_url>
      <cwn_who>Jean-Marc Alliot announced</cwn_who>
      <cwn_what>
This is an interval computation library for ocaml. The download link is :
http://www.alliot.fr/code/interval.tgz

This library uses assembly code to compute all operations with proper
roundings (high/low), and currently ONLY works on intel processors.
The package has been developped for linux systems but should probably
work on windows distribution with a few tweaks.

Documentation is available in the doc/ directory in html, pdf and dvi
formats. It is extremely wise to read the whole documentation, even if
you intend to only use the interval module.

To build the library just type "make" in the main directory.

Tests are available in the TESTS/ directory. They are mainly for
debugging purpose and quite complicated. You may run them to
check that everything is working properly for your machine.
The test program runs also a speed test program for your
particular architecture.

Examples are available in the EXAMPLES/ directory. There is a
B_AND_B sub-directory with an example of a branch-and-bound algorithm
that uses interval arithmetics for function optimization (the
example is for the Griewank function, but you can substitute
any function you like).
      </cwn_what>
      <cwn_who>Jean-Marc Alliot later added</cwn_who>
      <cwn_what>
As requested by Fabrice, this is the link to the web page for the library.
http://www.alliot.fr/fbbdet.html.fr
There are some more things on this page, such as an introduction to interval
programming, and to B&amp;B techniques with interval arithmetic.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other Caml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

Rediscovering the RSync Algorithm:
  &lt;http://blog.incubaid.com/2012/02/14/rediscovering-the-rsync-algorithm/&gt;

gapi-ocaml v0.1 released:
  &lt;https://forge.ocamlcore.org/forum/forum.php?forum_id=823&gt;

Opa presentation at a game development meetup, GameJS:
  &lt;http://blog.opalang.org/2012/02/opa-presentation-at-game-development.html&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>