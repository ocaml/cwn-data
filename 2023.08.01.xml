<?xml version="1.0" encoding="utf-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2023.08.01</cwn_date>
    <cwn_prev>2023.07.25</cwn_prev>
    <cwn_next>2023.08.08</cwn_next>
    <cwn_date_text>July 25 to August 01, 2023</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>opam 2.2.0 alpha2 release</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-opam-2-2-0-alpha2-release/12699/1</cwn_url>
      <cwn_who>R. Boujbel announced</cwn_who>
      <cwn_what>
On behalf of the opam dev team, I’m happy to announce you the [2nd alpha release of
opam 2.2.0](https://github.com/ocaml/opam/releases/tag/2.2.0-alpha2).

This alpha introduces a new option to initialise opam on Windows: remove the need of
a preexisting Cygwin and propose to install an internal Cygwin install managed by
opam.

You'll find more information in [the blog
post](https://opam.ocaml.org/blog/opam-2-2-0-alpha2/) and a more detailed view in the
[release note](https://github.com/ocaml/opam/releases/tag/2.2.0-alpha2).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Cross-compiling OCaml with GitHub Actions</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/cross-compiling-ocaml-with-github-actions/9154/6</cwn_url>
      <cwn_who>jbeckford announced</cwn_who>
      <cwn_what>
As mentioned in the original post, that was a preview for a few months. Jan 2022 was
long ago, and I didn't get any feedback that anybody was using it.

Regardless, I rolled up the cross-compiling functionality into the
~dkml-base-compiler~ package. But a huge dose of caution ... cross-compiling is not
officially supported by OCaml! And unlike when I originally wrote the post, I now
actively use my non-free [DkSDK CMake](https://diskuv.com/cmake/help/latest/) product
because, among other things, it wraps ~dkml-base-compiler~ cross-compiling into a
"normal" IDE push-button experience (in fact, as we speak I'm helping some high
schoolers use Android Studio to cross-compile OCaml into their Android Java app). So
if you use ~dkml-base-compiler~ for its cross-compiling features, make sure you have
intermediate-advanced comfort with the OCaml compiler, and be comfortable with
getting your own support.

Here is what you'll need if you (or anyone searching in the future) are that
intermediate-advanced compiler user and want to get ~dkml-base-compiler~ working in
your environment:

- Make sure you read and understand &lt;https://diskuv-ocaml.gitlab.io/distributions/dkml/doc/CompilingInDepth.html&gt;. There are sharp edges. If that content is too difficult to follow, you should rethink whether you want to do cross-compilation using ~dkml-base-compiler~ directly

- The [1.0 branch of the non-free DkHelloWorld project](https://gitlab.com/diskuv/samples/DkHelloWorld/-/pipelines?scope=all&amp;page=1&amp;ref=1.0) has which environments can cross-compile. For example, [pipeline 873507690](https://gitlab.com/diskuv/samples/DkHelloWorld/-/pipelines/873507690) (which will disappear) shows Android and macOS x-compiles. If you are looking at this post in the distant future to see what other environments have been added, try looking for future ~1.1~ and ~2.0~ (etc.) branches

- Since I don't yet synchronize DkML with the central opam repository, build the latest ~dkml-base-compiler~ by adding the &lt;https://github.com/diskuv/diskuv-opam-repository#readme&gt; repository

- The main source code is &lt;https://github.com/diskuv/dkml-compiler#readme&gt;

- It did (and should) build on all the opam platforms, plus Windows MSVC. But for the ~dkml-base-compiler~ package, and many other DkML packages, I don't try to maintain GitHub Actions / GitLab CI anymore. Doing CI on my internal machines is vastly more efficient, and I can't justify doing that level of waste.

All the best!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Release opam-switch-mode 1.7 with Tuareg+Merlin support</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-release-opam-switch-mode-1-7-with-tuareg-merlin-support/12703/1</cwn_url>
      <cwn_who>Erik Martin-Dorel announced</cwn_who>
      <cwn_what>
*** Emacs: new minor mode for opam users

Dear all,

*If you happen to use use several opam switches and Emacs as an IDE:* you may be
interested in [opam-switch-mode](https://github.com/ProofGeneral/opam-switch-mode)
/(which overlaps tuareg-mode's ~M-x tuareg-opam-update-env~ function but provides
several additional features)/.

To be more precise:

- this minor mode requires GNU Emacs 25.1 and is available in [MELPA](https://melpa.org/#/opam-switch-mode), [MELPA Stable](https://stable.melpa.org/#/opam-switch-mode), [NonGNU-devel](https://elpa.nongnu.org/nongnu-devel/opam-switch-mode.html), [NonGNU](https://elpa.nongnu.org/nongnu/opam-switch-mode.html);
- it displays the currently chosen switch in the mode-line;
- it provides an **OPSW** menu-bar (also working in TTY) and an **OPSW** mode-bar menu, as well as a ~M-x opam-switch-set-switch~function;
- all of these allow to select a regular opam switch or a **local** opam switch;
- they trigger before/after the opam switch change, the functions registered in the hooks ~'opam-switch-before-change-opam-switch-hook~ and ~'opam-switch-change-opam-switch-hook~
- these hooks are internally used by Tuareg, Merlin *(or ProofGeneral for Coq)* to kill the OCaml toplevel or the Merlin server: so that the next eval or save action uses the appropriate binary from the new switch;
- and finally, the minor mode stores the initial environment (before the mode is enabled), providing a Reset feature to backtrack to the initially chosen switch.

Here is a screenshot of the opam-switch-mode in GNU Emacs 27.1:

https://global.discourse-cdn.com/business7/uploads/ocaml/original/2X/6/65857fe44247447bc6f3927c09a9eb8516abefcc.png

Happy hacking!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>dune 3.9.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-dune-3-9-0/12530/4</cwn_url>
      <cwn_who>Etienne Millon announced</cwn_who>
      <cwn_what>
We just released dune 3.9.2. This bugfix-only release contains two platform-specific
changes: one fixes the Dune cache on Windows, and the other one completes the fix on
Linux when ~sendfile~ is not available. This makes Dune available where user
directories are encrypted using ~ecryptfs~ for example.

*** Fixes

- Disable background digests on Windows. This prevents an issue where unremovable files would make dune crash when the shared cache is enabled. (#8243, fixes #8228, @emillon)
- Fix permission errors when ~sendfile~ is not available (#8234, fixes #8210, @emillon)
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>DkML 2.0.x Releases</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-dkml-2-0-x-releases/12642/8</cwn_url>
      <cwn_who>jbeckford announced</cwn_who>
      <cwn_what>
*** DkML 2.0.2

Consider 2.0.2 to be a preview release. The [2.0.2 installers and release notes are
here](https://gitlab.com/diskuv-ocaml/distributions/dkml/-/releases/2.0.2)

The major change is there is a standalone "Bytecode Edition" installer:
- ~utop~, ~ocamlc~, ~ocamlfind~ work with ~base~, ~refl~, ~graphics~ and ~sqlite3~. (I intend later to add the ~tsdl~ related packages)
- No ~opam~, Visual Studio, Git or MSYS2. That is a fast install (see Answers below).
- Comes embedded with a bytecode system OCaml compiler and pre-compiled packages (~base~, etc.)
- ~dune~ works to the extent Dune works with bytecode: you have to set explicit ~(modes ... byte)~, and you have to explicitly ask for the bytecode artifacts with ~dune build x/y/z.bc~
- VS Code works with the OCaml Platform extension (ie. ~ocamllsp~ works alongside ~dune build x/y/z.bc~)

If people think they'll use it, now is the time to say so! *I don't intend to support
something very few people will use.*

*** Answers

#+begin_quote
FYI, The “windows 64-bit installer” in [this page
](https://gitlab.com/diskuv-ocaml/distributions/dkml/-/releases/2.0.1) is a dead
link.
#+end_quote

Thanks! DkML 2.0.2 should have live links, unlike 2.0.1

#+begin_quote
do you have a guesstimate on the install time for this bytecode-only base system on
standard machines?
#+end_quote

The "Bytecode Edition" is under 5 minutes to download (~200MiB), and under 5 minutes
to install.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Announcing the ocaml-wasm organisation</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/announcing-the-ocaml-wasm-organisation/12676/3</cwn_url>
      <cwn_who>Deep in this thread, zapashcanon said</cwn_who>
      <cwn_what>
I added a [few notes](https://github.com/ocaml-wasm/wasocaml#quickstart) on how to
try Wasocaml. Don't expect everything to work now as this was indeed a quick
prototype (more on this below).

The goal of Wasocaml was to convince the Wasm-GC working group of the usefulness of
~i31ref~ because we knew it would be needed by OCaml. Without this work [they may had
been removed from the proposal](https://github.com/WebAssembly/gc/issues/320). We
[presented](https://github.com/WebAssembly/meetings/blob/main/gc/2023/GC-01-10.md)
the work in January to the working group. In March we also presented this work at the
Dagstuhl seminar on the [foundations of
WebAssemby](https://www.dagstuhl.de/de/seminars/seminar-calendar/seminar-details/23101)
which was the opportunity to discuss with some active members of the Wasm community
such as Andreas Rossberg, Ben Titzer and Conrad Watt. In April, the Guile compiler to
Wasm-GC was also
[presented](https://github.com/WebAssembly/meetings/blob/main/gc/2023/GC-04-18.md)
and it was also using ~i31ref~. Having two languages using ~i31ref~ convinced the
working group. This is what allows Wasm_of_ocaml to use ~i31ref~ today.
:slight_smile:

Wasocaml is also the first compiler for a real-world functional languages to Wasm-GC.
We developed many strategies for the memory representation of values. For now we only
presented two of them (more are coming!) and they should work for other
languages/compilers. Wasm_of_ocaml and Guile are using similar techniques to what we
presented.

A little bit more about the differences between Wasocaml and Wasm_of_ocaml... First,
Wasm_of_ocaml being a tool external to the compiler, it is of course easier to deploy
quickly. Wasocaml starts from Flambda and will thus benefit all the optimizations
that are missing from the bytecode.
[Binaryen](https://github.com/WebAssembly/binaryen) will be able to recover some
performances but it has its limits. Moreover, Wasocaml is going to play nicely with
separate compilation. Also, Wasm_of_ocaml is limited in its value representation
choice (it must represent blocks as an ~eqref array~) whereas Wasocaml can use more
sophisticated representations.

Also note that none of the two are actually usable in a production today. They both
depends on many Wasm extenstions (typed function references, GC, tail-call, exception
handling, string reference...) that are not yet available in browsers (you can use
them in chrome if you turn some experimental flags on).

Alongside all the future works that @lefessan described, I'm also formalizing the
compilation of flambda to Wasm-GC with a proper semantics.

On a related note, we indeed implemented [Owi](https://github.com/OCamlPro/owi), a
Wasm interpreter written in OCaml. It was a way to experiment with language
extensions. Currently, our main work on the interpreter is to add the possibility to
do symbolic execution of Wasm code (aka whitebox fuzzing). This allows to
automatically find input values that lead to a crash in the program. The nice thing
is that it allows to find bugs in code written in another language and compiled to
Wasm (e.g. C).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Brr 0.0.6 and Note 0.0.3</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-brr-0-0-6-and-note-0-0-3/12718/1</cwn_url>
      <cwn_who>Daniel Bünzli announced</cwn_who>
      <cwn_what>
There's a new release of Brr and Note.

[Brr](https://erratique.ch/software/brr) is an ISC licenced toolkit for programming browsers with the js_of_ocaml
compiler.
[Note](https://erratique.ch/software/note) is an experimental ISC licensed library for functional reactive programming.

If finally got to split away the Note FRP stuff from Brr. The ~brr~ package therefore
no longer depends on the ~note~ package. If you used the ~brr.note~ library it now
lives in ~note.brr~. Accordingly the toplevel module names were changed from
~Brr_note*~ to ~Note_brr*~.

Among other things, the Brr release also brings a revamped ~Uri~ module which was [a
bit broken](https://github.com/dbuenzli/brr/issues/50). Have a look the [release
notes](https://github.com/dbuenzli/brr/blob/master/CHANGES.md#v006-2023-07-29-zagreb)
before upgrading if you are using it. Thanks to Max Lang for noticing and helping to
fix that.

Best,

Daniel

A big thanks to my [donators](https://github.com/sponsors/dbuenzli).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Hilite 0.3.0</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-hilite-0-3-0/12723/1</cwn_url>
      <cwn_who>Patrick Ferris announced</cwn_who>
      <cwn_what>
Happy to announce a new release of ~hilite~, a small library to perform build-time
syntax highlighting of some [common (in the OCaml world) programming
languages](https://github.com/patricoferris/hilite/blob/348c76a0faaf2addfe5ee0c657e007d3d9df4254/src/md.ml#L1).
Hilite performs the syntax highlighting on OCaml.org (see for example
https://ocaml.org/docs/lists). It has a useful ~Hilite.Md.transform~ function which
will rewrite code blocks for you (i.e. ~transform : Omd.doc -> Omd.doc~). I may, in
the not too distant future, drop ~Omd~ in favour of ~Cmarkit~.

Happy highlighting :camel: :art:
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>htmlit 0.1.0 – HTML generation combinators for OCaml</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-htmlit-0-1-0-html-generation-combinators-for-ocaml/12724/1</cwn_url>
      <cwn_who>Daniel Bünzli announced</cwn_who>
      <cwn_what>
I'd like to announce the first release of [htmlit](https://erratique.ch/software/htmlit) ([docs](https://erratique.ch/software/htmlit/doc/)):

#+begin_quote
Htmlit is an OCaml library providing simple but subtle combinators for generating
HTML fragments and pages.

Htmlit is distributed under the ISC license. It has no dependencies.
#+end_quote

Install: ~opam install htmlit~ (once [this PR](https://github.com/ocaml/opam-repository/pull/24180) is merged).

Best,

Daniel

A big thanks to my [donators](https://github.com/sponsors/dbuenzli).
      </cwn_what>
      <cwn_who>jumpnbrownweasel asked and Daniel Bünzli replied</cwn_who>
      <cwn_what>
#+begin_quote
How would you compare Htmlit to tyxml,
#+end_quote

Htmlit does not try to type your HTML. To get a good compositionality story, it does
a few tricks on ~class~ and ~style~ attribute specifications and supports direct
fragment splicing in element childrens.

~tyxml~ tries to type your HTML which I find totally unusable in practice.  I tried
the ~tyxml~ approach during some time in first decade of the century after @thomega
[came up](https://alan.petitepomme.net/cwn/2003.05.06.html#1) with the technique
twenty years ago.

I moved away from it quite quickly to prefer to treat HTML as an untyped assembly
language rather than try to put lipstick on a pig. In my opinion the technique has
terrible type and refactoring usability and still doesn't prevent you of generating
invalid HTML (e.g. no guarantee on id uniqueness). Honestly when you are dealing with
the web, generating valid HTML is the least of your problem.

#+begin_quote
what was the motivation for creating Htmlit?
#+end_quote

That was a long time ago; the copyright says 2016 but I'm pretty sure I used that in
some more primitive form much before. The motivation is in the summary: to have a
simple and usable library for generating HTML fragments or pages to send over the
wire or store on your file system.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>forester 2.2.1 release</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-forester-2-2-1-release/12728/1</cwn_url>
      <cwn_who>Jon Sterling announced</cwn_who>
      <cwn_what>
I would like to advertise the release of Forester 2.2.1 on opam, which is an OCaml
utility to develop "Forests", which are densely interlinked mathematical websites /
Zettelkästen similar to the Stacks Project or Kerodon. An example of a "Forest" is my
[own website](https://www.jonmsterling.com/).

Package: https://opam-5.ocaml.org/packages/forester/

Forester is potentially of technical interest to this community as it makes use of
new OCaml 5 features like effect handlers, as well as certain functions from
~domainslib~.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Multicore libraries: new releases</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/ann-multicore-libraries-new-releases/12734/1</cwn_url>
      <cwn_who>Sudha Parimala announced</cwn_who>
      <cwn_what>
Hi everyone! I'm happy to share updates on new releases of multicore libraries. [KC's
blog
post](https://tarides.com/blog/2023-07-07-making-ocaml-5-succeed-for-developers-and-organisations/)
provides an excellent overview of the big picture and how the developments in the
compiler, libraries and tooling fit together.

*** Saturn and Saturn_lockfree (0.4.0)

I'm delighted to present to my fellow camlers
[Saturn](https://opam.ocaml.org/packages/saturn/) and
[Saturn_lockfree](https://opam.ocaml.org/packages/saturn_lockfree/saturn_lockfree.0.4.0/),
now available in opam-repository. Saturn is the new alter ego of our old friend
[lockfree](https://opam.ocaml.org/packages/lockfree/). Saturn (and its sub-libraries)
subsume lockfree, and aim to be a collection of parallelism-safe data structures for
OCaml 5. ~Saturn_lockfree~ provides a set of lockfree data structures that are well
tested. Furthermore, [cache-aligned
atomics](https://github.com/ocaml/ocaml/pull/12212) recently landed on trunk OCaml,
which opens up exciting possibilities to explore for lock-free algorithms.

The renaming stems from a desire to expand the scope of the library to be more than
just lockfree. Essentially a data-structure can be blocking, lock-free or sometimes
partially lock-free ( and not defined in other times). We ran into intriguing
questions such as "When is a structure lock-free, really?" in the process of
developing them.

Considering the perspective of a user of parallelism-safe data structures, whether
they are transitioning their libraries to OCaml 5 or building something from scratch,
it's reasonable to assume that their primary concerns would be the correctness and
performance of these structures, rather than the nitty-gritties of [progress
conditions](https://en.wikipedia.org/wiki/Non-blocking_algorithm). These structures
are model-checked and have a good set of property based tests. They have some
benchmarks with more on the way. Saturn aims to be a collection of reliable and
performant parallelism-safe data structures.

Amongst other things, Saturn will host:

- Lockfree structures
- Composable lockfree structures from [kcas_data](https://github.com/ocaml-multicore/kcas/tree/main/src/kcas_data)
- [Lock-based parallelism-safe data structures](https://github.com/DeltaCube23/multicamlDS)

The README has comprehensive descriptions for the above-mentioned items (as well as
more details coming soon). Here is the
[changelog](https://github.com/ocaml-multicore/saturn/releases/tag/0.4.0).

*** DSCheck (0.3.0)

DSCheck is an experimental model checker for testing concurrent programs. Concurrency
bugs can be notoriously hard to track down. DScheck explores the possible
interleavings of concurrent programs, thereby helping us catch potential bugs early
on. It manages to do this by a neat combination of exploring branches needs to be
explored, and mocking parallelism with effect handlers.

Changelog for the latest release is
[here](https://github.com/ocaml-multicore/dscheck/releases/tag/0.2.0). The major
improvement this release contains is the [Source
Sets](https://user.it.uu.se/~parosh/publications/papers/jacm17.pdf) approach for
optimal reduction. This is has hugely reduced the number of branches to explore in
the tree of possible interleavings, and thereby improving the performance by a great
margin. The next release will hopefully include [granular dependency
relation](https://github.com/ocaml-multicore/dscheck/pull/22) for the DPoR algorithm,
which further speeds up the dscheck tests by over 5x.

*** Domainslib (0.5.1)

Domainslib provides easy ways to write nested parallel programs in OCaml 5. Amongst
other things, the [0.5.1
release](https://github.com/ocaml-multicore/domainslib/releases/tag/0.5.1) supports
[domain-local-await](https://github.com/ocaml-multicore/domain-local-await) (DLA),
enabling smooth interoperability with other libraries supporting DLA such as Eio,
Kcas, Moonpool and so on. This opens up interesting possibilities to juxtapose
domainslib for parallelism and Eio for IO, in the same application. Furthermore, this
release includes a ~parallel_find~ which helps propagate exceptions.

*** Eio (0.11.0)

This [new release](https://github.com/ocaml-multicore/eio/releases/tag/v0.11)
contains feature additions such as extending ~Eio.Condition~, removing deprecated
functions and bug fixes. As we're heading towards a 1.0 release of Eio, we hope to
share more frequent updates on Eio.

In tandem, a number of applications are migrating to Eio to exploit OCaml 5 features.
You can find many of them at
[awesome-multicore-ocaml](https://github.com/ocaml-multicore/awesome-multicore-ocaml).
For folks interested in this, @talex5 and @jonludlam are running a tutorial at ICFP
on the [same
subject](https://icfp23.sigplan.org/details/icfp-2023-tutorials/4/Porting-Lwt-applications-to-OCaml-5-and-Eio).

Happy hacking! :camel:
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
