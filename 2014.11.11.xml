<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2014.11.11</cwn_date>
    <cwn_prev>2014.11.04</cwn_prev>
    <cwn_next>2014.11.18</cwn_next>
    <cwn_date_text>November 04 to 11, 2014</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>testing platform</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-11/msg00014.html</cwn_url>
      <cwn_who>Roelof Wobben asked and Paolo Donadeo replied</cwn_who>
      <cwn_what>
&gt; Does Ocaml has a testing platform where I can write test like this way
&gt; I can do in clojure:
&gt; 
&gt; (facts "about `pr134`"
&gt;   (fact "it normally return true if the key exist and the value is nil"
&gt;     (pr134 :a {:a nil :b 2})  =&gt; true
&gt;     (pr134 :b {:a nil :b 2})  =&gt; false
&gt;     (pr134 :c {:a nil :b 2})  =&gt; false
&gt;         ))

Did you considered qtest?

http://batteries.vhugot.com/qtest/
      </cwn_what>
      <cwn_who>Milan Stanojević also replied</cwn_who>
      <cwn_what>
There is also pa_ounit,
https://github.com/janestreet/pa_ounit
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>OCaml opportunities in London</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-11/msg00026.html</cwn_url>
      <cwn_who>Tony announced</cwn_who>
      <cwn_what>
OCaml is a fantastic language with huge potential which is only unlocked by a
few London-based companies. I have a client which is exploring the application
of programming using OCaml in the development of algebra representation for
financial instruments. You will have the opportunity to introduce the language
and train others who have a passion for functional programming.

Unfortunately I have to limit the details I provide about this position via
email. However, anyone who is interested please do get in touch in reply to
this message and we can have an informal conversation to see if there is
interest in both sides.

An ideal candidate would have a background in good programming principles
(perhaps C or C++) but a desire to work in OCaml for the future. The salary
limit will be around £100,000.
      </cwn_what>
      <cwn_who>Jeremy Yallop then suggested</cwn_who>
      <cwn_what>
There's a dedicated mailing list for job-related postings:
ocaml-jobs@inria.fr.  It might be worth posting there as well.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Parsetree comparison</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-11/msg00030.html</cwn_url>
      <cwn_who>Christoph Höger asked and Gabriel Scherer replied</cwn_who>
      <cwn_what>
&gt; is there a way to compare two abstract syntax trees for equality
&gt; without taking into account locations? Or rather a way to stratify the
&gt; location information inside a parsetree? I want to unit-test a parser
&gt; that invokes the OCaml parser itself.

The Ast_mapper module contributed by Alain Frisch to recent versions
of the OCaml distribution allows you to perform arbitrary
transformations from AST to AST in a convenient way. In particular,
you could implement a erase-all-locations pass by simply overloading
the "location" method (it uses object-oriented style for open
recursion) to always return a dummy value.
      </cwn_what>
      <cwn_who>Rodolphe Lepigre also replied</cwn_who>
      <cwn_what>
One quick, dirty and hackish way to do that is to use the -dparsetree option
to print the parse tree, use sed to remove position indication and the compare
files with diff...

I used that trick to compare the ast generated by an OCaml parser generated
using DeCaP (&lt;http://lama.univ-savoie.fr/decap/&gt;), and the ast generated by
other OCaml parsers.

Here is the script we used:
##########
#!/bin/bash

ocamlc -dparsetree                 $1 2&gt; /tmp/$1.ocaml
ocamlc -dparsetree -pp ../pa_ocaml $1 2&gt; /tmp/$1.pa_ocaml

cat /tmp/$1.ocaml    | sed -e 's/(.*\.ml\[.*\]\.\.\[.*\])\( ghost\)\?//' &gt; /tmp/$1.ocaml.out
cat /tmp/$1.pa_ocaml | sed -e 's/(.*\.ml\[.*\]\.\.\[.*\])\( ghost\)\?//' &gt; /tmp/$1.pa_ocaml.out

# diff -y /tmp/$1.ocaml.out /tmp/$1.pa_ocaml.out | less
diff $2 /tmp/$1.ocaml.out /tmp/$1.pa_ocaml.out
##########
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>New list for educators: teaching@lists.ocaml.org</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2014-11/msg00041.html</cwn_url>
      <cwn_who>Anil Madhavapeddy announced</cwn_who>
      <cwn_what>
There have been several requests from professors who are teaching
OCaml in schools and universities to have a forum to discuss issues
relating to using OCaml in an educational context.

I have created the &lt;teaching@lists.ocaml.org&gt; mailing list for this purpose:

    Subscription: http://lists.ocaml.org/listinfo/teaching
    Web Archives: http://lists.ocaml.org/pipermail/teaching/

There is an informal wiki that is gathering information for eventual
importing to OCaml.org here:

    https://github.com/ocaml/ocaml.org/wiki/OCAML-Teaching-Resources
    (and the associated pull request: &lt;https://github.com/ocaml/ocaml.org/pull/565&gt;)

If you would like to contribute, please free to join the list by
following the first link, or contribute pointers to useful teaching
resources at the wiki or OCaml.org site.  In particular, if you teach
a course and don't mind being publicly listed, adding yourself to the
index helps other people who are considering using OCaml.

As a reminder, anyone can request a mailing list on lists.ocaml.org if
it is relevant to the OCaml language or ecosystem.  Just drop a line
to me or to &lt;infrastructure@lists.ocaml.org&gt; for more information.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the OCaml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocaml.org/&gt;.

Complexity:
  &lt;http://shayne-fletcher.blogspot.com/2014/11/complexity.html&gt;

Full Time: Software Developer (Functional Programming) at Jane Street in New York, NY; London, UK; Hong Kong:
  &lt;http://jobs.github.com/positions/0a9333c4-71da-11e0-9ac7-692793c00b45&gt;

Senior Software Engineer at McGraw-Hill Education (Full-time):
  &lt;http://functionaljobs.com/jobs/8760-senior-software-engineer-at-mcgraw-hill-education&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
