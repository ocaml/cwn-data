Hello,

Here is the latest Caml Weekly News, for the week of October 12 to 19, 2010.

1) convertion between OCaml Big_int and C
2) Books for review in the Journal of Functional Programming
3) Other Caml News

========================================================================
1) convertion between OCaml Big_int and C
Archive: <http://groups.google.com/group/fa.caml/browse_thread/thread/209b1fd9fc343eb1#>
------------------------------------------------------------------------
** Jianzhou Zhao asked and Olivier Schwander suggested:

> I am not sure if this is a reasonable question. Does OCaml already 
> have functions that do convertion between arbitrary-precision integers 
> big_int in OCaml and any representation of large intergers in C? The 
> implementation of big_int (otherlibs/num/big_int.*) uses nat 
> (otherlibs/num/nat.*). Nat is a customized allocation (in C) as a list 
> of native integers to represent arbitrary-precision. So converting 
> big_int into C seems possible to me. 

It seems you should have a look at the numerix library or at the OCaml 
binding for GMP. I never used any of them so I cannot guaranty there are 
really working (there are not a lot of references to them) but I think 
they are more likely to be usable on both OCaml and C side. 
      
** Jianzhou Zhao then asked and Olivier Schwander replied:

> Thanks. Are they the MLGMP and Numerix listed in "the Caml Hump: 
> General purpose libraries :: Numeric computation" ? 
>   <http://caml.inria.fr/cgi-bin/hump.en.cgi?sort=0&browse=75> 
> From the documents of Numerix, it runs much faster than the big_int 
> library, although it may not be as portable as the 'nat' that big_int 
> replies on. 

Yes, there is also mlgmpidl 
<http://www.inrialpes.fr/pop-art/people/bjeannet/mlxxxidl-forge/mlgmpidl/>. 
      
========================================================================
2) Books for review in the Journal of Functional Programming
Archive: <http://groups.google.com/group/fa.caml/browse_thread/thread/bd1730b85fb3ecc2#>
------------------------------------------------------------------------
** Simon Thompson announced:

The Journal of Functional Programming publishes book reviews. I have just
updated: list of books for review in the journal of functional programming,
available here:

<http://www.cs.kent.ac.uk/people/staff/sjt/JFP/available.html>

which also has a link to a set of review guidelines. If you review a book you
get a free copy (in some cases of an e-book): the typical deadline for a
review is three months.
      
========================================================================
3) Other Caml News
------------------------------------------------------------------------
** From the ocamlcore planet blog:

Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at <http://planet.ocamlcore.org/>.

Coq 8.3:
  <http://caml.inria.fr/cgi-bin/hump.cgi?contrib=110>

Hypomnemata:
  <https://forge.ocamlcore.org/projects/hypomnemata/>

Text to PDF:
  <http://alaska-kamtchatka.blogspot.com/2010/10/text-to-pdf.html>

Onotify 0.6.2 released:
  <http://forge.ocamlcore.org/forum/forum.php?forum_id=704>

Pattern matching costs:
  <http://www.sairyx.org/2010/10/pattern-matching-costs/>

Coq 8.3 is out !:
  <http://coq.inria.fr/coq-83-is-out>

Running OCaml directly on top of Xen for massive performance gains in the cloud:
  <http://www.sairyx.org/2010/10/running-ocaml-directly-on-top-of-xen-for-massive-performance-gains-in-the-cloud/>
      
========================================================================
Old cwn
------------------------------------------------------------------------

If you happen to miss a CWN, you can send me a message
(alan.schmitt@polytechnique.org) and I'll mail it to you, or go take a look at
the archive (<http://alan.petitepomme.net/cwn/>) or the RSS feed of the
archives (<http://alan.petitepomme.net/cwn/cwn.rss>). If you also wish
to receive it every week by mail, you may subscribe online at
<http://lists.idyll.org/listinfo/caml-news-weekly/> .

========================================================================


