<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2018.01.09</cwn_date>
    <cwn_prev>2018.01.02</cwn_prev>
    <cwn_next>2018.01.16</cwn_next>
    <cwn_date_text>January 02 to 09, 2018</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>dune_watch, a small tool to relaunch jbuilder build at file system updates</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2018-01/msg00000.html</cwn_url>
      <cwn_who>Jun Furuse announced</cwn_who>
      <cwn_what>
I wrote a small tool, dune_watch, which automatically executes
jbuilder build command each time when files under the executed
directory are updated.  This is something similar to the polling mode
of omake's -P option, which I miss most in jbuilder.

dune_watch uses fswatch command to monitor the file system.  Since
dune_watch knows nothing of the build dependencies, it may launch
jbuilder even when it is not really required. It is, however, very
useful for me, until jbuilder itself will support the file system
polling.

dune_watch will be opam-available soon.
      </cwn_what>
      <cwn_who>Simon Cruanes then said</cwn_who>
      <cwn_what>
I've been using a small script for the same purpose for a while now (as
a Makefile target):

watch:
	while find src/ -print0 | xargs -0 inotifywait -e delete_self -e modify ; do \
        jbuilder build @install; \
	done
      </cwn_what>
      <cwn_who>Xavier Clerc added</cwn_who>
      <cwn_what>
I found watchman (&lt;https://facebook.github.io/watchman/&gt;) to be useful
in this kind of situation.
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>5th MirageOS hack retreat - March 7th - 18th - Marrakesh</cwn_title>
      <cwn_url>https://discuss.ocaml.org/t/5th-mirageos-hack-retreat-march-7th-18th-marrakesh/1394/1</cwn_url>
      <cwn_who>Hannes Mehnert announced</cwn_who>
      <cwn_what>
please find further information at http://retreat.mirage.io and sign up (via mail).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Engineer position at Inria Rennes to work on JSExplain, a JavaScript interpreter in OCaml</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2018-01/msg00027.html</cwn_url>
      <cwn_who>Alan Schmitt announced</cwn_who>
      <cwn_what>
JSExplain is a JavaScript interpreter written in OCaml that can be used
to generate traces of the execution of a JavaScript program. These
traces record both the state of the interpreter as well as the state of
the interpreted program, and can be explored with an online tool
(&lt;https://jscert.github.io/jsexplain/branch/master/driver.html&gt;).

We have a proof of concept prototype that needs to be extended to the
current JavaScript specification, and we are looking for an engineer to
work on this at Inria Rennes, in Brittany, France. 

For more details on this positions and to apply, please follow these
links:
- English: https://jobs.inria.fr/public/classic/en/offres/2017-00122
- French: https://jobs.inria.fr/public/classic/fr/offres/2017-00122

The official starting position is September 1st, but it is flexible (it
can be earlier or later than that).
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Here are links from many OCaml blogs aggregated at OCaml Planet,
&lt;http://ocaml.org/community/planet/&gt;.

OCaml internships at LexiFi
 &lt;http://www.lexifi.com/blog/ocaml-internships-lexifi&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
