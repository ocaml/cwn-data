<?xml version="1.0" encoding="UTF-8"?>
<cwn>
  <cwn_head>
    <cwn_date>2015.05.26</cwn_date>
    <cwn_prev>2015.05.19</cwn_prev>
    <cwn_next>2015.06.02</cwn_next>
    <cwn_date_text>May 19 to 26, 2015</cwn_date_text>
  </cwn_head>
  <cwn_body>
    <cwn_entry>
      <cwn_title>GADTs and JSON</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-05/msg00081.html</cwn_url>
      <cwn_who>Trevor Smith asked and Rodolphe Lepigre replied</cwn_who>
      <cwn_what>
&gt; Is it possible to encode a recursive, heterogenous map and list datastructure
&gt; with GADTs?
&gt; 
&gt; I want to encode JSON (there are already a couple of great libraries out there
&gt; so this is kind of an academic question). I would like to have functions that
&gt; can only take a JSON map type, for example to take a json map and return a
&gt; value. The key here is that the map can hold values of type int,string and also
&gt; maps. Is this possible?
&gt; 
&gt; eg get : (map : map json) -&gt; key:string -&gt; 'a json
&gt; 
&gt; Thank you.
&gt; 
&gt; Trevor

You should probably have a look at the examples given for GADTs on the page
about language extensions (advanced examples section):

http://caml.inria.fr/pub/docs/manual-ocaml-400/manual021.html#toc85

Not so long ago I used equality types to encode collections of object of
different types. Here is an example with lists and a function for obtaining
the n-th element.

##########
type (_,_) eq = Eq : ('a,'a) eq

type 'a typ =
  | Int   : int typ
  | Float : float typ
  | Pair  : 'a typ * 'b typ -&gt; ('a * 'b) typ

let rec equal : type a b. a typ -&gt; b typ -&gt; (a,b) eq option = fun t1 t2 -&gt;
  match (t1,t2) with
  | (Int       , Int      ) -&gt; Some Eq
  | (Float     , Float    ) -&gt; Some Eq
  | (Pair(a,b) , Pair(c,d)) -&gt;
      begin
        match (equal a c, equal b d) with
        | (Some Eq, Some Eq)  -&gt; Some Eq 
        | _                   -&gt; None
      end
  | _                       -&gt; None

type _ tlist' =
  | Nil  : unit tlist'
  | Cons : ('a typ * 'a * unit tlist') -&gt; unit tlist'

type tlist = unit tlist'

let rec nth : type a. tlist -&gt; int -&gt; a typ -&gt; a = fun l n ty -&gt;
  match (l, n) with
  | (Nil          , _) -&gt; raise Not_found
  | (Cons(ty',t,_), 0) -&gt;
      begin
        match equal ty ty' with
        | Some Eq -&gt; t
        | None    -&gt; invalid_arg "Ill type in nth"
      end
  | (Cons(_,_,l)  , _) -&gt; nth l (n-1) ty

let l = Cons(Int, 3, Cons(Float, 4.2, Nil))

let n : int   = nth l 0 Int
let f : float = nth l 1 Float
##########
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Job: Ocaml Engineer in Paris</cwn_title>
      <cwn_url>https://sympa.inria.fr/sympa/arc/caml-list/2015-05/msg00083.html</cwn_url>
      <cwn_who>Vincent Balat announced</cwn_who>
      <cwn_what>
The Ocsigen team is looking for a full time OCaml developer with good OCaml
skills to work on the development of a Web application using Ocsigen (Eliom +
Js_of_ocaml) in a start-up located in Paris.

Please contact me for more information!
      </cwn_what>
    </cwn_entry>
    <cwn_entry>
      <cwn_title>Other OCaml News</cwn_title>
      <cwn_who>From the ocamlcore planet blog</cwn_who>
      <cwn_what>
Thanks to Alp Mestan, we now include in the OCaml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocaml.org/&gt;.

ICFP programming contest 2014: a retrospective (part 2/2):
  &lt;http://gallium.inria.fr/blog/icfp-contest-2014-retrospective-2&gt;

Church Numerals:
  &lt;http://blog.shaynefletcher.org/2015/05/church-numerals.html&gt;

On the book "More OCaml":
  &lt;http://www.amazon.com/review/R7DMDHZMOKS8X&gt;

ICFP programming contest 2014: a retrospective (part 1/2):
  &lt;http://gallium.inria.fr/blog/icfp-contest-2014-retrospective-1&gt;

Labeled and optional arguments:
  &lt;http://blog.shaynefletcher.org/2015/03/labeled-and-optional-arguments.html&gt;

The troublesome reflection rule (TYPES 2015 slides):
  &lt;http://math.andrej.com/2015/05/19/the-troublesome-reflection-rule-types-2015-slides/&gt;
      </cwn_what>
    </cwn_entry>
  </cwn_body>
</cwn>
