<?xml version="1.0" encoding="ISO-8859-15"?>
<cwn>
<cwn_head>
  <cwn_date>2005.06.21</cwn_date>
  <cwn_prev>2005.06.14</cwn_prev>
  <cwn_next>2005.06.28</cwn_next>
  <cwn_date_text>14 to 21 June, 2005</cwn_date_text>
  <cwn_extra_head>As some messages are not indexed correctly on the Caml Mailing List Archive, I
have switched the archive links to Gmane.</cwn_extra_head>
</cwn_head>
<cwn_body>
  <cwn_entry>
    <cwn_title>Nice OCaml-list-archive</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29308</cwn_url>
    <cwn_who>Nicolas George said</cwn_who>
    <cwn_what>
Probably most people know already, but for some who don&apos;t know yet it is
useful to remind it: the ultimate reference for mailing lists archives is
Gmane &lt;URL: http://gmane.org/ &gt;, and of course, the Caml list is there:
&lt;URL: http://dir.gmane.org/gmane.comp.lang.caml.general &gt;.
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>ANSITerminal-0.3</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29304</cwn_url>
    <cwn_who>Owen Gunden announced</cwn_who>
    <cwn_what>
ANSITerminal is a small module to display colors and allow cursor
movements on ANSI compliant terminals.

Homepage: http://math.umh.ac.be/an/software.php#x4-90008
Godi package: godi-ansiterminal

This package was formerly known as &quot;Console&quot;.

O&apos;Caml ANSIColor[1] has been deprecated in favor of this library, as
ANSIColor&apos;s functionality is now a subset of ANSITerminal.

Special thanks to Christophe Troestler for working with me on this.

1: http://projects.phauna.org/ansicolor/
    </cwn_what>
    <cwn_who>He then added</cwn_who>
    <cwn_what>
It should be noted that Christophe Troestler is the primary author of
ANSITerminal--I am merely a contributor and the godi package maintainer.
(Hump maintainer(s), please take note :).
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>Quotation System in Original Syntax</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29318</cwn_url>
    <cwn_who>Hendrik Tews announced</cwn_who>
    <cwn_what>
I would like to announce the first public release of a

   Quotation System in Original Syntax for Ocaml Abstract Syntax Trees

Eventually this package should provide an alternative to q_MLast
for those of us that are not fluent in the revised syntax. Please
visit http://wwwtcs.inf.tu-dresden.de/~tews/ocamlp4 for more
details and download links.

Status:  preliminary (only core language, no modules, no classes ...)

Kind:    Camlp4 extension

Home:    http://wwwtcs.inf.tu-dresden.de/~tews/ocamlp4

License: GNU LGPL version 2 (forced by Camlp4 license)

Example: with the provided module qo_MLast you can write

     &lt;:expr&lt; flag := not !flag; record.field &lt;- 2 &gt;&gt;

  instead of 

     &lt;:expr&lt; do { flag.val := not flag.val; record.field := 2 &gt;&gt;
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>How to handle endianness and binary string conversion for 32 bits integers (Int32)?</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29313</cwn_url>
    <cwn_who>David Mentre asked and Nicolas George answered</cwn_who>
    <cwn_what>
&gt;  1. convert between big and little endian 32 bits integers;

Don&apos;t do that.

&gt;  2. convert between 32 bits integers and string binary representation
&gt;     (to store integers in Buffer and string data structures);

What you mean to do is represent an integer in a bounded interval as a
fixed-length sequence of finite-valued objects. Said that way, children
learn how to do it in school: it&apos;s writing the number in some base. Since
bytes in a string can take 256 values, one will obviously use base 256.

The first (rightmost) &quot;digit&quot; will be (n mod 256).
The second &quot;digit&quot; will be ((n / 256) mod 256).
The third &quot;digit&quot; will be ((n / (256 * 256)) mod 256)
The fourth (leftmost) &quot;digit&quot; will be ((n / (256 * 256 * 256)) mod 256).

And so on, but since your numbers are less than 256*256*256*256, all
remaining &quot;digits&quot; are 0. So all you have to do is store these four bytes in
your string, in any order you may prefer.

&quot;Big endian&quot; is when you store the fourth, the third, the second and the
first; it is the nearest to the way we humans write numbers; and the lexical
order is the same as the numeric order. &quot;Small endian&quot; is when you store the
first, the second, the third and the fourth.

But, and that is important, this does not depend on the hardware it runs on:
it is purely arithmetic.

The reverse operation is simply

n = d1 + d2 * 256 + d3 * 256 * 256 + d4 * 256 * 256 * 256

&gt;  3. detect machine endianness at runtime.

Don&apos;t do that. I develop: there are no guarantees that numbers are either in
big or little endian. I have heard that some architectures exist where
8-bits bytes in 16-bits words are in little endian, but 16-bits words in
32-bit words are in big endian, which gives 3412 as a global order.

Using the internal representation of integers can so never be reliable. On
the contrary, compilers ensure that arithmetic in reasonable interval is the
real Peano arithmetic, for all architectures.

Using the internal representation of numbers may allow to gain some cycles
on the packing-unpacking, but it is probably nothing in regard to anything
that will be done with the data (disc access or network for example).
Furthermore, if you have to worry about inverting the order of the bytes in
the number, the gain will be even smaller.
    </cwn_what>
    <cwn_who>David Mentre replied and Nicolas George said</cwn_who>
    <cwn_what>
&gt; Except that I&apos;m writing a network interface that should be specified so
&gt; that externally written programs can read my data.

My point is: you do not need to convert between big and little endian, you
only have to convert between sequences of bytes and integers. You never need
even to know that integers are stored as bytes in the memory of the
computer.

In fact, I expect that you could not find access to the internal
representation of integers in OCaml, which is a good thing. Most of the
portability bugs in C come from people who have not understood the principle
of having access to the internal representation of objects (which is not to
use it :-). Alas, a lot of books about C are very i86-centered and explain
it really badly.
    </cwn_what>
    <cwn_who>Nicolas George replied the OP and David Mentre said</cwn_who>
    <cwn_what>
&gt; Extlib IO module have some code about that,
&gt; See http://ocaml-lib.sourceforge.net/doc/IO.html 

I&apos;ve look at this code but, from a quick look, it seems to handle only
OCaml int.

For what is worth, here is my own weel (here under public domain
&quot;license&quot;):

&lt;&lt;timestamp.ml&gt;&gt;=
open Int32
 &lt;at&gt;  

\section{32 bits integer to/from string conversion}

Function [[be_of_int32]] converts an [[Int32]] into its big
endian binary representation.

&lt;&lt;timestamp.ml&gt;&gt;=
let be_of_int32 n =
  let byte_mask = of_int 0xff in
  let char_of_int32 x = Char.chr (to_int x) in
  let d0 = char_of_int32 (logand n byte_mask) in
  let d1 = char_of_int32 (logand (shift_right_logical n 8) byte_mask) in
  let d2 = char_of_int32 (logand (shift_right_logical n 16) byte_mask) in
  let d3 = char_of_int32 (logand (shift_right_logical n 24) byte_mask) in
  let big_endian = String.make 4 d3 in
  big_endian.[1] &lt;- d2;
  big_endian.[2] &lt;- d1;
  big_endian.[3] &lt;- d0;
  big_endian
 &lt;at&gt;  

Function [[int32_of_be]] converts an big endian binary
representation of a 32 bits integer into an [[Int32]].

&lt;&lt;timestamp.ml&gt;&gt;=
let int32_of_be be =
  if String.length be &lt;&gt; 4 then 
   raise (Invalid_argument &quot;int32_from_big_endian&quot;);
  let d3 = of_int (Char.code be.[3])
  and d2 = of_int (Char.code be.[2]) 
  and d1 = of_int (Char.code be.[1]) 
  and d0 = of_int (Char.code be.[0]) in
  (logor (shift_left d0 24) 
     (logor (shift_left d1 16) 
        (logor (shift_left d2 8) d3)))
 &lt;at&gt;  

\section{Automatic tests}

&lt;&lt;timestamp.ml&gt;&gt;=
let _ =
  if Config.do_autotests then begin
    Printf.printf &quot;  timestamp autotests...&quot;;
    assert(int32_of_be &quot;\001\002\003\004&quot; = of_string &quot;0x01020304&quot;);
    assert(be_of_int32 (of_string &quot;0x01020304&quot;) = &quot;\001\002\003\004&quot;);
    assert(int32_of_be &quot;\255\254\253\252&quot; = of_string &quot;0xfffefdfc&quot;);
    assert(be_of_int32 (of_string &quot;0xfffefdfc&quot;) = &quot;\255\254\253\252&quot;);
    Printf.printf &quot;done\n&quot;
  end
 &lt;at&gt;
    </cwn_what>
  </cwn_entry>
  <cwn_entry>
    <cwn_title>C++ templates to OCaml</cwn_title>
    <cwn_url>http://thread.gmane.org/gmane.comp.lang.caml.general/29339</cwn_url>
    <cwn_who>Jonathan Roewen asked</cwn_who>
    <cwn_what>
What&apos;s the best way to imitate C++ templates in OCaml? I have some
code that makes extensive use of templates that I want to rewrite in
OCaml, and using record types and functions is getting messy, and a
lot more convoluted than the C++ code.

Are objects the way to go here? And if so, can someone give me a
simple example of how this would work?
    </cwn_what>
    <cwn_who>Jacques Carette answered</cwn_who>
    <cwn_what>
&lt;plug&gt;
I have been quite successful at doing C++ template-like things in MetaOCaml.

In fact, using Functors and Modules judisciously, it is possible to hide all of the code-generation
aspects and write 
quite straightforward code that can be instantiated in many different ways.

An earlier version of this work (joint with Oleg Kiselyov) is available at 
http://www.cas.mcmaster.ca/~carette/metamonads/ , and has been accepted at GPCE 2005.
&lt;/plug&gt;

Thanks for asking ;-)
    </cwn_what>
    <cwn_who>Brian Hurt also answered</cwn_who>
    <cwn_what>
95-99% of the uses of templates are easily replaced with either universal 
types (so List&lt;T&gt; becomes &apos;a list) or with templates (see Set and Map). 
The remainder is template meta programming, for which you probably need 
pcaml, or I&apos;d recommend rethinking the approach (template metaprogramming 
is, IMHO, one of things wrong with C++).
    </cwn_what>
    <cwn_who>Jonathan Roewen said and Benjamin Geer answered</cwn_who>
    <cwn_what>
&gt; So, I&apos;d use a module to represent each template
&gt; class, and polymorphic functions?

The book _Developing Applications with Objective Caml_ gives a good
comparison of modules, functors and classes, which might help you find
the best approach for your library.  See chapters 14, 15 and 16:

http://caml.inria.fr/pub/docs/oreilly-book/html/index.html
    </cwn_what>
  </cwn_entry>
</cwn_body>
</cwn>
