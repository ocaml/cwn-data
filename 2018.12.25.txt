			  ━━━━━━━━━━━━━━━━━━━
			   OCAML WEEKLY NEWS
			  ━━━━━━━━━━━━━━━━━━━


[Previous Week] [Up] [Next Week]

Hello

Here is the latest OCaml Weekly News, for the week of December 18 to 25,
2018.

Merry Christmas!

Table of Contents
─────────────────

Next feature for Logarion
Blog post: Virtual Libraries in Dune
LSP, DAP protocols for language and debugger support
LablGtk 3.0.beta3
Working with bit-level data
Old CWN


[Previous Week] http://alan.petitepomme.net/cwn/2018.12.18.html

[Up] http://alan.petitepomme.net/cwn/index.html

[Next Week] http://alan.petitepomme.net/cwn/2019.01.01.html


Next feature for Logarion
═════════════════════════

  Archive:
  [https://discuss.ocaml.org/t/next-feature-for-logarion/3071/1]


Orbifx announced
────────────────

  Getting ready for another release of [Logarion]. I might be able to
  squeeze in another feature before that, what would you like to see?

  [https://poll.disroot.org/9Qc3j6SP59jF64pR]

  If you want something that is not there, write a comment here or
  there, or post on the [discussion list].


[Logarion] https://logarion.orbitalfox.eu

[discussion list] mailto:logarion@lists.orbitalfox.eu


Blog post: Virtual Libraries in Dune
════════════════════════════════════

  Archive:
  [https://discuss.ocaml.org/t/blog-post-virtual-libraries-in-dune/3073/1]


Rudi Grinberg announced
───────────────────────

  Dune is gaining a new feature called virtual libraries in the next
  release (1.7). It's a pretty interesting feature so I've written a
  blog post about it:

  [http://rgrinberg.com/posts/virtual-libraries/]


LSP, DAP protocols for language and debugger support
════════════════════════════════════════════════════

  Archive:
  [https://discuss.ocaml.org/t/lsp-dap-protocols-for-language-and-debugger-support/3079/1]


Perry E. Metzger announced
──────────────────────────

  As an FYI to the OCaml community:

  Microsoft has for some time been pushing a standardized protocol for
  language servers (of which Merlin is an example), called
  (appropriately enough) the [Language Server Protocol]. The notion
  behind the LSP is to allow _any_ editor to be a good IDE for _any_
  language provided that a language server exists for the language and
  that it (and the editor) both speak the LSP. LSP has taken off very
  quickly; there's now reasonable emacs, vim, vscode, etc. support for
  it.

  It appears Microsoft is now also in the process of creating a new
  protool called the [Debug Adapter Protocol], which works to allow any
  editor or IDE to interface with any language specific debugger,
  provided both implement the protocol.

  It might be nice if, over the long run, OCaml's tooling took advantage
  of the growing ecosystem these protocols provide. I recognize that
  this probably cannot happen very quickly, but it certainly is
  something interested people in the community should be aware of.


[Language Server Protocol] https://langserver.org/

[Debug Adapter Protocol]
https://microsoft.github.io/debug-adapter-protocol/


Ryan Slade said
───────────────

  A LSP implementation for OCaml already exists:

  [https://github.com/freebroccolo/ocaml-language-server]


Louis Roché added
─────────────────

  There are (at least) 3 LSP implementation for ocaml/reason actually:

  • The one linked above
  • [https://github.com/jaredly/reason-language-server]
  • [https://github.com/bryphe/merlin-language-server]


Perry E. Metzger then said
──────────────────────────

  Yes, and there's the [Earlybird] debug adapter. But so far as I can
  tell, these tools are not in wide use. It would probably be a good
  thing if, over time, using LSP and DAP became the default way that
  Merlin and the debuggers were interfaced to editors. (This might
  require some extensions to the protocols.)


[Earlybird] https://github.com/hackwaly/ocamlearlybird


LablGtk 3.0.beta3
═════════════════

  Archive:
  [https://sympa.inria.fr/sympa/arc/caml-list/2018-12/msg00062.html]


Jacques Garrigue announced
──────────────────────────

  Here is a third beta release of Lablgtk3.

  It includes support for GtkBuilder as a replacement to libglade,
  thanks to the Matita people.

  It is available for download at the usual location:
  	[http://lablgtk.forge.ocamlcore.org]
  	[https://forge.ocamlcore.org/frs/download.php/1775/lablgtk-3.0.beta3.tar.gz]

  The opam package is on its way:
  	[https://github.com/ocaml/opam-repository/pull/13191]

  The code and bug reports are on GitHub
  	[https://github.com/garrigue/lablgtk/tree/lablgtk3] (for the
  	lablgtk3 branch)


Working with bit-level data
═══════════════════════════

  Archive:
  [https://discuss.ocaml.org/t/working-with-bit-level-data/3094/1]


Anton Kochkov asked
───────────────────

  I plan to implement bitfields support in [Cstruct] library. And I
  wonder on what syntax is best and probably an API, maybe there are
  already some good examples of OCaml libraries that work with bit-level
  data? If you ask - why not to just aggregate bits into bytes, there
  are two problems:
  1. If you don't align bitfields, all members can be shifted across
     byte boundary to be read directly
  2. Changing the way to read/write in case of different endianess

  See [https://github.com/mirage/ocaml-cstruct/issues/205] for more
  information.


[Cstruct] https://github.com/mirage/ocaml-cstruct


Anurag Soni suggested
─────────────────────

  Is [https://github.com/xguerin/bitstring] similar to what you are
  looking for?


Anton Kochkov then said
───────────────────────

  Yes, it is similar, thanks.


Old CWN
═══════

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  [online].

  [Alan Schmitt]


[send me a message] mailto:alan.schmitt@polytechnique.org

[the archive] http://alan.petitepomme.net/cwn/

[RSS feed of the archives] http://alan.petitepomme.net/cwn/cwn.rss

[online] http://lists.idyll.org/listinfo/caml-news-weekly/

[Alan Schmitt] http://alan.petitepomme.net/
