<?xml version="1.0" encoding="UTF-8"?>
<cwn>
	<cwn_head>
		<cwn_date>2009.06.23</cwn_date>
		<cwn_prev>2009.06.16</cwn_prev>
		<cwn_next>2009.06.30</cwn_next>
		<cwn_date_text>June 16 to 23, 2009</cwn_date_text>
	</cwn_head>
	<cwn_body>
	  <cwn_entry>
	   <cwn_title>OCaml Meeting 2009 in Tokyo</cwn_title>
	   <cwn_url>http://caml.inria.fr/pub/ml-archives/caml-list/2009/06/b2d4360797f291c07400a4408db0d22a.en.html</cwn_url>
	   <cwn_who>Jun Furuse announced</cwn_who>
	   <cwn_what>
It is my pleasure to announce OCaml Meeting 2009 in Tokyo.

In Japan, we have significant numbers of OCaml users. OCaml has been
used for programming courses in several universities for years. We can
read OCaml related blog posts written by people live in Japan
everyday. We have even several Japanese books about programming in
OCaml. But we have never met together. Now it is the time to meet up!
OCaml Meeting 2009 in Tokyo will be the first OCaml specific
conference in Japan:

   Date:              2009/08/30 (Sorry, it collides with ICFP unfortunately.)
   Place:             the University of Tokyo, Sanjo Conference Hall
   Participation fee: Free!

   The meeting will be partially sponsored by
    - IT Planning, Inc. (&lt;http://www.itpl.co.jp/&gt;)
    - Jane Street Capital (&lt;http://www.janestreet.com&gt;)

Its primary objective this time is to kick-start a local OCaml user
community in Japan. Therefore talks will be mainly in Japanese and
OCaml, but we welcome everyone interested in OCaml from everywhere.

Further information will appear at the following sites:

  http://www.cocan.org/events        (in English)
  http://ocaml.jp/?Users%20Meeting   (in Japanese)

For people who need further information, you can contact either me or
Satoshi Ogasawara &lt;ogasawara(a)itpl.co.jp&gt;.

We thank OCaml Meeting organization team of the past two OCaml
Meetings in France, who has kindly permitted us to use the same name,
"OCaml Meeting".
	   </cwn_what>
	  </cwn_entry>
	  <cwn_entry>
	   <cwn_title>All OCaml packages synchronised for OCaml 3.11.0 in Ubuntu Karmic</cwn_title>
	   <cwn_url>http://caml.inria.fr/pub/ml-archives/caml-list/2009/06/85383174bb1b902c9413a752cb0f8bd0.en.html</cwn_url>
	   <cwn_who>David MENTRE announced</cwn_who>
	   <cwn_what>
I'm pleased to announce that all OCaml packages made by Debian
developers are now synchronized to OCaml 3.11.0 in Ubuntu Karmic:
  http://bentobako.org/ubuntu-ocaml-status/transition_monitor/ocaml_transition_monitor.html

Moreover, all packages[1] have the same version number in Debian
Unstable and Ubuntu Karmic:
  http://bentobako.org/ubuntu-ocaml-status/raw/compare-unstable-karmic.html

So Ubuntu Karmic, aka 9.10, to be released in October will ship with a
full fledge OCaml 3.11.0! Many thanks to all Debian and Ubuntu
developers involved.

Regarding recently released OCaml 3.11.1, I'm not sure it will be
ready for Karmic but it will be available in Karmic+1 and probably in
a backport or through PPA.

Sincerely yours,
david

[1] Except unison package, but the changes made in 2.27.57-2 revision
should not impact users.
  http://packages.debian.org/changelogs/pool/main/u/unison/current/changelog#versionversion2.27.57-2
	   </cwn_what>
	  </cwn_entry>
	  <cwn_entry>
	   <cwn_title>Inflection lib for ocaml ?</cwn_title>
	   <cwn_url>http://caml.inria.fr/pub/ml-archives/caml-list/2009/06/8369429f41ab8e92250ad052a13f00aa.en.html</cwn_url>
	   <cwn_who>Conglun Yao asked, Pascal Rigaux said, and Sylvain Le Gall added</cwn_who>
	   <cwn_what>
&gt; &gt; I'm wondering is there any library in OCaml performing word inflection
&gt; &gt; between singular and plural, like Lingua-EN-Inflect in perl. Or someone is
&gt; &gt; already doing the work?
&gt;
&gt; not really comparable to Lingua-EN-Inflect, but if you want one day to
&gt; have i18n and you are under linux, ngettext is quite powerful.
&gt; cf http://www.gnu.org/software/hello/manual/gettext/Plural-forms.html
&gt;

FYI, a pure OCaml implementation of ngettext, with plural support, can
be found in ocaml-gettext:
http://le-gall.net/sylvain+violaine/ocaml-gettext.html
	   </cwn_what>
	   <cwn_who>Richard Jones also suggested</cwn_who>
	   <cwn_what>
You should be able to call the perl module directly using
perl4caml.
	   </cwn_what>
	  </cwn_entry>
	  <cwn_entry>
	   <cwn_title>Obj.magic and existential types</cwn_title>
	   <cwn_url>http://caml.inria.fr/pub/ml-archives/caml-list/2009/06/e95c643956552bdc419820e0a3a81086.en.html</cwn_url>
	   <cwn_who>Guillaume Yziquel said</cwn_who>
	   <cwn_what>
Please don't scream: I've been using Obj.magic...

But the result is rather interesting. It can record a flow of 
computations, and recompute them only when upstream data has been modified:

&gt; # let (n', n) = Dependent.encapsulate 1;;
&gt; val n' : int Dependent.data = &lt;abstr&gt;
&gt; val n : int Dependent.t = &lt;abstr&gt;
&gt; # let (_, next) = Dependent.encapsulate (fun x -&gt; x + 1);;
&gt; val next : (int -&gt; int) Dependent.t = &lt;abstr&gt;
&gt; # let m = Dependent.apply next n;;
&gt; val m : int Dependent.t = &lt;abstr&gt;
&gt; # Dependent.access m;;
&gt; - : int = 2
&gt; # Dependent.set n' 3;;
&gt; - : unit = ()
&gt; # Dependent.access m;;
&gt; - : int = 4

The piece of code responsible for this behaviour is at the end of the 
message.

I learnt that I could perhaps overcome the use of Obj.magic by using 
existential types. I was advised to read the following post on this topic:

http://caml.inria.fr/pub/ml-archives/caml-list/2004/01/52732867110697f55650778d883ae5e9.en.html

However, I do not really understand how Daniel implemented existential 
types there, and I do not really see how it can be adapted to my code. 
Suggestions welcomed.

Here's the code, rather disorganised at the moment.

All the best,

Guillaume Yziquel.


&gt; type read;;
&gt; type write;;
&gt; 
&gt; type 'a computation = (Obj.t -&gt; 'a) t * Obj.t t
&gt; 
&gt; and ('a, 'b) aux_t = Dependent of
&gt;   ( 'a option ref *
&gt;     'a computation option *
&gt;     Obj.t t list ref)
&gt; 
&gt; and 'a data = ('a, write) aux_t
&gt; and 'a t    = ('a, read)  aux_t;;
&gt; 
&gt; let encapsulate (x : 'a) : ('a data) * ('a t) =
&gt;   let z = Dependent ((ref (Some x)), None, (ref [])) in (z, z);;
&gt; 
&gt; let add_dependency (alpha : 'a t) (beta : 'b t) =
&gt;   let Dependent (_, _, dep) = alpha in
&gt;   dep := ((Obj.magic beta) : Obj.t t)::!dep;;
&gt; 
&gt; let apply (f : ('b -&gt; 'a) t) (x : 'b t) : 'a t =
&gt;   let computation : 'a computation =
&gt;     ((Obj.magic f) : (Obj.t -&gt; 'a) t),
&gt;     ((Obj.magic x) : Obj.t         t) in
&gt;   let f_x : 'a t = Dependent (
&gt;     ((ref None)         : 'a option ref),
&gt;     ((Some computation) : 'a computation option),
&gt;     ((ref [])           : Obj.t t list ref)) in
&gt;   add_dependency f f_x;
&gt;   add_dependency x f_x;
&gt;   f_x;;
&gt; 
&gt; exception Undefined;;
&gt; 
&gt; module rec Aux :
&gt; sig
&gt; 
&gt;   val access : 'a t -&gt; 'a
&gt;   val update : 'a t -&gt; ('b -&gt; 'a) t -&gt; 'b t -&gt; 'a
&gt;   val reset  : 'a t -&gt; unit
&gt; 
&gt; end = struct
&gt; 
&gt;   let rec access y =
&gt;     let Dependent (opt_ref_x, comp_opt, _) = y in
&gt;     match !opt_ref_x with | Some x -&gt; x | None -&gt;
&gt;     begin match comp_opt with
&gt;       | None -&gt; raise Undefined
&gt;       | Some (fun_t, arg_t) -&gt; Aux.update y fun_t arg_t
&gt;     end
&gt; 
&gt;   and update y fun_t arg_t =
&gt;     let Dependent (opt_ref_x, _, dependencies) = y in
&gt;     List.iter Aux.reset !dependencies;
&gt;     let result = (Aux.access fun_t) (Aux.access arg_t) in
&gt;     opt_ref_x := Some result; result
&gt; 
&gt;   and reset z =
&gt;     let Dependent (opt_ref_x, _, dependencies) = z in
&gt;     match !opt_ref_x with
&gt;     | None -&gt; () | Some _ -&gt; begin
&gt;         opt_ref_x := None;
&gt;         List.iter Aux.reset !dependencies
&gt;     end;;
&gt; 
&gt; end;;
&gt; 
&gt; include Aux;;
&gt; 
&gt; exception Flawed_implementation;;
&gt; 
&gt; let set (x : 'a data) (v : 'a) : unit =
&gt;   let Dependent (opt_ref_x, comp_opt, dependencies) = x in
&gt;   match comp_opt with | Some _ -&gt; raise Flawed_implementation | None -&gt;
&gt;   begin List.iter Aux.reset !dependencies;
&gt;         opt_ref_x := Some v
&gt;   end;;
	   </cwn_what>
	   <cwn_who>Daniel BÃ¼nzli replied</cwn_who>
	   <cwn_what>
Not directly responding to your question but you are looking for  
functional reactive programming (frp).

http://erratique.ch/software/react

I rewrote your example below with react (no magic used).

Best,

Daniel

 &gt; ocaml react.cmo
         Objective Caml version 3.11.0

# open React;;
# let n, set_n = S.create 1;;
val n : int React.signal = &lt;abstr&gt;
val set_n : int -&gt; unit = &lt;fun&gt;
# let m = S.map (fun x -&gt; x + 1) n ;;
val m : int React.signal = &lt;abstr&gt;
# S.value m;;
- : int = 2
# set_n 3;;
- : unit = ()
# S.value m;;
- : int = 4
	   </cwn_what>
	   <cwn_who>Jake Donham also replied</cwn_who>
	   <cwn_what>
You can also find FRP in froc (which is quite similar to React; the
main difference is that it works in browsers):

  http://code.google.com/p/froc/

# open Froc_afp;;
# let n = return 1;;
val n : int Froc_afp.t = &lt;abstr&gt;
# let m = n &gt;&gt;= fun x -&gt; return (x + 1);;
val m : int Froc_afp.t = &lt;abstr&gt;
# read m;;
- : int = 2
# write n 3;;
- : unit = ()
# propagate ();;
- : unit = ()
# read m;;
- : int = 4
	   </cwn_what>
	  </cwn_entry>
	  <cwn_entry>
	   <cwn_title>Camomile 0.7.2</cwn_title>
	   <cwn_url>http://caml.inria.fr/pub/ml-archives/caml-list/2009/06/1a3f29c3afaf4d714c28573283cd5add.en.html</cwn_url>
	   <cwn_who>Yoriyuki Yamagata announced</cwn_who>
	   <cwn_what>
I'm happy to announce Camomile 0.7.2, new version of comprehensive
Unicode library for Objective Caml.

Changes are
  - License change:  Add OCaml-style exception clause to LGPL license.
  - Small documentation fix to REAEME:  Add cpp to the list of
necessary GNU tools

This will be a small step to Camomile Next Generation, I hope.

After previous release, several people submitted patches (thanks!).  I
do not have time to incorporate them but are submitted patch-tracker
(including patches sent by email)
  https://sourceforge.net/tracker/?group_id=40603&amp;atid=428418

In addition, a new malinglist for discussion between Camomile users is open
  https://lists.sourceforge.net/lists/listinfo/camomile-users
So, discuss and share tips for using of Camomile.  I also want to hear
who and what software use Camomile.
	   </cwn_what>
	   <cwn_who>He later added</cwn_who>
	   <cwn_what>
Ahem, I'm too hurry to post the article. It lacks the link to the
package itself.

Camomile is available from

https://sourceforge.net/project/showfiles.php?group_id=40603&amp;package_id=32800&amp;release_id=691358
	   </cwn_what>
	  </cwn_entry>
		<cwn_entry>
			<cwn_title>Other Caml News</cwn_title>
			<cwn_who>From the ocamlcore planet blog</cwn_who>
			<cwn_what>
Thanks to Alp Mestan, we now include in the Caml Weekly News the links to the
recent posts from the ocamlcore planet blog at &lt;http://planet.ocamlcore.org/&gt;.

New HLVM examples:
  &lt;http://forge.ocamlcore.org/forum/forum.php?forum_id=390&gt;

FP-Syd #16.:
  &lt;http://www.mega-nerd.com/erikd/Blog/FP-Syd/fp-syd-16.html&gt;

Finite maps galore: imperative code strikes back:
  &lt;http://eigenclass.org/R2/writings/finite-map-benchmarks&gt;

Ubuntu 9.10 will ship with OCaml 3.11.0... for now:
  &lt;https://bentobako.org/david/blog/index.php?post/2009/06/18/Ubuntu-9.10-will-ship-with-OCaml-3.11.0...-for-now&gt;

OCaml Monitor Applet:
  &lt;http://forge.ocamlcore.org/projects/omonitor-applet/&gt;

The Tree Nursery:
  &lt;http://alaska-kamtchatka.blogspot.com/2009/06/tree-nursery.html&gt;
			</cwn_what>
		</cwn_entry>
	</cwn_body>
</cwn>